
I2C_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b4  080067d0  080067d0  000077d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b84  08006b84  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006b84  08006b84  00007b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b8c  08006b8c  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b8c  08006b8c  00007b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b90  08006b90  00007b90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08006b94  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000234  200001d4  08006d68  000081d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08006d68  00008408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a772  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f4  00000000  00000000  00012976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  00014270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b5  00000000  00000000  00014c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000167d4  00000000  00000000  00015405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c2b0  00000000  00000000  0002bbd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008952b  00000000  00000000  00037e89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c13b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003958  00000000  00000000  000c13f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  000c4d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067b4 	.word	0x080067b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	080067b4 	.word	0x080067b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f8c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000f90:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000f94:	f003 0301 	and.w	r3, r3, #1
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d013      	beq.n	8000fc4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f9c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fa0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000fa4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00b      	beq.n	8000fc4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fac:	e000      	b.n	8000fb0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fb0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f9      	beq.n	8000fae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fba:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	b2d2      	uxtb	r2, r2
 8000fc2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fc4:	687b      	ldr	r3, [r7, #4]
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <MPU6050_Init>:

bool test;
uint8_t check, Data;

void MPU6050_Init (void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b084      	sub	sp, #16
 8000fd8:	af04      	add	r7, sp, #16

	//check WHO AM I
	HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000fda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	9301      	str	r3, [sp, #4]
 8000fe4:	4b27      	ldr	r3, [pc, #156]	@ (8001084 <MPU6050_Init+0xb0>)
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	2275      	movs	r2, #117	@ 0x75
 8000fec:	21d0      	movs	r1, #208	@ 0xd0
 8000fee:	4826      	ldr	r0, [pc, #152]	@ (8001088 <MPU6050_Init+0xb4>)
 8000ff0:	f001 fa0a 	bl	8002408 <HAL_I2C_Mem_Read>

	if (check == 0x68) //if the device is present
 8000ff4:	4b23      	ldr	r3, [pc, #140]	@ (8001084 <MPU6050_Init+0xb0>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b68      	cmp	r3, #104	@ 0x68
 8000ffa:	d13f      	bne.n	800107c <MPU6050_Init+0xa8>
	{
		//power management register 0x6B, write all 0's to wake sensor up
			Data = 0;
 8000ffc:	4b23      	ldr	r3, [pc, #140]	@ (800108c <MPU6050_Init+0xb8>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8001002:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001006:	9302      	str	r3, [sp, #8]
 8001008:	2301      	movs	r3, #1
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	4b1f      	ldr	r3, [pc, #124]	@ (800108c <MPU6050_Init+0xb8>)
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2301      	movs	r3, #1
 8001012:	226b      	movs	r2, #107	@ 0x6b
 8001014:	21d0      	movs	r1, #208	@ 0xd0
 8001016:	481c      	ldr	r0, [pc, #112]	@ (8001088 <MPU6050_Init+0xb4>)
 8001018:	f001 f8fc 	bl	8002214 <HAL_I2C_Mem_Write>

		//Set DATA RATE of 1kHz by writing SMPLRT_DIV register
			Data = 0x07;
 800101c:	4b1b      	ldr	r3, [pc, #108]	@ (800108c <MPU6050_Init+0xb8>)
 800101e:	2207      	movs	r2, #7
 8001020:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001022:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001026:	9302      	str	r3, [sp, #8]
 8001028:	2301      	movs	r3, #1
 800102a:	9301      	str	r3, [sp, #4]
 800102c:	4b17      	ldr	r3, [pc, #92]	@ (800108c <MPU6050_Init+0xb8>)
 800102e:	9300      	str	r3, [sp, #0]
 8001030:	2301      	movs	r3, #1
 8001032:	2219      	movs	r2, #25
 8001034:	21d0      	movs	r1, #208	@ 0xd0
 8001036:	4814      	ldr	r0, [pc, #80]	@ (8001088 <MPU6050_Init+0xb4>)
 8001038:	f001 f8ec 	bl	8002214 <HAL_I2C_Mem_Write>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> \pm 2g
			Data = 0x00;
 800103c:	4b13      	ldr	r3, [pc, #76]	@ (800108c <MPU6050_Init+0xb8>)
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001042:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001046:	9302      	str	r3, [sp, #8]
 8001048:	2301      	movs	r3, #1
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	4b0f      	ldr	r3, [pc, #60]	@ (800108c <MPU6050_Init+0xb8>)
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2301      	movs	r3, #1
 8001052:	221c      	movs	r2, #28
 8001054:	21d0      	movs	r1, #208	@ 0xd0
 8001056:	480c      	ldr	r0, [pc, #48]	@ (8001088 <MPU6050_Init+0xb4>)
 8001058:	f001 f8dc 	bl	8002214 <HAL_I2C_Mem_Write>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> +-250 deg/s
			Data = 0x00;
 800105c:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <MPU6050_Init+0xb8>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
			HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001062:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001066:	9302      	str	r3, [sp, #8]
 8001068:	2301      	movs	r3, #1
 800106a:	9301      	str	r3, [sp, #4]
 800106c:	4b07      	ldr	r3, [pc, #28]	@ (800108c <MPU6050_Init+0xb8>)
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	2301      	movs	r3, #1
 8001072:	221b      	movs	r2, #27
 8001074:	21d0      	movs	r1, #208	@ 0xd0
 8001076:	4804      	ldr	r0, [pc, #16]	@ (8001088 <MPU6050_Init+0xb4>)
 8001078:	f001 f8cc 	bl	8002214 <HAL_I2C_Mem_Write>


	}
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200002b0 	.word	0x200002b0
 8001088:	200001f0 	.word	0x200001f0
 800108c:	200002b1 	.word	0x200002b1

08001090 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel (void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	9302      	str	r3, [sp, #8]
 800109c:	2306      	movs	r3, #6
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	463b      	mov	r3, r7
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2301      	movs	r3, #1
 80010a6:	223b      	movs	r2, #59	@ 0x3b
 80010a8:	21d0      	movs	r1, #208	@ 0xd0
 80010aa:	4830      	ldr	r0, [pc, #192]	@ (800116c <MPU6050_Read_Accel+0xdc>)
 80010ac:	f001 f9ac 	bl	8002408 <HAL_I2C_Mem_Read>

    Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80010b0:	783b      	ldrb	r3, [r7, #0]
 80010b2:	b21b      	sxth	r3, r3
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <MPU6050_Read_Accel+0xe0>)
 80010c2:	801a      	strh	r2, [r3, #0]
    Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80010c4:	78bb      	ldrb	r3, [r7, #2]
 80010c6:	b21b      	sxth	r3, r3
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	78fb      	ldrb	r3, [r7, #3]
 80010ce:	b21b      	sxth	r3, r3
 80010d0:	4313      	orrs	r3, r2
 80010d2:	b21a      	sxth	r2, r3
 80010d4:	4b27      	ldr	r3, [pc, #156]	@ (8001174 <MPU6050_Read_Accel+0xe4>)
 80010d6:	801a      	strh	r2, [r3, #0]
    Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	797b      	ldrb	r3, [r7, #5]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <MPU6050_Read_Accel+0xe8>)
 80010ea:	801a      	strh	r2, [r3, #0]
    /*** convert the RAW values into acceleration in 'g'
        we have to divide according to the Full scale value set in FS_SEL
        I have configured FS_SEL = 0. So I am dividing by 16384.0
        for more details check ACCEL_CONFIG Register ****/

    Ax = Accel_X_RAW/16384.0;
 80010ec:	4b20      	ldr	r3, [pc, #128]	@ (8001170 <MPU6050_Read_Accel+0xe0>)
 80010ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa1e 	bl	8000534 <__aeabi_i2d>
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <MPU6050_Read_Accel+0xec>)
 80010fe:	f7ff fbad 	bl	800085c <__aeabi_ddiv>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd55 	bl	8000bb8 <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4a1b      	ldr	r2, [pc, #108]	@ (8001180 <MPU6050_Read_Accel+0xf0>)
 8001112:	6013      	str	r3, [r2, #0]
    Ay = Accel_Y_RAW/16384.0;
 8001114:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MPU6050_Read_Accel+0xe4>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa0a 	bl	8000534 <__aeabi_i2d>
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	4b15      	ldr	r3, [pc, #84]	@ (800117c <MPU6050_Read_Accel+0xec>)
 8001126:	f7ff fb99 	bl	800085c <__aeabi_ddiv>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	4610      	mov	r0, r2
 8001130:	4619      	mov	r1, r3
 8001132:	f7ff fd41 	bl	8000bb8 <__aeabi_d2f>
 8001136:	4603      	mov	r3, r0
 8001138:	4a12      	ldr	r2, [pc, #72]	@ (8001184 <MPU6050_Read_Accel+0xf4>)
 800113a:	6013      	str	r3, [r2, #0]
    Az = Accel_Z_RAW/16384.0;
 800113c:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MPU6050_Read_Accel+0xe8>)
 800113e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff f9f6 	bl	8000534 <__aeabi_i2d>
 8001148:	f04f 0200 	mov.w	r2, #0
 800114c:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <MPU6050_Read_Accel+0xec>)
 800114e:	f7ff fb85 	bl	800085c <__aeabi_ddiv>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4610      	mov	r0, r2
 8001158:	4619      	mov	r1, r3
 800115a:	f7ff fd2d 	bl	8000bb8 <__aeabi_d2f>
 800115e:	4603      	mov	r3, r0
 8001160:	4a09      	ldr	r2, [pc, #36]	@ (8001188 <MPU6050_Read_Accel+0xf8>)
 8001162:	6013      	str	r3, [r2, #0]

}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001f0 	.word	0x200001f0
 8001170:	2000028c 	.word	0x2000028c
 8001174:	2000028e 	.word	0x2000028e
 8001178:	20000290 	.word	0x20000290
 800117c:	40d00000 	.word	0x40d00000
 8001180:	20000298 	.word	0x20000298
 8001184:	2000029c 	.word	0x2000029c
 8001188:	200002a0 	.word	0x200002a0
 800118c:	00000000 	.word	0x00000000

08001190 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro (void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af04      	add	r7, sp, #16
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 8001196:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	2306      	movs	r3, #6
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	463b      	mov	r3, r7
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2243      	movs	r2, #67	@ 0x43
 80011a8:	21d0      	movs	r1, #208	@ 0xd0
 80011aa:	4833      	ldr	r0, [pc, #204]	@ (8001278 <MPU6050_Read_Gyro+0xe8>)
 80011ac:	f001 f92c 	bl	8002408 <HAL_I2C_Mem_Read>

    Gyro_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data [1]);
 80011b0:	783b      	ldrb	r3, [r7, #0]
 80011b2:	b21b      	sxth	r3, r3
 80011b4:	021b      	lsls	r3, r3, #8
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	787b      	ldrb	r3, [r7, #1]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	b21a      	sxth	r2, r3
 80011c0:	4b2e      	ldr	r3, [pc, #184]	@ (800127c <MPU6050_Read_Gyro+0xec>)
 80011c2:	801a      	strh	r2, [r3, #0]
    Gyro_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data [3]);
 80011c4:	78bb      	ldrb	r3, [r7, #2]
 80011c6:	b21b      	sxth	r3, r3
 80011c8:	021b      	lsls	r3, r3, #8
 80011ca:	b21a      	sxth	r2, r3
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	b21b      	sxth	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b21a      	sxth	r2, r3
 80011d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001280 <MPU6050_Read_Gyro+0xf0>)
 80011d6:	801a      	strh	r2, [r3, #0]
    Gyro_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data [5]);
 80011d8:	793b      	ldrb	r3, [r7, #4]
 80011da:	b21b      	sxth	r3, r3
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	b21a      	sxth	r2, r3
 80011e0:	797b      	ldrb	r3, [r7, #5]
 80011e2:	b21b      	sxth	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	4b26      	ldr	r3, [pc, #152]	@ (8001284 <MPU6050_Read_Gyro+0xf4>)
 80011ea:	801a      	strh	r2, [r3, #0]
    /*** convert the RAW values into dps (%/s)
        we have to divide according to the Full scale value set in FS_SEL
        I have configured FS_SEL = 0. So I am dividing by 131.0
        for more details check GYRO_CONFIG Register} ****/

    Gx = Gyro_X_RAW/131.0;
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <MPU6050_Read_Gyro+0xec>)
 80011ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff f99e 	bl	8000534 <__aeabi_i2d>
 80011f8:	a31d      	add	r3, pc, #116	@ (adr r3, 8001270 <MPU6050_Read_Gyro+0xe0>)
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fb2d 	bl	800085c <__aeabi_ddiv>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fcd5 	bl	8000bb8 <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <MPU6050_Read_Gyro+0xf8>)
 8001212:	6013      	str	r3, [r2, #0]
    Gy = Gyro_Y_RAW/131.0;
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <MPU6050_Read_Gyro+0xf0>)
 8001216:	f9b3 3000 	ldrsh.w	r3, [r3]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f98a 	bl	8000534 <__aeabi_i2d>
 8001220:	a313      	add	r3, pc, #76	@ (adr r3, 8001270 <MPU6050_Read_Gyro+0xe0>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb19 	bl	800085c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4610      	mov	r0, r2
 8001230:	4619      	mov	r1, r3
 8001232:	f7ff fcc1 	bl	8000bb8 <__aeabi_d2f>
 8001236:	4603      	mov	r3, r0
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <MPU6050_Read_Gyro+0xfc>)
 800123a:	6013      	str	r3, [r2, #0]
    Gz = Gyro_Z_RAW/131.0;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MPU6050_Read_Gyro+0xf4>)
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f976 	bl	8000534 <__aeabi_i2d>
 8001248:	a309      	add	r3, pc, #36	@ (adr r3, 8001270 <MPU6050_Read_Gyro+0xe0>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff fb05 	bl	800085c <__aeabi_ddiv>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fcad 	bl	8000bb8 <__aeabi_d2f>
 800125e:	4603      	mov	r3, r0
 8001260:	4a0b      	ldr	r2, [pc, #44]	@ (8001290 <MPU6050_Read_Gyro+0x100>)
 8001262:	6013      	str	r3, [r2, #0]
    /*
    test = (Gx >> 1) & 1; //Extract bool test

    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, test);
    */
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	f3af 8000 	nop.w
 8001270:	00000000 	.word	0x00000000
 8001274:	40606000 	.word	0x40606000
 8001278:	200001f0 	.word	0x200001f0
 800127c:	20000292 	.word	0x20000292
 8001280:	20000294 	.word	0x20000294
 8001284:	20000296 	.word	0x20000296
 8001288:	200002a4 	.word	0x200002a4
 800128c:	200002a8 	.word	0x200002a8
 8001290:	200002ac 	.word	0x200002ac

08001294 <SWV_Debug>:

void SWV_Debug (void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	printf("Gyro_X_RAW: %d\n", Gyro_X_RAW);
 8001298:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <SWV_Debug+0x38>)
 800129a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800129e:	4619      	mov	r1, r3
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <SWV_Debug+0x3c>)
 80012a2:	f003 fb0b 	bl	80048bc <iprintf>
	printf("check: %d\n", check);
 80012a6:	4b0b      	ldr	r3, [pc, #44]	@ (80012d4 <SWV_Debug+0x40>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	480a      	ldr	r0, [pc, #40]	@ (80012d8 <SWV_Debug+0x44>)
 80012ae:	f003 fb05 	bl	80048bc <iprintf>
	printf("Gx: %f\n", Gx);
 80012b2:	4b0a      	ldr	r3, [pc, #40]	@ (80012dc <SWV_Debug+0x48>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f94e 	bl	8000558 <__aeabi_f2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4807      	ldr	r0, [pc, #28]	@ (80012e0 <SWV_Debug+0x4c>)
 80012c2:	f003 fafb 	bl	80048bc <iprintf>
}
 80012c6:	bf00      	nop
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000292 	.word	0x20000292
 80012d0:	080067d0 	.word	0x080067d0
 80012d4:	200002b0 	.word	0x200002b0
 80012d8:	080067e0 	.word	0x080067e0
 80012dc:	200002a4 	.word	0x200002a4
 80012e0:	080067ec 	.word	0x080067ec

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e8:	f000 fb36 	bl	8001958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ec:	f000 f814 	bl	8001318 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f0:	f000 f8d4 	bl	800149c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012f4:	f000 f8a8 	bl	8001448 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012f8:	f000 f878 	bl	80013ec <MX_I2C1_Init>


  /* USER CODE BEGIN 2 */
  MPU6050_Init();
 80012fc:	f7ff fe6a 	bl	8000fd4 <MPU6050_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MPU6050_Read_Accel();
 8001300:	f7ff fec6 	bl	8001090 <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro();
 8001304:	f7ff ff44 	bl	8001190 <MPU6050_Read_Gyro>
	  SWV_Debug();
 8001308:	f7ff ffc4 	bl	8001294 <SWV_Debug>
	  HAL_Delay(100);
 800130c:	2064      	movs	r0, #100	@ 0x64
 800130e:	f000 fb95 	bl	8001a3c <HAL_Delay>
	  MPU6050_Read_Accel();
 8001312:	bf00      	nop
 8001314:	e7f4      	b.n	8001300 <main+0x1c>
	...

08001318 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	2230      	movs	r2, #48	@ 0x30
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fb1d 	bl	8004966 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <SystemClock_Config+0xcc>)
 8001342:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001344:	4a27      	ldr	r2, [pc, #156]	@ (80013e4 <SystemClock_Config+0xcc>)
 8001346:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134a:	6413      	str	r3, [r2, #64]	@ 0x40
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <SystemClock_Config+0xcc>)
 800134e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001350:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001358:	2300      	movs	r3, #0
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	4b22      	ldr	r3, [pc, #136]	@ (80013e8 <SystemClock_Config+0xd0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001364:	4a20      	ldr	r2, [pc, #128]	@ (80013e8 <SystemClock_Config+0xd0>)
 8001366:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800136a:	6013      	str	r3, [r2, #0]
 800136c:	4b1e      	ldr	r3, [pc, #120]	@ (80013e8 <SystemClock_Config+0xd0>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001374:	607b      	str	r3, [r7, #4]
 8001376:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001378:	2301      	movs	r3, #1
 800137a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800137c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001382:	2302      	movs	r3, #2
 8001384:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001386:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800138a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800138c:	2304      	movs	r3, #4
 800138e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001390:	2354      	movs	r3, #84	@ 0x54
 8001392:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001394:	2302      	movs	r3, #2
 8001396:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001398:	2307      	movs	r3, #7
 800139a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fe17 	bl	8002fd4 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013ac:	f000 f900 	bl	80015b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c6:	f107 030c 	add.w	r3, r7, #12
 80013ca:	2102      	movs	r1, #2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 f879 	bl	80034c4 <HAL_RCC_ClockConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013d8:	f000 f8ea 	bl	80015b0 <Error_Handler>
  }
}
 80013dc:	bf00      	nop
 80013de:	3750      	adds	r7, #80	@ 0x50
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40007000 	.word	0x40007000

080013ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f2:	4a13      	ldr	r2, [pc, #76]	@ (8001440 <MX_I2C1_Init+0x54>)
 80013f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <MX_I2C1_Init+0x50>)
 80013f8:	4a12      	ldr	r2, [pc, #72]	@ (8001444 <MX_I2C1_Init+0x58>)
 80013fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <MX_I2C1_Init+0x50>)
 800140a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800140e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001410:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <MX_I2C1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001416:	4b09      	ldr	r3, [pc, #36]	@ (800143c <MX_I2C1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800141c:	4b07      	ldr	r3, [pc, #28]	@ (800143c <MX_I2C1_Init+0x50>)
 800141e:	2200      	movs	r2, #0
 8001420:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001422:	4b06      	ldr	r3, [pc, #24]	@ (800143c <MX_I2C1_Init+0x50>)
 8001424:	2200      	movs	r2, #0
 8001426:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001428:	4804      	ldr	r0, [pc, #16]	@ (800143c <MX_I2C1_Init+0x50>)
 800142a:	f000 fdaf 	bl	8001f8c <HAL_I2C_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001434:	f000 f8bc 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	bd80      	pop	{r7, pc}
 800143c:	200001f0 	.word	0x200001f0
 8001440:	40005400 	.word	0x40005400
 8001444:	000186a0 	.word	0x000186a0

08001448 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b11      	ldr	r3, [pc, #68]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800144e:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_USART2_UART_Init+0x50>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001454:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b0e      	ldr	r3, [pc, #56]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b0c      	ldr	r3, [pc, #48]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b0b      	ldr	r3, [pc, #44]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800147e:	4805      	ldr	r0, [pc, #20]	@ (8001494 <MX_USART2_UART_Init+0x4c>)
 8001480:	f002 fa40 	bl	8003904 <HAL_UART_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800148a:	f000 f891 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	20000244 	.word	0x20000244
 8001498:	40004400 	.word	0x40004400

0800149c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	@ 0x28
 80014a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a2:	f107 0314 	add.w	r3, r7, #20
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
 80014b6:	4b2d      	ldr	r3, [pc, #180]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ba:	4a2c      	ldr	r2, [pc, #176]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c2:	4b2a      	ldr	r3, [pc, #168]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b26      	ldr	r3, [pc, #152]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a25      	ldr	r2, [pc, #148]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b23      	ldr	r3, [pc, #140]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a1e      	ldr	r2, [pc, #120]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_GPIO_Init+0xd0>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	607b      	str	r3, [r7, #4]
 800150a:	4b18      	ldr	r3, [pc, #96]	@ (800156c <MX_GPIO_Init+0xd0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a17      	ldr	r2, [pc, #92]	@ (800156c <MX_GPIO_Init+0xd0>)
 8001510:	f043 0302 	orr.w	r3, r3, #2
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b15      	ldr	r3, [pc, #84]	@ (800156c <MX_GPIO_Init+0xd0>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	607b      	str	r3, [r7, #4]
 8001520:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001522:	2200      	movs	r2, #0
 8001524:	2120      	movs	r1, #32
 8001526:	4812      	ldr	r0, [pc, #72]	@ (8001570 <MX_GPIO_Init+0xd4>)
 8001528:	f000 fd16 	bl	8001f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800152c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001532:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001536:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	4619      	mov	r1, r3
 8001542:	480c      	ldr	r0, [pc, #48]	@ (8001574 <MX_GPIO_Init+0xd8>)
 8001544:	f000 fb84 	bl	8001c50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001548:	2320      	movs	r3, #32
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4804      	ldr	r0, [pc, #16]	@ (8001570 <MX_GPIO_Init+0xd4>)
 8001560:	f000 fb76 	bl	8001c50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	@ 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020800 	.word	0x40020800

08001578 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
 8001588:	e009      	b.n	800159e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1c5a      	adds	r2, r3, #1
 800158e:	60ba      	str	r2, [r7, #8]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	4618      	mov	r0, r3
 8001594:	f7ff fcf6 	bl	8000f84 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	3301      	adds	r3, #1
 800159c:	617b      	str	r3, [r7, #20]
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	dbf1      	blt.n	800158a <_write+0x12>
  }
  return len;
 80015a6:	687b      	ldr	r3, [r7, #4]
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b4:	b672      	cpsid	i
}
 80015b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b8:	bf00      	nop
 80015ba:	e7fd      	b.n	80015b8 <Error_Handler+0x8>

080015bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	4b10      	ldr	r3, [pc, #64]	@ (8001608 <HAL_MspInit+0x4c>)
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001608 <HAL_MspInit+0x4c>)
 80015cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001608 <HAL_MspInit+0x4c>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015da:	607b      	str	r3, [r7, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	603b      	str	r3, [r7, #0]
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x4c>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x4c>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023800 	.word	0x40023800

0800160c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a19      	ldr	r2, [pc, #100]	@ (8001690 <HAL_I2C_MspInit+0x84>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d12b      	bne.n	8001686 <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
 8001632:	4b18      	ldr	r3, [pc, #96]	@ (8001694 <HAL_I2C_MspInit+0x88>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001636:	4a17      	ldr	r2, [pc, #92]	@ (8001694 <HAL_I2C_MspInit+0x88>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	6313      	str	r3, [r2, #48]	@ 0x30
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_I2C_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800164a:	23c0      	movs	r3, #192	@ 0xc0
 800164c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164e:	2312      	movs	r3, #18
 8001650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001656:	2303      	movs	r3, #3
 8001658:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165a:	2304      	movs	r3, #4
 800165c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165e:	f107 0314 	add.w	r3, r7, #20
 8001662:	4619      	mov	r1, r3
 8001664:	480c      	ldr	r0, [pc, #48]	@ (8001698 <HAL_I2C_MspInit+0x8c>)
 8001666:	f000 faf3 	bl	8001c50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60fb      	str	r3, [r7, #12]
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_I2C_MspInit+0x88>)
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_I2C_MspInit+0x88>)
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001678:	6413      	str	r3, [r2, #64]	@ 0x40
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_I2C_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001686:	bf00      	nop
 8001688:	3728      	adds	r7, #40	@ 0x28
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40005400 	.word	0x40005400
 8001694:	40023800 	.word	0x40023800
 8001698:	40020400 	.word	0x40020400

0800169c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	@ 0x28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
 80016ac:	605a      	str	r2, [r3, #4]
 80016ae:	609a      	str	r2, [r3, #8]
 80016b0:	60da      	str	r2, [r3, #12]
 80016b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a19      	ldr	r2, [pc, #100]	@ (8001720 <HAL_UART_MspInit+0x84>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d12b      	bne.n	8001716 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_UART_MspInit+0x88>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	4a17      	ldr	r2, [pc, #92]	@ (8001724 <HAL_UART_MspInit+0x88>)
 80016c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ce:	4b15      	ldr	r3, [pc, #84]	@ (8001724 <HAL_UART_MspInit+0x88>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d6:	613b      	str	r3, [r7, #16]
 80016d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60fb      	str	r3, [r7, #12]
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_UART_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	4a10      	ldr	r2, [pc, #64]	@ (8001724 <HAL_UART_MspInit+0x88>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_UART_MspInit+0x88>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016f6:	230c      	movs	r3, #12
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001702:	2300      	movs	r3, #0
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001706:	2307      	movs	r3, #7
 8001708:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	4805      	ldr	r0, [pc, #20]	@ (8001728 <HAL_UART_MspInit+0x8c>)
 8001712:	f000 fa9d 	bl	8001c50 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001716:	bf00      	nop
 8001718:	3728      	adds	r7, #40	@ 0x28
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40004400 	.word	0x40004400
 8001724:	40023800 	.word	0x40023800
 8001728:	40020000 	.word	0x40020000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001782:	f000 f93b 	bl	80019fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}

0800178a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800178a:	b480      	push	{r7}
 800178c:	af00      	add	r7, sp, #0
  return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <_kill>:

int _kill(int pid, int sig)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
 80017a2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017a4:	f003 f932 	bl	8004a0c <__errno>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2216      	movs	r2, #22
 80017ac:	601a      	str	r2, [r3, #0]
  return -1;
 80017ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <_exit>:

void _exit (int status)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017c2:	f04f 31ff 	mov.w	r1, #4294967295
 80017c6:	6878      	ldr	r0, [r7, #4]
 80017c8:	f7ff ffe7 	bl	800179a <_kill>
  while (1) {}    /* Make sure we hang here */
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <_exit+0x12>

080017d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	60b9      	str	r1, [r7, #8]
 80017da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e00a      	b.n	80017f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017e2:	f3af 8000 	nop.w
 80017e6:	4601      	mov	r1, r0
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	1c5a      	adds	r2, r3, #1
 80017ec:	60ba      	str	r2, [r7, #8]
 80017ee:	b2ca      	uxtb	r2, r1
 80017f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	3301      	adds	r3, #1
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	dbf0      	blt.n	80017e2 <_read+0x12>
  }

  return len;
 8001800:	687b      	ldr	r3, [r7, #4]
}
 8001802:	4618      	mov	r0, r3
 8001804:	3718      	adds	r7, #24
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_close>:
  }
  return len;
}

int _close(int file)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001822:	b480      	push	{r7}
 8001824:	b083      	sub	sp, #12
 8001826:	af00      	add	r7, sp, #0
 8001828:	6078      	str	r0, [r7, #4]
 800182a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001832:	605a      	str	r2, [r3, #4]
  return 0;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr

08001842 <_isatty>:

int _isatty(int file)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184a:	2301      	movs	r3, #1
}
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	4618      	mov	r0, r3
 8001868:	3714      	adds	r7, #20
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
	...

08001874 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b086      	sub	sp, #24
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800187c:	4a14      	ldr	r2, [pc, #80]	@ (80018d0 <_sbrk+0x5c>)
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <_sbrk+0x60>)
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4b13      	ldr	r3, [pc, #76]	@ (80018d8 <_sbrk+0x64>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001890:	4b11      	ldr	r3, [pc, #68]	@ (80018d8 <_sbrk+0x64>)
 8001892:	4a12      	ldr	r2, [pc, #72]	@ (80018dc <_sbrk+0x68>)
 8001894:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001896:	4b10      	ldr	r3, [pc, #64]	@ (80018d8 <_sbrk+0x64>)
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4413      	add	r3, r2
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d207      	bcs.n	80018b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a4:	f003 f8b2 	bl	8004a0c <__errno>
 80018a8:	4603      	mov	r3, r0
 80018aa:	220c      	movs	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ae:	f04f 33ff 	mov.w	r3, #4294967295
 80018b2:	e009      	b.n	80018c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b4:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <_sbrk+0x64>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018ba:	4b07      	ldr	r3, [pc, #28]	@ (80018d8 <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	4a05      	ldr	r2, [pc, #20]	@ (80018d8 <_sbrk+0x64>)
 80018c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018c6:	68fb      	ldr	r3, [r7, #12]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	20018000 	.word	0x20018000
 80018d4:	00000400 	.word	0x00000400
 80018d8:	200002b4 	.word	0x200002b4
 80018dc:	20000408 	.word	0x20000408

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b06      	ldr	r3, [pc, #24]	@ (8001900 <SystemInit+0x20>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ea:	4a05      	ldr	r2, [pc, #20]	@ (8001900 <SystemInit+0x20>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018f4:	bf00      	nop
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	e000ed00 	.word	0xe000ed00

08001904 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001904:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800193c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001908:	f7ff ffea 	bl	80018e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800190c:	480c      	ldr	r0, [pc, #48]	@ (8001940 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800190e:	490d      	ldr	r1, [pc, #52]	@ (8001944 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001910:	4a0d      	ldr	r2, [pc, #52]	@ (8001948 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001914:	e002      	b.n	800191c <LoopCopyDataInit>

08001916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800191a:	3304      	adds	r3, #4

0800191c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800191c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800191e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001920:	d3f9      	bcc.n	8001916 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001922:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001924:	4c0a      	ldr	r4, [pc, #40]	@ (8001950 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001928:	e001      	b.n	800192e <LoopFillZerobss>

0800192a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800192a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800192c:	3204      	adds	r2, #4

0800192e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800192e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001930:	d3fb      	bcc.n	800192a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001932:	f003 f871 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001936:	f7ff fcd5 	bl	80012e4 <main>
  bx  lr    
 800193a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800193c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001944:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001948:	08006b94 	.word	0x08006b94
  ldr r2, =_sbss
 800194c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001950:	20000408 	.word	0x20000408

08001954 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001954:	e7fe      	b.n	8001954 <ADC_IRQHandler>
	...

08001958 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800195c:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <HAL_Init+0x40>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a0d      	ldr	r2, [pc, #52]	@ (8001998 <HAL_Init+0x40>)
 8001962:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001966:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001968:	4b0b      	ldr	r3, [pc, #44]	@ (8001998 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <HAL_Init+0x40>)
 800196e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001972:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001974:	4b08      	ldr	r3, [pc, #32]	@ (8001998 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a07      	ldr	r2, [pc, #28]	@ (8001998 <HAL_Init+0x40>)
 800197a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800197e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001980:	2003      	movs	r0, #3
 8001982:	f000 f931 	bl	8001be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001986:	2000      	movs	r0, #0
 8001988:	f000 f808 	bl	800199c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800198c:	f7ff fe16 	bl	80015bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40023c00 	.word	0x40023c00

0800199c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019a4:	4b12      	ldr	r3, [pc, #72]	@ (80019f0 <HAL_InitTick+0x54>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4b12      	ldr	r3, [pc, #72]	@ (80019f4 <HAL_InitTick+0x58>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4619      	mov	r1, r3
 80019ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f93b 	bl	8001c36 <HAL_SYSTICK_Config>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e00e      	b.n	80019e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2b0f      	cmp	r3, #15
 80019ce:	d80a      	bhi.n	80019e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d0:	2200      	movs	r2, #0
 80019d2:	6879      	ldr	r1, [r7, #4]
 80019d4:	f04f 30ff 	mov.w	r0, #4294967295
 80019d8:	f000 f911 	bl	8001bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019dc:	4a06      	ldr	r2, [pc, #24]	@ (80019f8 <HAL_InitTick+0x5c>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	e000      	b.n	80019e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3708      	adds	r7, #8
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000008 	.word	0x20000008
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a00:	4b06      	ldr	r3, [pc, #24]	@ (8001a1c <HAL_IncTick+0x20>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	4b06      	ldr	r3, [pc, #24]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	4a04      	ldr	r2, [pc, #16]	@ (8001a20 <HAL_IncTick+0x24>)
 8001a0e:	6013      	str	r3, [r2, #0]
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	20000008 	.word	0x20000008
 8001a20:	200002b8 	.word	0x200002b8

08001a24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  return uwTick;
 8001a28:	4b03      	ldr	r3, [pc, #12]	@ (8001a38 <HAL_GetTick+0x14>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	200002b8 	.word	0x200002b8

08001a3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a44:	f7ff ffee 	bl	8001a24 <HAL_GetTick>
 8001a48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a54:	d005      	beq.n	8001a62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_Delay+0x44>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	4413      	add	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a62:	bf00      	nop
 8001a64:	f7ff ffde 	bl	8001a24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d8f7      	bhi.n	8001a64 <HAL_Delay+0x28>
  {
  }
}
 8001a74:	bf00      	nop
 8001a76:	bf00      	nop
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	20000008 	.word	0x20000008

08001a84 <__NVIC_SetPriorityGrouping>:
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f003 0307 	and.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a94:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9a:	68ba      	ldr	r2, [r7, #8]
 8001a9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001aac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ab0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ab6:	4a04      	ldr	r2, [pc, #16]	@ (8001ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	60d3      	str	r3, [r2, #12]
}
 8001abc:	bf00      	nop
 8001abe:	3714      	adds	r7, #20
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <__NVIC_GetPriorityGrouping>:
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad0:	4b04      	ldr	r3, [pc, #16]	@ (8001ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0a1b      	lsrs	r3, r3, #8
 8001ad6:	f003 0307 	and.w	r3, r3, #7
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	e000ed00 	.word	0xe000ed00

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	@ (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	@ (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <NVIC_EncodePriority>:
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b089      	sub	sp, #36	@ 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f003 0307 	and.w	r3, r3, #7
 8001b4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	f1c3 0307 	rsb	r3, r3, #7
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	bf28      	it	cs
 8001b5a:	2304      	movcs	r3, #4
 8001b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	3304      	adds	r3, #4
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d902      	bls.n	8001b6c <NVIC_EncodePriority+0x30>
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3b03      	subs	r3, #3
 8001b6a:	e000      	b.n	8001b6e <NVIC_EncodePriority+0x32>
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	f04f 32ff 	mov.w	r2, #4294967295
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43da      	mvns	r2, r3
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	401a      	ands	r2, r3
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b84:	f04f 31ff 	mov.w	r1, #4294967295
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b8e:	43d9      	mvns	r1, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	4313      	orrs	r3, r2
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3724      	adds	r7, #36	@ 0x24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <SysTick_Config>:
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bb4:	d301      	bcc.n	8001bba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e00f      	b.n	8001bda <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bba:	4a0a      	ldr	r2, [pc, #40]	@ (8001be4 <SysTick_Config+0x40>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc2:	210f      	movs	r1, #15
 8001bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc8:	f7ff ff8e 	bl	8001ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bcc:	4b05      	ldr	r3, [pc, #20]	@ (8001be4 <SysTick_Config+0x40>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd2:	4b04      	ldr	r3, [pc, #16]	@ (8001be4 <SysTick_Config+0x40>)
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	e000e010 	.word	0xe000e010

08001be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f7ff ff47 	bl	8001a84 <__NVIC_SetPriorityGrouping>
}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b086      	sub	sp, #24
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	4603      	mov	r3, r0
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
 8001c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c10:	f7ff ff5c 	bl	8001acc <__NVIC_GetPriorityGrouping>
 8001c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	68b9      	ldr	r1, [r7, #8]
 8001c1a:	6978      	ldr	r0, [r7, #20]
 8001c1c:	f7ff ff8e 	bl	8001b3c <NVIC_EncodePriority>
 8001c20:	4602      	mov	r2, r0
 8001c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c26:	4611      	mov	r1, r2
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7ff ff5d 	bl	8001ae8 <__NVIC_SetPriority>
}
 8001c2e:	bf00      	nop
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b082      	sub	sp, #8
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f7ff ffb0 	bl	8001ba4 <SysTick_Config>
 8001c44:	4603      	mov	r3, r0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c66:	2300      	movs	r3, #0
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e159      	b.n	8001f20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	697a      	ldr	r2, [r7, #20]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	f040 8148 	bne.w	8001f1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d005      	beq.n	8001ca2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d130      	bne.n	8001d04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	68da      	ldr	r2, [r3, #12]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	69ba      	ldr	r2, [r7, #24]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd8:	2201      	movs	r2, #1
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	091b      	lsrs	r3, r3, #4
 8001cee:	f003 0201 	and.w	r2, r3, #1
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b03      	cmp	r3, #3
 8001d0e:	d017      	beq.n	8001d40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	2203      	movs	r2, #3
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43db      	mvns	r3, r3
 8001d22:	69ba      	ldr	r2, [r7, #24]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d123      	bne.n	8001d94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	08da      	lsrs	r2, r3, #3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3208      	adds	r2, #8
 8001d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	220f      	movs	r2, #15
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	08da      	lsrs	r2, r3, #3
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	3208      	adds	r2, #8
 8001d8e:	69b9      	ldr	r1, [r7, #24]
 8001d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	2203      	movs	r2, #3
 8001da0:	fa02 f303 	lsl.w	r3, r2, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	69ba      	ldr	r2, [r7, #24]
 8001da8:	4013      	ands	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f003 0203 	and.w	r2, r3, #3
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f000 80a2 	beq.w	8001f1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	4b57      	ldr	r3, [pc, #348]	@ (8001f38 <HAL_GPIO_Init+0x2e8>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dde:	4a56      	ldr	r2, [pc, #344]	@ (8001f38 <HAL_GPIO_Init+0x2e8>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de6:	4b54      	ldr	r3, [pc, #336]	@ (8001f38 <HAL_GPIO_Init+0x2e8>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dee:	60fb      	str	r3, [r7, #12]
 8001df0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df2:	4a52      	ldr	r2, [pc, #328]	@ (8001f3c <HAL_GPIO_Init+0x2ec>)
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	089b      	lsrs	r3, r3, #2
 8001df8:	3302      	adds	r3, #2
 8001dfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	220f      	movs	r2, #15
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a49      	ldr	r2, [pc, #292]	@ (8001f40 <HAL_GPIO_Init+0x2f0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d019      	beq.n	8001e52 <HAL_GPIO_Init+0x202>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4a48      	ldr	r2, [pc, #288]	@ (8001f44 <HAL_GPIO_Init+0x2f4>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d013      	beq.n	8001e4e <HAL_GPIO_Init+0x1fe>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	4a47      	ldr	r2, [pc, #284]	@ (8001f48 <HAL_GPIO_Init+0x2f8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d00d      	beq.n	8001e4a <HAL_GPIO_Init+0x1fa>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a46      	ldr	r2, [pc, #280]	@ (8001f4c <HAL_GPIO_Init+0x2fc>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d007      	beq.n	8001e46 <HAL_GPIO_Init+0x1f6>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a45      	ldr	r2, [pc, #276]	@ (8001f50 <HAL_GPIO_Init+0x300>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d101      	bne.n	8001e42 <HAL_GPIO_Init+0x1f2>
 8001e3e:	2304      	movs	r3, #4
 8001e40:	e008      	b.n	8001e54 <HAL_GPIO_Init+0x204>
 8001e42:	2307      	movs	r3, #7
 8001e44:	e006      	b.n	8001e54 <HAL_GPIO_Init+0x204>
 8001e46:	2303      	movs	r3, #3
 8001e48:	e004      	b.n	8001e54 <HAL_GPIO_Init+0x204>
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	e002      	b.n	8001e54 <HAL_GPIO_Init+0x204>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <HAL_GPIO_Init+0x204>
 8001e52:	2300      	movs	r3, #0
 8001e54:	69fa      	ldr	r2, [r7, #28]
 8001e56:	f002 0203 	and.w	r2, r2, #3
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	4093      	lsls	r3, r2
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e64:	4935      	ldr	r1, [pc, #212]	@ (8001f3c <HAL_GPIO_Init+0x2ec>)
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	089b      	lsrs	r3, r3, #2
 8001e6a:	3302      	adds	r3, #2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e72:	4b38      	ldr	r3, [pc, #224]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e96:	4a2f      	ldr	r2, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ec0:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ec6:	4b23      	ldr	r3, [pc, #140]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eea:	4a1a      	ldr	r2, [pc, #104]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ef0:	4b18      	ldr	r3, [pc, #96]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	4313      	orrs	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f14:	4a0f      	ldr	r2, [pc, #60]	@ (8001f54 <HAL_GPIO_Init+0x304>)
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	61fb      	str	r3, [r7, #28]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	2b0f      	cmp	r3, #15
 8001f24:	f67f aea2 	bls.w	8001c6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3724      	adds	r7, #36	@ 0x24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40013800 	.word	0x40013800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020400 	.word	0x40020400
 8001f48:	40020800 	.word	0x40020800
 8001f4c:	40020c00 	.word	0x40020c00
 8001f50:	40021000 	.word	0x40021000
 8001f54:	40013c00 	.word	0x40013c00

08001f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	460b      	mov	r3, r1
 8001f62:	807b      	strh	r3, [r7, #2]
 8001f64:	4613      	mov	r3, r2
 8001f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f68:	787b      	ldrb	r3, [r7, #1]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d003      	beq.n	8001f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6e:	887a      	ldrh	r2, [r7, #2]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f74:	e003      	b.n	8001f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f76:	887b      	ldrh	r3, [r7, #2]
 8001f78:	041a      	lsls	r2, r3, #16
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	619a      	str	r2, [r3, #24]
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr
	...

08001f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e12b      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d106      	bne.n	8001fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff fb2a 	bl	800160c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2224      	movs	r2, #36	@ 0x24
 8001fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f022 0201 	bic.w	r2, r2, #1
 8001fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681a      	ldr	r2, [r3, #0]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ff0:	f001 fc60 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8001ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	4a81      	ldr	r2, [pc, #516]	@ (8002200 <HAL_I2C_Init+0x274>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d807      	bhi.n	8002010 <HAL_I2C_Init+0x84>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a80      	ldr	r2, [pc, #512]	@ (8002204 <HAL_I2C_Init+0x278>)
 8002004:	4293      	cmp	r3, r2
 8002006:	bf94      	ite	ls
 8002008:	2301      	movls	r3, #1
 800200a:	2300      	movhi	r3, #0
 800200c:	b2db      	uxtb	r3, r3
 800200e:	e006      	b.n	800201e <HAL_I2C_Init+0x92>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4a7d      	ldr	r2, [pc, #500]	@ (8002208 <HAL_I2C_Init+0x27c>)
 8002014:	4293      	cmp	r3, r2
 8002016:	bf94      	ite	ls
 8002018:	2301      	movls	r3, #1
 800201a:	2300      	movhi	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e0e7      	b.n	80021f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a78      	ldr	r2, [pc, #480]	@ (800220c <HAL_I2C_Init+0x280>)
 800202a:	fba2 2303 	umull	r2, r3, r2, r3
 800202e:	0c9b      	lsrs	r3, r3, #18
 8002030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4a6a      	ldr	r2, [pc, #424]	@ (8002200 <HAL_I2C_Init+0x274>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d802      	bhi.n	8002060 <HAL_I2C_Init+0xd4>
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3301      	adds	r3, #1
 800205e:	e009      	b.n	8002074 <HAL_I2C_Init+0xe8>
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	4a69      	ldr	r2, [pc, #420]	@ (8002210 <HAL_I2C_Init+0x284>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	3301      	adds	r3, #1
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	6812      	ldr	r2, [r2, #0]
 8002078:	430b      	orrs	r3, r1
 800207a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	495c      	ldr	r1, [pc, #368]	@ (8002200 <HAL_I2C_Init+0x274>)
 8002090:	428b      	cmp	r3, r1
 8002092:	d819      	bhi.n	80020c8 <HAL_I2C_Init+0x13c>
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1e59      	subs	r1, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	005b      	lsls	r3, r3, #1
 800209e:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a2:	1c59      	adds	r1, r3, #1
 80020a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80020a8:	400b      	ands	r3, r1
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d00a      	beq.n	80020c4 <HAL_I2C_Init+0x138>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	1e59      	subs	r1, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c2:	e051      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c4:	2304      	movs	r3, #4
 80020c6:	e04f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d111      	bne.n	80020f4 <HAL_I2C_Init+0x168>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	1e58      	subs	r0, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6859      	ldr	r1, [r3, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e2:	3301      	adds	r3, #1
 80020e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	bf0c      	ite	eq
 80020ec:	2301      	moveq	r3, #1
 80020ee:	2300      	movne	r3, #0
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	e012      	b.n	800211a <HAL_I2C_Init+0x18e>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	1e58      	subs	r0, r3, #1
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6859      	ldr	r1, [r3, #4]
 80020fc:	460b      	mov	r3, r1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	0099      	lsls	r1, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	fbb0 f3f3 	udiv	r3, r0, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf0c      	ite	eq
 8002114:	2301      	moveq	r3, #1
 8002116:	2300      	movne	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_I2C_Init+0x196>
 800211e:	2301      	movs	r3, #1
 8002120:	e022      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_I2C_Init+0x1bc>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1e58      	subs	r0, r3, #1
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6859      	ldr	r1, [r3, #4]
 8002132:	460b      	mov	r3, r1
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	440b      	add	r3, r1
 8002138:	fbb0 f3f3 	udiv	r3, r0, r3
 800213c:	3301      	adds	r3, #1
 800213e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002146:	e00f      	b.n	8002168 <HAL_I2C_Init+0x1dc>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6859      	ldr	r1, [r3, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	0099      	lsls	r1, r3, #2
 8002158:	440b      	add	r3, r1
 800215a:	fbb0 f3f3 	udiv	r3, r0, r3
 800215e:	3301      	adds	r3, #1
 8002160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	4313      	orrs	r3, r2
 800216e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	69da      	ldr	r2, [r3, #28]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	6911      	ldr	r1, [r2, #16]
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	68d2      	ldr	r2, [r2, #12]
 80021a2:	4311      	orrs	r1, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6812      	ldr	r2, [r2, #0]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	431a      	orrs	r2, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	430a      	orrs	r2, r1
 80021c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f042 0201 	orr.w	r2, r2, #1
 80021d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	000186a0 	.word	0x000186a0
 8002204:	001e847f 	.word	0x001e847f
 8002208:	003d08ff 	.word	0x003d08ff
 800220c:	431bde83 	.word	0x431bde83
 8002210:	10624dd3 	.word	0x10624dd3

08002214 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af02      	add	r7, sp, #8
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	4608      	mov	r0, r1
 800221e:	4611      	mov	r1, r2
 8002220:	461a      	mov	r2, r3
 8002222:	4603      	mov	r3, r0
 8002224:	817b      	strh	r3, [r7, #10]
 8002226:	460b      	mov	r3, r1
 8002228:	813b      	strh	r3, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800222e:	f7ff fbf9 	bl	8001a24 <HAL_GetTick>
 8002232:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b20      	cmp	r3, #32
 800223e:	f040 80d9 	bne.w	80023f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2319      	movs	r3, #25
 8002248:	2201      	movs	r2, #1
 800224a:	496d      	ldr	r1, [pc, #436]	@ (8002400 <HAL_I2C_Mem_Write+0x1ec>)
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 fc8b 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002258:	2302      	movs	r3, #2
 800225a:	e0cc      	b.n	80023f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002262:	2b01      	cmp	r3, #1
 8002264:	d101      	bne.n	800226a <HAL_I2C_Mem_Write+0x56>
 8002266:	2302      	movs	r3, #2
 8002268:	e0c5      	b.n	80023f6 <HAL_I2C_Mem_Write+0x1e2>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0301 	and.w	r3, r3, #1
 800227c:	2b01      	cmp	r3, #1
 800227e:	d007      	beq.n	8002290 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800229e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2221      	movs	r2, #33	@ 0x21
 80022a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2240      	movs	r2, #64	@ 0x40
 80022ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6a3a      	ldr	r2, [r7, #32]
 80022ba:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80022c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a4d      	ldr	r2, [pc, #308]	@ (8002404 <HAL_I2C_Mem_Write+0x1f0>)
 80022d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022d2:	88f8      	ldrh	r0, [r7, #6]
 80022d4:	893a      	ldrh	r2, [r7, #8]
 80022d6:	8979      	ldrh	r1, [r7, #10]
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	9301      	str	r3, [sp, #4]
 80022dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022de:	9300      	str	r3, [sp, #0]
 80022e0:	4603      	mov	r3, r0
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fac2 	bl	800286c <I2C_RequestMemoryWrite>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d052      	beq.n	8002394 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e081      	b.n	80023f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f2:	697a      	ldr	r2, [r7, #20]
 80022f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f000 fd50 	bl	8002d9c <I2C_WaitOnTXEFlagUntilTimeout>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00d      	beq.n	800231e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002306:	2b04      	cmp	r3, #4
 8002308:	d107      	bne.n	800231a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002318:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	3b01      	subs	r3, #1
 8002348:	b29a      	uxth	r2, r3
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	695b      	ldr	r3, [r3, #20]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b04      	cmp	r3, #4
 800235a:	d11b      	bne.n	8002394 <HAL_I2C_Mem_Write+0x180>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	d017      	beq.n	8002394 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	781a      	ldrb	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002374:	1c5a      	adds	r2, r3, #1
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	3b01      	subs	r3, #1
 8002380:	b29a      	uxth	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238a:	b29b      	uxth	r3, r3
 800238c:	3b01      	subs	r3, #1
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1aa      	bne.n	80022f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f000 fd43 	bl	8002e2c <I2C_WaitOnBTFFlagUntilTimeout>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00d      	beq.n	80023c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b0:	2b04      	cmp	r3, #4
 80023b2:	d107      	bne.n	80023c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e016      	b.n	80023f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	e000      	b.n	80023f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80023f4:	2302      	movs	r3, #2
  }
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	00100002 	.word	0x00100002
 8002404:	ffff0000 	.word	0xffff0000

08002408 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08c      	sub	sp, #48	@ 0x30
 800240c:	af02      	add	r7, sp, #8
 800240e:	60f8      	str	r0, [r7, #12]
 8002410:	4608      	mov	r0, r1
 8002412:	4611      	mov	r1, r2
 8002414:	461a      	mov	r2, r3
 8002416:	4603      	mov	r3, r0
 8002418:	817b      	strh	r3, [r7, #10]
 800241a:	460b      	mov	r3, r1
 800241c:	813b      	strh	r3, [r7, #8]
 800241e:	4613      	mov	r3, r2
 8002420:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002422:	f7ff faff 	bl	8001a24 <HAL_GetTick>
 8002426:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b20      	cmp	r3, #32
 8002432:	f040 8214 	bne.w	800285e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2319      	movs	r3, #25
 800243c:	2201      	movs	r2, #1
 800243e:	497b      	ldr	r1, [pc, #492]	@ (800262c <HAL_I2C_Mem_Read+0x224>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fb91 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800244c:	2302      	movs	r3, #2
 800244e:	e207      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002456:	2b01      	cmp	r3, #1
 8002458:	d101      	bne.n	800245e <HAL_I2C_Mem_Read+0x56>
 800245a:	2302      	movs	r3, #2
 800245c:	e200      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b01      	cmp	r3, #1
 8002472:	d007      	beq.n	8002484 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2222      	movs	r2, #34	@ 0x22
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2240      	movs	r2, #64	@ 0x40
 80024a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80024b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ba:	b29a      	uxth	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4a5b      	ldr	r2, [pc, #364]	@ (8002630 <HAL_I2C_Mem_Read+0x228>)
 80024c4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024c6:	88f8      	ldrh	r0, [r7, #6]
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	8979      	ldrh	r1, [r7, #10]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	4603      	mov	r3, r0
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fa5e 	bl	8002998 <I2C_RequestMemoryRead>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e1bc      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d113      	bne.n	8002516 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ee:	2300      	movs	r3, #0
 80024f0:	623b      	str	r3, [r7, #32]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	695b      	ldr	r3, [r3, #20]
 80024f8:	623b      	str	r3, [r7, #32]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	623b      	str	r3, [r7, #32]
 8002502:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e190      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251a:	2b01      	cmp	r3, #1
 800251c:	d11b      	bne.n	8002556 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800252c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	61fb      	str	r3, [r7, #28]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	61fb      	str	r3, [r7, #28]
 8002542:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	e170      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800255a:	2b02      	cmp	r3, #2
 800255c:	d11b      	bne.n	8002596 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800256c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800257c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	61bb      	str	r3, [r7, #24]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	61bb      	str	r3, [r7, #24]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	e150      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	695b      	ldr	r3, [r3, #20]
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	699b      	ldr	r3, [r3, #24]
 80025a8:	617b      	str	r3, [r7, #20]
 80025aa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80025ac:	e144      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b2:	2b03      	cmp	r3, #3
 80025b4:	f200 80f1 	bhi.w	800279a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d123      	bne.n	8002608 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f000 fc79 	bl	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e145      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	691a      	ldr	r2, [r3, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f0:	3b01      	subs	r3, #1
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002606:	e117      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	2b02      	cmp	r3, #2
 800260e:	d14e      	bne.n	80026ae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002616:	2200      	movs	r2, #0
 8002618:	4906      	ldr	r1, [pc, #24]	@ (8002634 <HAL_I2C_Mem_Read+0x22c>)
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 faa4 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d008      	beq.n	8002638 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e11a      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
 800262a:	bf00      	nop
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000
 8002634:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002646:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691a      	ldr	r2, [r3, #16]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002664:	3b01      	subs	r3, #1
 8002666:	b29a      	uxth	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002670:	b29b      	uxth	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691a      	ldr	r2, [r3, #16]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268c:	1c5a      	adds	r2, r3, #1
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002696:	3b01      	subs	r3, #1
 8002698:	b29a      	uxth	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80026ac:	e0c4      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026b4:	2200      	movs	r2, #0
 80026b6:	496c      	ldr	r1, [pc, #432]	@ (8002868 <HAL_I2C_Mem_Read+0x460>)
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 fa55 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0cb      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026f4:	3b01      	subs	r3, #1
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002700:	b29b      	uxth	r3, r3
 8002702:	3b01      	subs	r3, #1
 8002704:	b29a      	uxth	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800270a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002710:	2200      	movs	r2, #0
 8002712:	4955      	ldr	r1, [pc, #340]	@ (8002868 <HAL_I2C_Mem_Read+0x460>)
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f000 fa27 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d001      	beq.n	8002724 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e09d      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002732:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691a      	ldr	r2, [r3, #16]
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002782:	3b01      	subs	r3, #1
 8002784:	b29a      	uxth	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800278e:	b29b      	uxth	r3, r3
 8002790:	3b01      	subs	r3, #1
 8002792:	b29a      	uxth	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002798:	e04e      	b.n	8002838 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800279c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 fb8c 	bl	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e058      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	691a      	ldr	r2, [r3, #16]
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	1c5a      	adds	r2, r3, #1
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b29a      	uxth	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	695b      	ldr	r3, [r3, #20]
 80027e6:	f003 0304 	and.w	r3, r3, #4
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d124      	bne.n	8002838 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027f2:	2b03      	cmp	r3, #3
 80027f4:	d107      	bne.n	8002806 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002804:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	691a      	ldr	r2, [r3, #16]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002822:	3b01      	subs	r3, #1
 8002824:	b29a      	uxth	r2, r3
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b29a      	uxth	r2, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800283c:	2b00      	cmp	r3, #0
 800283e:	f47f aeb6 	bne.w	80025ae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2220      	movs	r2, #32
 8002846:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	4618      	mov	r0, r3
 8002862:	3728      	adds	r7, #40	@ 0x28
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	00010004 	.word	0x00010004

0800286c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2200      	movs	r2, #0
 800289e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f960 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028bc:	d103      	bne.n	80028c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e05f      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	492d      	ldr	r1, [pc, #180]	@ (8002994 <I2C_RequestMemoryWrite+0x128>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f9bb 	bl	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e04c      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa46 	bl	8002d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291a:	2b04      	cmp	r3, #4
 800291c:	d107      	bne.n	800292e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02b      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e021      	b.n	8002988 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 fa20 	bl	8002d9c <I2C_WaitOnTXEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e005      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800297e:	893b      	ldrh	r3, [r7, #8]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	00010002 	.word	0x00010002

08002998 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	460b      	mov	r3, r1
 80029ac:	813b      	strh	r3, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80029d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2200      	movs	r2, #0
 80029da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f8c2 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029f8:	d103      	bne.n	8002a02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a00:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0aa      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a06:	897b      	ldrh	r3, [r7, #10]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002a14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	4952      	ldr	r1, [pc, #328]	@ (8002b64 <I2C_RequestMemoryRead+0x1cc>)
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f91d 	bl	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e097      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f9a8 	bl	8002d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d107      	bne.n	8002a6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e076      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a74:	893b      	ldrh	r3, [r7, #8]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	e021      	b.n	8002ac4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f982 	bl	8002d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d107      	bne.n	8002ab6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e050      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ac6:	6a39      	ldr	r1, [r7, #32]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f967 	bl	8002d9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002aea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e035      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002afe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f82b 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b26:	d103      	bne.n	8002b30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e013      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b34:	897b      	ldrh	r3, [r7, #10]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	4906      	ldr	r1, [pc, #24]	@ (8002b64 <I2C_RequestMemoryRead+0x1cc>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f886 	bl	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	00010002 	.word	0x00010002

08002b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b78:	e048      	b.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d044      	beq.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7fe ff4f 	bl	8001a24 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d139      	bne.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	0c1b      	lsrs	r3, r3, #16
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d10d      	bne.n	8002bbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	43da      	mvns	r2, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	4013      	ands	r3, r2
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	e00c      	b.n	8002bd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	43da      	mvns	r2, r3
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	bf0c      	ite	eq
 8002bd0:	2301      	moveq	r3, #1
 8002bd2:	2300      	movne	r3, #0
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	79fb      	ldrb	r3, [r7, #7]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d116      	bne.n	8002c0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2200      	movs	r2, #0
 8002be2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf8:	f043 0220 	orr.w	r2, r3, #32
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e023      	b.n	8002c54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	0c1b      	lsrs	r3, r3, #16
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10d      	bne.n	8002c32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
 8002c1c:	43da      	mvns	r2, r3
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	bf0c      	ite	eq
 8002c28:	2301      	moveq	r3, #1
 8002c2a:	2300      	movne	r3, #0
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	461a      	mov	r2, r3
 8002c30:	e00c      	b.n	8002c4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	43da      	mvns	r2, r3
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	bf0c      	ite	eq
 8002c44:	2301      	moveq	r3, #1
 8002c46:	2300      	movne	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d093      	beq.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}

08002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
 8002c68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c6a:	e071      	b.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	695b      	ldr	r3, [r3, #20]
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d123      	bne.n	8002cc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	f043 0204 	orr.w	r2, r3, #4
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e067      	b.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d041      	beq.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ccc:	f7fe feaa 	bl	8001a24 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d302      	bcc.n	8002ce2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d136      	bne.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	0c1b      	lsrs	r3, r3, #16
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d10c      	bne.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	bf14      	ite	ne
 8002cfe:	2301      	movne	r3, #1
 8002d00:	2300      	moveq	r3, #0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	e00b      	b.n	8002d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4013      	ands	r3, r2
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	bf14      	ite	ne
 8002d18:	2301      	movne	r3, #1
 8002d1a:	2300      	moveq	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2220      	movs	r2, #32
 8002d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e021      	b.n	8002d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	0c1b      	lsrs	r3, r3, #16
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d10c      	bne.n	8002d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	43da      	mvns	r2, r3
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	4013      	ands	r3, r2
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e00b      	b.n	8002d8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	699b      	ldr	r3, [r3, #24]
 8002d7a:	43da      	mvns	r2, r3
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	bf14      	ite	ne
 8002d86:	2301      	movne	r3, #1
 8002d88:	2300      	moveq	r3, #0
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f af6d 	bne.w	8002c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002da8:	e034      	b.n	8002e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002daa:	68f8      	ldr	r0, [r7, #12]
 8002dac:	f000 f8e3 	bl	8002f76 <I2C_IsAcknowledgeFailed>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e034      	b.n	8002e24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc0:	d028      	beq.n	8002e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dc2:	f7fe fe2f 	bl	8001a24 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	68ba      	ldr	r2, [r7, #8]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d302      	bcc.n	8002dd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d11d      	bne.n	8002e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de2:	2b80      	cmp	r3, #128	@ 0x80
 8002de4:	d016      	beq.n	8002e14 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e00:	f043 0220 	orr.w	r2, r3, #32
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e007      	b.n	8002e24 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	2b80      	cmp	r3, #128	@ 0x80
 8002e20:	d1c3      	bne.n	8002daa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e38:	e034      	b.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 f89b 	bl	8002f76 <I2C_IsAcknowledgeFailed>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e034      	b.n	8002eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e50:	d028      	beq.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e52:	f7fe fde7 	bl	8001a24 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	68ba      	ldr	r2, [r7, #8]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d302      	bcc.n	8002e68 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d11d      	bne.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d016      	beq.n	8002ea4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e007      	b.n	8002eb4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b04      	cmp	r3, #4
 8002eb0:	d1c3      	bne.n	8002e3a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002ec8:	e049      	b.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b10      	cmp	r3, #16
 8002ed6:	d119      	bne.n	8002f0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f06f 0210 	mvn.w	r2, #16
 8002ee0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e030      	b.n	8002f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0c:	f7fe fd8a 	bl	8001a24 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d302      	bcc.n	8002f22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d11d      	bne.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	695b      	ldr	r3, [r3, #20]
 8002f28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f2c:	2b40      	cmp	r3, #64	@ 0x40
 8002f2e:	d016      	beq.n	8002f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4a:	f043 0220 	orr.w	r2, r3, #32
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e007      	b.n	8002f6e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695b      	ldr	r3, [r3, #20]
 8002f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f68:	2b40      	cmp	r3, #64	@ 0x40
 8002f6a:	d1ae      	bne.n	8002eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f6c:	2300      	movs	r3, #0
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002f76:	b480      	push	{r7}
 8002f78:	b083      	sub	sp, #12
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f88:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f8c:	d11b      	bne.n	8002fc6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f96:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	f043 0204 	orr.w	r2, r3, #4
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e267      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d075      	beq.n	80030de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002ff2:	4b88      	ldr	r3, [pc, #544]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 030c 	and.w	r3, r3, #12
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d00c      	beq.n	8003018 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ffe:	4b85      	ldr	r3, [pc, #532]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003006:	2b08      	cmp	r3, #8
 8003008:	d112      	bne.n	8003030 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800300a:	4b82      	ldr	r3, [pc, #520]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003012:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003016:	d10b      	bne.n	8003030 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	4b7e      	ldr	r3, [pc, #504]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d05b      	beq.n	80030dc <HAL_RCC_OscConfig+0x108>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d157      	bne.n	80030dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e242      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003038:	d106      	bne.n	8003048 <HAL_RCC_OscConfig+0x74>
 800303a:	4b76      	ldr	r3, [pc, #472]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a75      	ldr	r2, [pc, #468]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003040:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e01d      	b.n	8003084 <HAL_RCC_OscConfig+0xb0>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x98>
 8003052:	4b70      	ldr	r3, [pc, #448]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a6f      	ldr	r2, [pc, #444]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003058:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800305c:	6013      	str	r3, [r2, #0]
 800305e:	4b6d      	ldr	r3, [pc, #436]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a6c      	ldr	r2, [pc, #432]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003068:	6013      	str	r3, [r2, #0]
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0xb0>
 800306c:	4b69      	ldr	r3, [pc, #420]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a68      	ldr	r2, [pc, #416]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003072:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	4b66      	ldr	r3, [pc, #408]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a65      	ldr	r2, [pc, #404]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 800307e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003082:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d013      	beq.n	80030b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800308c:	f7fe fcca 	bl	8001a24 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe fcc6 	bl	8001a24 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	@ 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e207      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a6:	4b5b      	ldr	r3, [pc, #364]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0xc0>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b4:	f7fe fcb6 	bl	8001a24 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030bc:	f7fe fcb2 	bl	8001a24 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b64      	cmp	r3, #100	@ 0x64
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e1f3      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ce:	4b51      	ldr	r3, [pc, #324]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0xe8>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d063      	beq.n	80031b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	f003 030c 	and.w	r3, r3, #12
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b47      	ldr	r3, [pc, #284]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030fe:	2b08      	cmp	r3, #8
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b44      	ldr	r3, [pc, #272]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	4b41      	ldr	r3, [pc, #260]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x152>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e1c7      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b3b      	ldr	r3, [pc, #236]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4937      	ldr	r1, [pc, #220]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	e03a      	b.n	80031b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003144:	4b34      	ldr	r3, [pc, #208]	@ (8003218 <HAL_RCC_OscConfig+0x244>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe fc6b 	bl	8001a24 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe fc67 	bl	8001a24 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1a8      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4925      	ldr	r1, [pc, #148]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b24      	ldr	r3, [pc, #144]	@ (8003218 <HAL_RCC_OscConfig+0x244>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe fc4a 	bl	8001a24 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe fc46 	bl	8001a24 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e187      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d036      	beq.n	800322c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b15      	ldr	r3, [pc, #84]	@ (800321c <HAL_RCC_OscConfig+0x248>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe fc2a 	bl	8001a24 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fe fc26 	bl	8001a24 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e167      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <HAL_RCC_OscConfig+0x240>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x200>
 80031f2:	e01b      	b.n	800322c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f4:	4b09      	ldr	r3, [pc, #36]	@ (800321c <HAL_RCC_OscConfig+0x248>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031fa:	f7fe fc13 	bl	8001a24 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	e00e      	b.n	8003220 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003202:	f7fe fc0f 	bl	8001a24 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d907      	bls.n	8003220 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e150      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
 8003214:	40023800 	.word	0x40023800
 8003218:	42470000 	.word	0x42470000
 800321c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b88      	ldr	r3, [pc, #544]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ea      	bne.n	8003202 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8097 	beq.w	8003368 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b81      	ldr	r3, [pc, #516]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b7d      	ldr	r3, [pc, #500]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	4a7c      	ldr	r2, [pc, #496]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	@ 0x40
 800325a:	4b7a      	ldr	r3, [pc, #488]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b77      	ldr	r3, [pc, #476]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b74      	ldr	r3, [pc, #464]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a73      	ldr	r2, [pc, #460]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe fbcf 	bl	8001a24 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fe fbcb 	bl	8001a24 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e10c      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b6a      	ldr	r3, [pc, #424]	@ (8003448 <HAL_RCC_OscConfig+0x474>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x2ea>
 80032b0:	4b64      	ldr	r3, [pc, #400]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032b4:	4a63      	ldr	r2, [pc, #396]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x324>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x30c>
 80032c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	4b5c      	ldr	r3, [pc, #368]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d6:	4a5b      	ldr	r2, [pc, #364]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x324>
 80032e0:	4b58      	ldr	r3, [pc, #352]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e4:	4a57      	ldr	r2, [pc, #348]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ec:	4b55      	ldr	r3, [pc, #340]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f0:	4a54      	ldr	r2, [pc, #336]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80032f2:	f023 0304 	bic.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fe fb90 	bl	8001a24 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fe fb8c 	bl	8001a24 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0cb      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	4b49      	ldr	r3, [pc, #292]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RCC_OscConfig+0x334>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7fe fb7a 	bl	8001a24 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fe fb76 	bl	8001a24 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0b5      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	4b3e      	ldr	r3, [pc, #248]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b39      	ldr	r3, [pc, #228]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	4a38      	ldr	r2, [pc, #224]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003366:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80a1 	beq.w	80034b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003372:	4b34      	ldr	r3, [pc, #208]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d05c      	beq.n	8003438 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d141      	bne.n	800340a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b31      	ldr	r3, [pc, #196]	@ (800344c <HAL_RCC_OscConfig+0x478>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338c:	f7fe fb4a 	bl	8001a24 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003394:	f7fe fb46 	bl	8001a24 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e087      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b27      	ldr	r3, [pc, #156]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	491b      	ldr	r1, [pc, #108]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80033d8:	4313      	orrs	r3, r2
 80033da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033dc:	4b1b      	ldr	r3, [pc, #108]	@ (800344c <HAL_RCC_OscConfig+0x478>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e2:	f7fe fb1f 	bl	8001a24 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ea:	f7fe fb1b 	bl	8001a24 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e05c      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fc:	4b11      	ldr	r3, [pc, #68]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x416>
 8003408:	e054      	b.n	80034b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800340a:	4b10      	ldr	r3, [pc, #64]	@ (800344c <HAL_RCC_OscConfig+0x478>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fe fb08 	bl	8001a24 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003418:	f7fe fb04 	bl	8001a24 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e045      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342a:	4b06      	ldr	r3, [pc, #24]	@ (8003444 <HAL_RCC_OscConfig+0x470>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x444>
 8003436:	e03d      	b.n	80034b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b01      	cmp	r3, #1
 800343e:	d107      	bne.n	8003450 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e038      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000
 800344c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003450:	4b1b      	ldr	r3, [pc, #108]	@ (80034c0 <HAL_RCC_OscConfig+0x4ec>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d028      	beq.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003468:	429a      	cmp	r2, r3
 800346a:	d121      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003476:	429a      	cmp	r2, r3
 8003478:	d11a      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800347a:	68fa      	ldr	r2, [r7, #12]
 800347c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003480:	4013      	ands	r3, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003486:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	4293      	cmp	r3, r2
 800348a:	d111      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	085b      	lsrs	r3, r3, #1
 8003498:	3b01      	subs	r3, #1
 800349a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800349c:	429a      	cmp	r2, r3
 800349e:	d107      	bne.n	80034b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e000      	b.n	80034b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	40023800 	.word	0x40023800

080034c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e0cc      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034d8:	4b68      	ldr	r3, [pc, #416]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 0307 	and.w	r3, r3, #7
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d90c      	bls.n	8003500 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e6:	4b65      	ldr	r3, [pc, #404]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	b2d2      	uxtb	r2, r2
 80034ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ee:	4b63      	ldr	r3, [pc, #396]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	683a      	ldr	r2, [r7, #0]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d001      	beq.n	8003500 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034fc:	2301      	movs	r3, #1
 80034fe:	e0b8      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d020      	beq.n	800354e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f003 0304 	and.w	r3, r3, #4
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003518:	4b59      	ldr	r3, [pc, #356]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	4a58      	ldr	r2, [pc, #352]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800351e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003522:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f003 0308 	and.w	r3, r3, #8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003530:	4b53      	ldr	r3, [pc, #332]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4a52      	ldr	r2, [pc, #328]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800353a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800353c:	4b50      	ldr	r3, [pc, #320]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	494d      	ldr	r1, [pc, #308]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800354a:	4313      	orrs	r3, r2
 800354c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0301 	and.w	r3, r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	d044      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b01      	cmp	r3, #1
 8003560:	d107      	bne.n	8003572 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	4b47      	ldr	r3, [pc, #284]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d119      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e07f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d003      	beq.n	8003582 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800357e:	2b03      	cmp	r3, #3
 8003580:	d107      	bne.n	8003592 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003582:	4b3f      	ldr	r3, [pc, #252]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d109      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e06f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003592:	4b3b      	ldr	r3, [pc, #236]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e067      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035a2:	4b37      	ldr	r3, [pc, #220]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f023 0203 	bic.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	4934      	ldr	r1, [pc, #208]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035b4:	f7fe fa36 	bl	8001a24 <HAL_GetTick>
 80035b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ba:	e00a      	b.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035bc:	f7fe fa32 	bl	8001a24 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e04f      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 020c 	and.w	r2, r3, #12
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d1eb      	bne.n	80035bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035e4:	4b25      	ldr	r3, [pc, #148]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0307 	and.w	r3, r3, #7
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	429a      	cmp	r2, r3
 80035f0:	d20c      	bcs.n	800360c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035f2:	4b22      	ldr	r3, [pc, #136]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	b2d2      	uxtb	r2, r2
 80035f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035fa:	4b20      	ldr	r3, [pc, #128]	@ (800367c <HAL_RCC_ClockConfig+0x1b8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	683a      	ldr	r2, [r7, #0]
 8003604:	429a      	cmp	r2, r3
 8003606:	d001      	beq.n	800360c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e032      	b.n	8003672 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003618:	4b19      	ldr	r3, [pc, #100]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	4916      	ldr	r1, [pc, #88]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b00      	cmp	r3, #0
 8003634:	d009      	beq.n	800364a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003636:	4b12      	ldr	r3, [pc, #72]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	490e      	ldr	r1, [pc, #56]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003646:	4313      	orrs	r3, r2
 8003648:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800364a:	f000 f821 	bl	8003690 <HAL_RCC_GetSysClockFreq>
 800364e:	4602      	mov	r2, r0
 8003650:	4b0b      	ldr	r3, [pc, #44]	@ (8003680 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	f003 030f 	and.w	r3, r3, #15
 800365a:	490a      	ldr	r1, [pc, #40]	@ (8003684 <HAL_RCC_ClockConfig+0x1c0>)
 800365c:	5ccb      	ldrb	r3, [r1, r3]
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	4a09      	ldr	r2, [pc, #36]	@ (8003688 <HAL_RCC_ClockConfig+0x1c4>)
 8003664:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003666:	4b09      	ldr	r3, [pc, #36]	@ (800368c <HAL_RCC_ClockConfig+0x1c8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fe f996 	bl	800199c <HAL_InitTick>

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3710      	adds	r7, #16
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	40023c00 	.word	0x40023c00
 8003680:	40023800 	.word	0x40023800
 8003684:	080067f4 	.word	0x080067f4
 8003688:	20000000 	.word	0x20000000
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003694:	b094      	sub	sp, #80	@ 0x50
 8003696:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80036a4:	2300      	movs	r3, #0
 80036a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036a8:	4b79      	ldr	r3, [pc, #484]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d00d      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0x40>
 80036b4:	2b08      	cmp	r3, #8
 80036b6:	f200 80e1 	bhi.w	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_RCC_GetSysClockFreq+0x34>
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0x3a>
 80036c2:	e0db      	b.n	800387c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036c4:	4b73      	ldr	r3, [pc, #460]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 80036c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c8:	e0db      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036ca:	4b73      	ldr	r3, [pc, #460]	@ (8003898 <HAL_RCC_GetSysClockFreq+0x208>)
 80036cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036ce:	e0d8      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036d0:	4b6f      	ldr	r3, [pc, #444]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036da:	4b6d      	ldr	r3, [pc, #436]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	099b      	lsrs	r3, r3, #6
 80036ec:	2200      	movs	r2, #0
 80036ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036fa:	2300      	movs	r3, #0
 80036fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80036fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003702:	4622      	mov	r2, r4
 8003704:	462b      	mov	r3, r5
 8003706:	f04f 0000 	mov.w	r0, #0
 800370a:	f04f 0100 	mov.w	r1, #0
 800370e:	0159      	lsls	r1, r3, #5
 8003710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003714:	0150      	lsls	r0, r2, #5
 8003716:	4602      	mov	r2, r0
 8003718:	460b      	mov	r3, r1
 800371a:	4621      	mov	r1, r4
 800371c:	1a51      	subs	r1, r2, r1
 800371e:	6139      	str	r1, [r7, #16]
 8003720:	4629      	mov	r1, r5
 8003722:	eb63 0301 	sbc.w	r3, r3, r1
 8003726:	617b      	str	r3, [r7, #20]
 8003728:	f04f 0200 	mov.w	r2, #0
 800372c:	f04f 0300 	mov.w	r3, #0
 8003730:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003734:	4659      	mov	r1, fp
 8003736:	018b      	lsls	r3, r1, #6
 8003738:	4651      	mov	r1, sl
 800373a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800373e:	4651      	mov	r1, sl
 8003740:	018a      	lsls	r2, r1, #6
 8003742:	4651      	mov	r1, sl
 8003744:	ebb2 0801 	subs.w	r8, r2, r1
 8003748:	4659      	mov	r1, fp
 800374a:	eb63 0901 	sbc.w	r9, r3, r1
 800374e:	f04f 0200 	mov.w	r2, #0
 8003752:	f04f 0300 	mov.w	r3, #0
 8003756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800375a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800375e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003762:	4690      	mov	r8, r2
 8003764:	4699      	mov	r9, r3
 8003766:	4623      	mov	r3, r4
 8003768:	eb18 0303 	adds.w	r3, r8, r3
 800376c:	60bb      	str	r3, [r7, #8]
 800376e:	462b      	mov	r3, r5
 8003770:	eb49 0303 	adc.w	r3, r9, r3
 8003774:	60fb      	str	r3, [r7, #12]
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 0300 	mov.w	r3, #0
 800377e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003782:	4629      	mov	r1, r5
 8003784:	024b      	lsls	r3, r1, #9
 8003786:	4621      	mov	r1, r4
 8003788:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800378c:	4621      	mov	r1, r4
 800378e:	024a      	lsls	r2, r1, #9
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003796:	2200      	movs	r2, #0
 8003798:	62bb      	str	r3, [r7, #40]	@ 0x28
 800379a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800379c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80037a0:	f7fd fa5a 	bl	8000c58 <__aeabi_uldivmod>
 80037a4:	4602      	mov	r2, r0
 80037a6:	460b      	mov	r3, r1
 80037a8:	4613      	mov	r3, r2
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	e058      	b.n	8003860 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037ae:	4b38      	ldr	r3, [pc, #224]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	099b      	lsrs	r3, r3, #6
 80037b4:	2200      	movs	r2, #0
 80037b6:	4618      	mov	r0, r3
 80037b8:	4611      	mov	r1, r2
 80037ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037be:	623b      	str	r3, [r7, #32]
 80037c0:	2300      	movs	r3, #0
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037c8:	4642      	mov	r2, r8
 80037ca:	464b      	mov	r3, r9
 80037cc:	f04f 0000 	mov.w	r0, #0
 80037d0:	f04f 0100 	mov.w	r1, #0
 80037d4:	0159      	lsls	r1, r3, #5
 80037d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037da:	0150      	lsls	r0, r2, #5
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4641      	mov	r1, r8
 80037e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80037e6:	4649      	mov	r1, r9
 80037e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80037ec:	f04f 0200 	mov.w	r2, #0
 80037f0:	f04f 0300 	mov.w	r3, #0
 80037f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003800:	ebb2 040a 	subs.w	r4, r2, sl
 8003804:	eb63 050b 	sbc.w	r5, r3, fp
 8003808:	f04f 0200 	mov.w	r2, #0
 800380c:	f04f 0300 	mov.w	r3, #0
 8003810:	00eb      	lsls	r3, r5, #3
 8003812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003816:	00e2      	lsls	r2, r4, #3
 8003818:	4614      	mov	r4, r2
 800381a:	461d      	mov	r5, r3
 800381c:	4643      	mov	r3, r8
 800381e:	18e3      	adds	r3, r4, r3
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	464b      	mov	r3, r9
 8003824:	eb45 0303 	adc.w	r3, r5, r3
 8003828:	607b      	str	r3, [r7, #4]
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	f04f 0300 	mov.w	r3, #0
 8003832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003836:	4629      	mov	r1, r5
 8003838:	028b      	lsls	r3, r1, #10
 800383a:	4621      	mov	r1, r4
 800383c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003840:	4621      	mov	r1, r4
 8003842:	028a      	lsls	r2, r1, #10
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800384a:	2200      	movs	r2, #0
 800384c:	61bb      	str	r3, [r7, #24]
 800384e:	61fa      	str	r2, [r7, #28]
 8003850:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003854:	f7fd fa00 	bl	8000c58 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4613      	mov	r3, r2
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003860:	4b0b      	ldr	r3, [pc, #44]	@ (8003890 <HAL_RCC_GetSysClockFreq+0x200>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	3301      	adds	r3, #1
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003870:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003872:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003874:	fbb2 f3f3 	udiv	r3, r2, r3
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800387a:	e002      	b.n	8003882 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800387c:	4b05      	ldr	r3, [pc, #20]	@ (8003894 <HAL_RCC_GetSysClockFreq+0x204>)
 800387e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003882:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003884:	4618      	mov	r0, r3
 8003886:	3750      	adds	r7, #80	@ 0x50
 8003888:	46bd      	mov	sp, r7
 800388a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	00f42400 	.word	0x00f42400
 8003898:	007a1200 	.word	0x007a1200

0800389c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800389c:	b480      	push	{r7}
 800389e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038a0:	4b03      	ldr	r3, [pc, #12]	@ (80038b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80038a2:	681b      	ldr	r3, [r3, #0]
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000

080038b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038b8:	f7ff fff0 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b05      	ldr	r3, [pc, #20]	@ (80038d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0a9b      	lsrs	r3, r3, #10
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4903      	ldr	r1, [pc, #12]	@ (80038d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40023800 	.word	0x40023800
 80038d8:	08006804 	.word	0x08006804

080038dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038e0:	f7ff ffdc 	bl	800389c <HAL_RCC_GetHCLKFreq>
 80038e4:	4602      	mov	r2, r0
 80038e6:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	0b5b      	lsrs	r3, r3, #13
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	4903      	ldr	r1, [pc, #12]	@ (8003900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038f2:	5ccb      	ldrb	r3, [r1, r3]
 80038f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	08006804 	.word	0x08006804

08003904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e042      	b.n	800399c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d106      	bne.n	8003930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7fd feb6 	bl	800169c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2224      	movs	r2, #36	@ 0x24
 8003934:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f000 f82b 	bl	80039a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	691a      	ldr	r2, [r3, #16]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800395c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	695a      	ldr	r2, [r3, #20]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800396c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800397c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2220      	movs	r2, #32
 8003990:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a8:	b0c0      	sub	sp, #256	@ 0x100
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c0:	68d9      	ldr	r1, [r3, #12]
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	ea40 0301 	orr.w	r3, r0, r1
 80039cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	431a      	orrs	r2, r3
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e0:	695b      	ldr	r3, [r3, #20]
 80039e2:	431a      	orrs	r2, r3
 80039e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80039fc:	f021 010c 	bic.w	r1, r1, #12
 8003a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	695b      	ldr	r3, [r3, #20]
 8003a16:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1e:	6999      	ldr	r1, [r3, #24]
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	ea40 0301 	orr.w	r3, r0, r1
 8003a2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4b8f      	ldr	r3, [pc, #572]	@ (8003c70 <UART_SetConfig+0x2cc>)
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d005      	beq.n	8003a44 <UART_SetConfig+0xa0>
 8003a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b8d      	ldr	r3, [pc, #564]	@ (8003c74 <UART_SetConfig+0x2d0>)
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d104      	bne.n	8003a4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a44:	f7ff ff4a 	bl	80038dc <HAL_RCC_GetPCLK2Freq>
 8003a48:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a4c:	e003      	b.n	8003a56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a4e:	f7ff ff31 	bl	80038b4 <HAL_RCC_GetPCLK1Freq>
 8003a52:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a60:	f040 810c 	bne.w	8003c7c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a6e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003a72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003a76:	4622      	mov	r2, r4
 8003a78:	462b      	mov	r3, r5
 8003a7a:	1891      	adds	r1, r2, r2
 8003a7c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003a7e:	415b      	adcs	r3, r3
 8003a80:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a86:	4621      	mov	r1, r4
 8003a88:	eb12 0801 	adds.w	r8, r2, r1
 8003a8c:	4629      	mov	r1, r5
 8003a8e:	eb43 0901 	adc.w	r9, r3, r1
 8003a92:	f04f 0200 	mov.w	r2, #0
 8003a96:	f04f 0300 	mov.w	r3, #0
 8003a9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003aa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003aa6:	4690      	mov	r8, r2
 8003aa8:	4699      	mov	r9, r3
 8003aaa:	4623      	mov	r3, r4
 8003aac:	eb18 0303 	adds.w	r3, r8, r3
 8003ab0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ab4:	462b      	mov	r3, r5
 8003ab6:	eb49 0303 	adc.w	r3, r9, r3
 8003aba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003abe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003aca:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003ace:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	18db      	adds	r3, r3, r3
 8003ad6:	653b      	str	r3, [r7, #80]	@ 0x50
 8003ad8:	4613      	mov	r3, r2
 8003ada:	eb42 0303 	adc.w	r3, r2, r3
 8003ade:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ae0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003ae4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003ae8:	f7fd f8b6 	bl	8000c58 <__aeabi_uldivmod>
 8003aec:	4602      	mov	r2, r0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4b61      	ldr	r3, [pc, #388]	@ (8003c78 <UART_SetConfig+0x2d4>)
 8003af2:	fba3 2302 	umull	r2, r3, r3, r2
 8003af6:	095b      	lsrs	r3, r3, #5
 8003af8:	011c      	lsls	r4, r3, #4
 8003afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003afe:	2200      	movs	r2, #0
 8003b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b04:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b08:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	464b      	mov	r3, r9
 8003b10:	1891      	adds	r1, r2, r2
 8003b12:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b14:	415b      	adcs	r3, r3
 8003b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b18:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b1c:	4641      	mov	r1, r8
 8003b1e:	eb12 0a01 	adds.w	sl, r2, r1
 8003b22:	4649      	mov	r1, r9
 8003b24:	eb43 0b01 	adc.w	fp, r3, r1
 8003b28:	f04f 0200 	mov.w	r2, #0
 8003b2c:	f04f 0300 	mov.w	r3, #0
 8003b30:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b34:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b3c:	4692      	mov	sl, r2
 8003b3e:	469b      	mov	fp, r3
 8003b40:	4643      	mov	r3, r8
 8003b42:	eb1a 0303 	adds.w	r3, sl, r3
 8003b46:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b50:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b60:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003b64:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	18db      	adds	r3, r3, r3
 8003b6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b6e:	4613      	mov	r3, r2
 8003b70:	eb42 0303 	adc.w	r3, r2, r3
 8003b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b76:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003b7a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003b7e:	f7fd f86b 	bl	8000c58 <__aeabi_uldivmod>
 8003b82:	4602      	mov	r2, r0
 8003b84:	460b      	mov	r3, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <UART_SetConfig+0x2d4>)
 8003b8a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b8e:	095b      	lsrs	r3, r3, #5
 8003b90:	2264      	movs	r2, #100	@ 0x64
 8003b92:	fb02 f303 	mul.w	r3, r2, r3
 8003b96:	1acb      	subs	r3, r1, r3
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b9e:	4b36      	ldr	r3, [pc, #216]	@ (8003c78 <UART_SetConfig+0x2d4>)
 8003ba0:	fba3 2302 	umull	r2, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003bac:	441c      	add	r4, r3
 8003bae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bb8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bbc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bc0:	4642      	mov	r2, r8
 8003bc2:	464b      	mov	r3, r9
 8003bc4:	1891      	adds	r1, r2, r2
 8003bc6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003bc8:	415b      	adcs	r3, r3
 8003bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003bcc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003bd0:	4641      	mov	r1, r8
 8003bd2:	1851      	adds	r1, r2, r1
 8003bd4:	6339      	str	r1, [r7, #48]	@ 0x30
 8003bd6:	4649      	mov	r1, r9
 8003bd8:	414b      	adcs	r3, r1
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	f04f 0300 	mov.w	r3, #0
 8003be4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003be8:	4659      	mov	r1, fp
 8003bea:	00cb      	lsls	r3, r1, #3
 8003bec:	4651      	mov	r1, sl
 8003bee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bf2:	4651      	mov	r1, sl
 8003bf4:	00ca      	lsls	r2, r1, #3
 8003bf6:	4610      	mov	r0, r2
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c04:	464b      	mov	r3, r9
 8003c06:	460a      	mov	r2, r1
 8003c08:	eb42 0303 	adc.w	r3, r2, r3
 8003c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c1c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c24:	460b      	mov	r3, r1
 8003c26:	18db      	adds	r3, r3, r3
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	eb42 0303 	adc.w	r3, r2, r3
 8003c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c32:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c36:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c3a:	f7fd f80d 	bl	8000c58 <__aeabi_uldivmod>
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	4b0d      	ldr	r3, [pc, #52]	@ (8003c78 <UART_SetConfig+0x2d4>)
 8003c44:	fba3 1302 	umull	r1, r3, r3, r2
 8003c48:	095b      	lsrs	r3, r3, #5
 8003c4a:	2164      	movs	r1, #100	@ 0x64
 8003c4c:	fb01 f303 	mul.w	r3, r1, r3
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	3332      	adds	r3, #50	@ 0x32
 8003c56:	4a08      	ldr	r2, [pc, #32]	@ (8003c78 <UART_SetConfig+0x2d4>)
 8003c58:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 0207 	and.w	r2, r3, #7
 8003c62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4422      	add	r2, r4
 8003c6a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c6c:	e106      	b.n	8003e7c <UART_SetConfig+0x4d8>
 8003c6e:	bf00      	nop
 8003c70:	40011000 	.word	0x40011000
 8003c74:	40011400 	.word	0x40011400
 8003c78:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c80:	2200      	movs	r2, #0
 8003c82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003c86:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003c8a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003c8e:	4642      	mov	r2, r8
 8003c90:	464b      	mov	r3, r9
 8003c92:	1891      	adds	r1, r2, r2
 8003c94:	6239      	str	r1, [r7, #32]
 8003c96:	415b      	adcs	r3, r3
 8003c98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c9e:	4641      	mov	r1, r8
 8003ca0:	1854      	adds	r4, r2, r1
 8003ca2:	4649      	mov	r1, r9
 8003ca4:	eb43 0501 	adc.w	r5, r3, r1
 8003ca8:	f04f 0200 	mov.w	r2, #0
 8003cac:	f04f 0300 	mov.w	r3, #0
 8003cb0:	00eb      	lsls	r3, r5, #3
 8003cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb6:	00e2      	lsls	r2, r4, #3
 8003cb8:	4614      	mov	r4, r2
 8003cba:	461d      	mov	r5, r3
 8003cbc:	4643      	mov	r3, r8
 8003cbe:	18e3      	adds	r3, r4, r3
 8003cc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	eb45 0303 	adc.w	r3, r5, r3
 8003cca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003cda:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	f04f 0300 	mov.w	r3, #0
 8003ce6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003cea:	4629      	mov	r1, r5
 8003cec:	008b      	lsls	r3, r1, #2
 8003cee:	4621      	mov	r1, r4
 8003cf0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf4:	4621      	mov	r1, r4
 8003cf6:	008a      	lsls	r2, r1, #2
 8003cf8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003cfc:	f7fc ffac 	bl	8000c58 <__aeabi_uldivmod>
 8003d00:	4602      	mov	r2, r0
 8003d02:	460b      	mov	r3, r1
 8003d04:	4b60      	ldr	r3, [pc, #384]	@ (8003e88 <UART_SetConfig+0x4e4>)
 8003d06:	fba3 2302 	umull	r2, r3, r3, r2
 8003d0a:	095b      	lsrs	r3, r3, #5
 8003d0c:	011c      	lsls	r4, r3, #4
 8003d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d12:	2200      	movs	r2, #0
 8003d14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d18:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d1c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	1891      	adds	r1, r2, r2
 8003d26:	61b9      	str	r1, [r7, #24]
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	61fb      	str	r3, [r7, #28]
 8003d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d30:	4641      	mov	r1, r8
 8003d32:	1851      	adds	r1, r2, r1
 8003d34:	6139      	str	r1, [r7, #16]
 8003d36:	4649      	mov	r1, r9
 8003d38:	414b      	adcs	r3, r1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d48:	4659      	mov	r1, fp
 8003d4a:	00cb      	lsls	r3, r1, #3
 8003d4c:	4651      	mov	r1, sl
 8003d4e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d52:	4651      	mov	r1, sl
 8003d54:	00ca      	lsls	r2, r1, #3
 8003d56:	4610      	mov	r0, r2
 8003d58:	4619      	mov	r1, r3
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	189b      	adds	r3, r3, r2
 8003d60:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003d64:	464b      	mov	r3, r9
 8003d66:	460a      	mov	r2, r1
 8003d68:	eb42 0303 	adc.w	r3, r2, r3
 8003d6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003d7a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d7c:	f04f 0200 	mov.w	r2, #0
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003d88:	4649      	mov	r1, r9
 8003d8a:	008b      	lsls	r3, r1, #2
 8003d8c:	4641      	mov	r1, r8
 8003d8e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d92:	4641      	mov	r1, r8
 8003d94:	008a      	lsls	r2, r1, #2
 8003d96:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003d9a:	f7fc ff5d 	bl	8000c58 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4611      	mov	r1, r2
 8003da4:	4b38      	ldr	r3, [pc, #224]	@ (8003e88 <UART_SetConfig+0x4e4>)
 8003da6:	fba3 2301 	umull	r2, r3, r3, r1
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	2264      	movs	r2, #100	@ 0x64
 8003dae:	fb02 f303 	mul.w	r3, r2, r3
 8003db2:	1acb      	subs	r3, r1, r3
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	3332      	adds	r3, #50	@ 0x32
 8003db8:	4a33      	ldr	r2, [pc, #204]	@ (8003e88 <UART_SetConfig+0x4e4>)
 8003dba:	fba2 2303 	umull	r2, r3, r2, r3
 8003dbe:	095b      	lsrs	r3, r3, #5
 8003dc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc4:	441c      	add	r4, r3
 8003dc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dca:	2200      	movs	r2, #0
 8003dcc:	673b      	str	r3, [r7, #112]	@ 0x70
 8003dce:	677a      	str	r2, [r7, #116]	@ 0x74
 8003dd0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	1891      	adds	r1, r2, r2
 8003dda:	60b9      	str	r1, [r7, #8]
 8003ddc:	415b      	adcs	r3, r3
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003de4:	4641      	mov	r1, r8
 8003de6:	1851      	adds	r1, r2, r1
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	4649      	mov	r1, r9
 8003dec:	414b      	adcs	r3, r1
 8003dee:	607b      	str	r3, [r7, #4]
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	00cb      	lsls	r3, r1, #3
 8003e00:	4651      	mov	r1, sl
 8003e02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e06:	4651      	mov	r1, sl
 8003e08:	00ca      	lsls	r2, r1, #3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4603      	mov	r3, r0
 8003e10:	4642      	mov	r2, r8
 8003e12:	189b      	adds	r3, r3, r2
 8003e14:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e16:	464b      	mov	r3, r9
 8003e18:	460a      	mov	r2, r1
 8003e1a:	eb42 0303 	adc.w	r3, r2, r3
 8003e1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e2a:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e38:	4649      	mov	r1, r9
 8003e3a:	008b      	lsls	r3, r1, #2
 8003e3c:	4641      	mov	r1, r8
 8003e3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e42:	4641      	mov	r1, r8
 8003e44:	008a      	lsls	r2, r1, #2
 8003e46:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e4a:	f7fc ff05 	bl	8000c58 <__aeabi_uldivmod>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	460b      	mov	r3, r1
 8003e52:	4b0d      	ldr	r3, [pc, #52]	@ (8003e88 <UART_SetConfig+0x4e4>)
 8003e54:	fba3 1302 	umull	r1, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	2164      	movs	r1, #100	@ 0x64
 8003e5c:	fb01 f303 	mul.w	r3, r1, r3
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	3332      	adds	r3, #50	@ 0x32
 8003e66:	4a08      	ldr	r2, [pc, #32]	@ (8003e88 <UART_SetConfig+0x4e4>)
 8003e68:	fba2 2303 	umull	r2, r3, r2, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	f003 020f 	and.w	r2, r3, #15
 8003e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4422      	add	r2, r4
 8003e7a:	609a      	str	r2, [r3, #8]
}
 8003e7c:	bf00      	nop
 8003e7e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003e82:	46bd      	mov	sp, r7
 8003e84:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e88:	51eb851f 	.word	0x51eb851f

08003e8c <__cvt>:
 8003e8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e90:	ec57 6b10 	vmov	r6, r7, d0
 8003e94:	2f00      	cmp	r7, #0
 8003e96:	460c      	mov	r4, r1
 8003e98:	4619      	mov	r1, r3
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	bfbb      	ittet	lt
 8003e9e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003ea2:	461f      	movlt	r7, r3
 8003ea4:	2300      	movge	r3, #0
 8003ea6:	232d      	movlt	r3, #45	@ 0x2d
 8003ea8:	700b      	strb	r3, [r1, #0]
 8003eaa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003eac:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003eb0:	4691      	mov	r9, r2
 8003eb2:	f023 0820 	bic.w	r8, r3, #32
 8003eb6:	bfbc      	itt	lt
 8003eb8:	4632      	movlt	r2, r6
 8003eba:	4616      	movlt	r6, r2
 8003ebc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003ec0:	d005      	beq.n	8003ece <__cvt+0x42>
 8003ec2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003ec6:	d100      	bne.n	8003eca <__cvt+0x3e>
 8003ec8:	3401      	adds	r4, #1
 8003eca:	2102      	movs	r1, #2
 8003ecc:	e000      	b.n	8003ed0 <__cvt+0x44>
 8003ece:	2103      	movs	r1, #3
 8003ed0:	ab03      	add	r3, sp, #12
 8003ed2:	9301      	str	r3, [sp, #4]
 8003ed4:	ab02      	add	r3, sp, #8
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	ec47 6b10 	vmov	d0, r6, r7
 8003edc:	4653      	mov	r3, sl
 8003ede:	4622      	mov	r2, r4
 8003ee0:	f000 fe4a 	bl	8004b78 <_dtoa_r>
 8003ee4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003ee8:	4605      	mov	r5, r0
 8003eea:	d119      	bne.n	8003f20 <__cvt+0x94>
 8003eec:	f019 0f01 	tst.w	r9, #1
 8003ef0:	d00e      	beq.n	8003f10 <__cvt+0x84>
 8003ef2:	eb00 0904 	add.w	r9, r0, r4
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4630      	mov	r0, r6
 8003efc:	4639      	mov	r1, r7
 8003efe:	f7fc fdeb 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f02:	b108      	cbz	r0, 8003f08 <__cvt+0x7c>
 8003f04:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f08:	2230      	movs	r2, #48	@ 0x30
 8003f0a:	9b03      	ldr	r3, [sp, #12]
 8003f0c:	454b      	cmp	r3, r9
 8003f0e:	d31e      	bcc.n	8003f4e <__cvt+0xc2>
 8003f10:	9b03      	ldr	r3, [sp, #12]
 8003f12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f14:	1b5b      	subs	r3, r3, r5
 8003f16:	4628      	mov	r0, r5
 8003f18:	6013      	str	r3, [r2, #0]
 8003f1a:	b004      	add	sp, #16
 8003f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f24:	eb00 0904 	add.w	r9, r0, r4
 8003f28:	d1e5      	bne.n	8003ef6 <__cvt+0x6a>
 8003f2a:	7803      	ldrb	r3, [r0, #0]
 8003f2c:	2b30      	cmp	r3, #48	@ 0x30
 8003f2e:	d10a      	bne.n	8003f46 <__cvt+0xba>
 8003f30:	2200      	movs	r2, #0
 8003f32:	2300      	movs	r3, #0
 8003f34:	4630      	mov	r0, r6
 8003f36:	4639      	mov	r1, r7
 8003f38:	f7fc fdce 	bl	8000ad8 <__aeabi_dcmpeq>
 8003f3c:	b918      	cbnz	r0, 8003f46 <__cvt+0xba>
 8003f3e:	f1c4 0401 	rsb	r4, r4, #1
 8003f42:	f8ca 4000 	str.w	r4, [sl]
 8003f46:	f8da 3000 	ldr.w	r3, [sl]
 8003f4a:	4499      	add	r9, r3
 8003f4c:	e7d3      	b.n	8003ef6 <__cvt+0x6a>
 8003f4e:	1c59      	adds	r1, r3, #1
 8003f50:	9103      	str	r1, [sp, #12]
 8003f52:	701a      	strb	r2, [r3, #0]
 8003f54:	e7d9      	b.n	8003f0a <__cvt+0x7e>

08003f56 <__exponent>:
 8003f56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f58:	2900      	cmp	r1, #0
 8003f5a:	bfba      	itte	lt
 8003f5c:	4249      	neglt	r1, r1
 8003f5e:	232d      	movlt	r3, #45	@ 0x2d
 8003f60:	232b      	movge	r3, #43	@ 0x2b
 8003f62:	2909      	cmp	r1, #9
 8003f64:	7002      	strb	r2, [r0, #0]
 8003f66:	7043      	strb	r3, [r0, #1]
 8003f68:	dd29      	ble.n	8003fbe <__exponent+0x68>
 8003f6a:	f10d 0307 	add.w	r3, sp, #7
 8003f6e:	461d      	mov	r5, r3
 8003f70:	270a      	movs	r7, #10
 8003f72:	461a      	mov	r2, r3
 8003f74:	fbb1 f6f7 	udiv	r6, r1, r7
 8003f78:	fb07 1416 	mls	r4, r7, r6, r1
 8003f7c:	3430      	adds	r4, #48	@ 0x30
 8003f7e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003f82:	460c      	mov	r4, r1
 8003f84:	2c63      	cmp	r4, #99	@ 0x63
 8003f86:	f103 33ff 	add.w	r3, r3, #4294967295
 8003f8a:	4631      	mov	r1, r6
 8003f8c:	dcf1      	bgt.n	8003f72 <__exponent+0x1c>
 8003f8e:	3130      	adds	r1, #48	@ 0x30
 8003f90:	1e94      	subs	r4, r2, #2
 8003f92:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f96:	1c41      	adds	r1, r0, #1
 8003f98:	4623      	mov	r3, r4
 8003f9a:	42ab      	cmp	r3, r5
 8003f9c:	d30a      	bcc.n	8003fb4 <__exponent+0x5e>
 8003f9e:	f10d 0309 	add.w	r3, sp, #9
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	42ac      	cmp	r4, r5
 8003fa6:	bf88      	it	hi
 8003fa8:	2300      	movhi	r3, #0
 8003faa:	3302      	adds	r3, #2
 8003fac:	4403      	add	r3, r0
 8003fae:	1a18      	subs	r0, r3, r0
 8003fb0:	b003      	add	sp, #12
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fb4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003fb8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003fbc:	e7ed      	b.n	8003f9a <__exponent+0x44>
 8003fbe:	2330      	movs	r3, #48	@ 0x30
 8003fc0:	3130      	adds	r1, #48	@ 0x30
 8003fc2:	7083      	strb	r3, [r0, #2]
 8003fc4:	70c1      	strb	r1, [r0, #3]
 8003fc6:	1d03      	adds	r3, r0, #4
 8003fc8:	e7f1      	b.n	8003fae <__exponent+0x58>
	...

08003fcc <_printf_float>:
 8003fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fd0:	b08d      	sub	sp, #52	@ 0x34
 8003fd2:	460c      	mov	r4, r1
 8003fd4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003fd8:	4616      	mov	r6, r2
 8003fda:	461f      	mov	r7, r3
 8003fdc:	4605      	mov	r5, r0
 8003fde:	f000 fccb 	bl	8004978 <_localeconv_r>
 8003fe2:	6803      	ldr	r3, [r0, #0]
 8003fe4:	9304      	str	r3, [sp, #16]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc f94a 	bl	8000280 <strlen>
 8003fec:	2300      	movs	r3, #0
 8003fee:	930a      	str	r3, [sp, #40]	@ 0x28
 8003ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ff4:	9005      	str	r0, [sp, #20]
 8003ff6:	3307      	adds	r3, #7
 8003ff8:	f023 0307 	bic.w	r3, r3, #7
 8003ffc:	f103 0208 	add.w	r2, r3, #8
 8004000:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004004:	f8d4 b000 	ldr.w	fp, [r4]
 8004008:	f8c8 2000 	str.w	r2, [r8]
 800400c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004010:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004014:	9307      	str	r3, [sp, #28]
 8004016:	f8cd 8018 	str.w	r8, [sp, #24]
 800401a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800401e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004022:	4b9c      	ldr	r3, [pc, #624]	@ (8004294 <_printf_float+0x2c8>)
 8004024:	f04f 32ff 	mov.w	r2, #4294967295
 8004028:	f7fc fd88 	bl	8000b3c <__aeabi_dcmpun>
 800402c:	bb70      	cbnz	r0, 800408c <_printf_float+0xc0>
 800402e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004032:	4b98      	ldr	r3, [pc, #608]	@ (8004294 <_printf_float+0x2c8>)
 8004034:	f04f 32ff 	mov.w	r2, #4294967295
 8004038:	f7fc fd62 	bl	8000b00 <__aeabi_dcmple>
 800403c:	bb30      	cbnz	r0, 800408c <_printf_float+0xc0>
 800403e:	2200      	movs	r2, #0
 8004040:	2300      	movs	r3, #0
 8004042:	4640      	mov	r0, r8
 8004044:	4649      	mov	r1, r9
 8004046:	f7fc fd51 	bl	8000aec <__aeabi_dcmplt>
 800404a:	b110      	cbz	r0, 8004052 <_printf_float+0x86>
 800404c:	232d      	movs	r3, #45	@ 0x2d
 800404e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004052:	4a91      	ldr	r2, [pc, #580]	@ (8004298 <_printf_float+0x2cc>)
 8004054:	4b91      	ldr	r3, [pc, #580]	@ (800429c <_printf_float+0x2d0>)
 8004056:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800405a:	bf8c      	ite	hi
 800405c:	4690      	movhi	r8, r2
 800405e:	4698      	movls	r8, r3
 8004060:	2303      	movs	r3, #3
 8004062:	6123      	str	r3, [r4, #16]
 8004064:	f02b 0304 	bic.w	r3, fp, #4
 8004068:	6023      	str	r3, [r4, #0]
 800406a:	f04f 0900 	mov.w	r9, #0
 800406e:	9700      	str	r7, [sp, #0]
 8004070:	4633      	mov	r3, r6
 8004072:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004074:	4621      	mov	r1, r4
 8004076:	4628      	mov	r0, r5
 8004078:	f000 f9d2 	bl	8004420 <_printf_common>
 800407c:	3001      	adds	r0, #1
 800407e:	f040 808d 	bne.w	800419c <_printf_float+0x1d0>
 8004082:	f04f 30ff 	mov.w	r0, #4294967295
 8004086:	b00d      	add	sp, #52	@ 0x34
 8004088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800408c:	4642      	mov	r2, r8
 800408e:	464b      	mov	r3, r9
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	f7fc fd52 	bl	8000b3c <__aeabi_dcmpun>
 8004098:	b140      	cbz	r0, 80040ac <_printf_float+0xe0>
 800409a:	464b      	mov	r3, r9
 800409c:	2b00      	cmp	r3, #0
 800409e:	bfbc      	itt	lt
 80040a0:	232d      	movlt	r3, #45	@ 0x2d
 80040a2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040a6:	4a7e      	ldr	r2, [pc, #504]	@ (80042a0 <_printf_float+0x2d4>)
 80040a8:	4b7e      	ldr	r3, [pc, #504]	@ (80042a4 <_printf_float+0x2d8>)
 80040aa:	e7d4      	b.n	8004056 <_printf_float+0x8a>
 80040ac:	6863      	ldr	r3, [r4, #4]
 80040ae:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80040b2:	9206      	str	r2, [sp, #24]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	d13b      	bne.n	8004130 <_printf_float+0x164>
 80040b8:	2306      	movs	r3, #6
 80040ba:	6063      	str	r3, [r4, #4]
 80040bc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80040c0:	2300      	movs	r3, #0
 80040c2:	6022      	str	r2, [r4, #0]
 80040c4:	9303      	str	r3, [sp, #12]
 80040c6:	ab0a      	add	r3, sp, #40	@ 0x28
 80040c8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80040cc:	ab09      	add	r3, sp, #36	@ 0x24
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	6861      	ldr	r1, [r4, #4]
 80040d2:	ec49 8b10 	vmov	d0, r8, r9
 80040d6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80040da:	4628      	mov	r0, r5
 80040dc:	f7ff fed6 	bl	8003e8c <__cvt>
 80040e0:	9b06      	ldr	r3, [sp, #24]
 80040e2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80040e4:	2b47      	cmp	r3, #71	@ 0x47
 80040e6:	4680      	mov	r8, r0
 80040e8:	d129      	bne.n	800413e <_printf_float+0x172>
 80040ea:	1cc8      	adds	r0, r1, #3
 80040ec:	db02      	blt.n	80040f4 <_printf_float+0x128>
 80040ee:	6863      	ldr	r3, [r4, #4]
 80040f0:	4299      	cmp	r1, r3
 80040f2:	dd41      	ble.n	8004178 <_printf_float+0x1ac>
 80040f4:	f1aa 0a02 	sub.w	sl, sl, #2
 80040f8:	fa5f fa8a 	uxtb.w	sl, sl
 80040fc:	3901      	subs	r1, #1
 80040fe:	4652      	mov	r2, sl
 8004100:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004104:	9109      	str	r1, [sp, #36]	@ 0x24
 8004106:	f7ff ff26 	bl	8003f56 <__exponent>
 800410a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800410c:	1813      	adds	r3, r2, r0
 800410e:	2a01      	cmp	r2, #1
 8004110:	4681      	mov	r9, r0
 8004112:	6123      	str	r3, [r4, #16]
 8004114:	dc02      	bgt.n	800411c <_printf_float+0x150>
 8004116:	6822      	ldr	r2, [r4, #0]
 8004118:	07d2      	lsls	r2, r2, #31
 800411a:	d501      	bpl.n	8004120 <_printf_float+0x154>
 800411c:	3301      	adds	r3, #1
 800411e:	6123      	str	r3, [r4, #16]
 8004120:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0a2      	beq.n	800406e <_printf_float+0xa2>
 8004128:	232d      	movs	r3, #45	@ 0x2d
 800412a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800412e:	e79e      	b.n	800406e <_printf_float+0xa2>
 8004130:	9a06      	ldr	r2, [sp, #24]
 8004132:	2a47      	cmp	r2, #71	@ 0x47
 8004134:	d1c2      	bne.n	80040bc <_printf_float+0xf0>
 8004136:	2b00      	cmp	r3, #0
 8004138:	d1c0      	bne.n	80040bc <_printf_float+0xf0>
 800413a:	2301      	movs	r3, #1
 800413c:	e7bd      	b.n	80040ba <_printf_float+0xee>
 800413e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004142:	d9db      	bls.n	80040fc <_printf_float+0x130>
 8004144:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004148:	d118      	bne.n	800417c <_printf_float+0x1b0>
 800414a:	2900      	cmp	r1, #0
 800414c:	6863      	ldr	r3, [r4, #4]
 800414e:	dd0b      	ble.n	8004168 <_printf_float+0x19c>
 8004150:	6121      	str	r1, [r4, #16]
 8004152:	b913      	cbnz	r3, 800415a <_printf_float+0x18e>
 8004154:	6822      	ldr	r2, [r4, #0]
 8004156:	07d0      	lsls	r0, r2, #31
 8004158:	d502      	bpl.n	8004160 <_printf_float+0x194>
 800415a:	3301      	adds	r3, #1
 800415c:	440b      	add	r3, r1
 800415e:	6123      	str	r3, [r4, #16]
 8004160:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004162:	f04f 0900 	mov.w	r9, #0
 8004166:	e7db      	b.n	8004120 <_printf_float+0x154>
 8004168:	b913      	cbnz	r3, 8004170 <_printf_float+0x1a4>
 800416a:	6822      	ldr	r2, [r4, #0]
 800416c:	07d2      	lsls	r2, r2, #31
 800416e:	d501      	bpl.n	8004174 <_printf_float+0x1a8>
 8004170:	3302      	adds	r3, #2
 8004172:	e7f4      	b.n	800415e <_printf_float+0x192>
 8004174:	2301      	movs	r3, #1
 8004176:	e7f2      	b.n	800415e <_printf_float+0x192>
 8004178:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800417c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800417e:	4299      	cmp	r1, r3
 8004180:	db05      	blt.n	800418e <_printf_float+0x1c2>
 8004182:	6823      	ldr	r3, [r4, #0]
 8004184:	6121      	str	r1, [r4, #16]
 8004186:	07d8      	lsls	r0, r3, #31
 8004188:	d5ea      	bpl.n	8004160 <_printf_float+0x194>
 800418a:	1c4b      	adds	r3, r1, #1
 800418c:	e7e7      	b.n	800415e <_printf_float+0x192>
 800418e:	2900      	cmp	r1, #0
 8004190:	bfd4      	ite	le
 8004192:	f1c1 0202 	rsble	r2, r1, #2
 8004196:	2201      	movgt	r2, #1
 8004198:	4413      	add	r3, r2
 800419a:	e7e0      	b.n	800415e <_printf_float+0x192>
 800419c:	6823      	ldr	r3, [r4, #0]
 800419e:	055a      	lsls	r2, r3, #21
 80041a0:	d407      	bmi.n	80041b2 <_printf_float+0x1e6>
 80041a2:	6923      	ldr	r3, [r4, #16]
 80041a4:	4642      	mov	r2, r8
 80041a6:	4631      	mov	r1, r6
 80041a8:	4628      	mov	r0, r5
 80041aa:	47b8      	blx	r7
 80041ac:	3001      	adds	r0, #1
 80041ae:	d12b      	bne.n	8004208 <_printf_float+0x23c>
 80041b0:	e767      	b.n	8004082 <_printf_float+0xb6>
 80041b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041b6:	f240 80dd 	bls.w	8004374 <_printf_float+0x3a8>
 80041ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041be:	2200      	movs	r2, #0
 80041c0:	2300      	movs	r3, #0
 80041c2:	f7fc fc89 	bl	8000ad8 <__aeabi_dcmpeq>
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d033      	beq.n	8004232 <_printf_float+0x266>
 80041ca:	4a37      	ldr	r2, [pc, #220]	@ (80042a8 <_printf_float+0x2dc>)
 80041cc:	2301      	movs	r3, #1
 80041ce:	4631      	mov	r1, r6
 80041d0:	4628      	mov	r0, r5
 80041d2:	47b8      	blx	r7
 80041d4:	3001      	adds	r0, #1
 80041d6:	f43f af54 	beq.w	8004082 <_printf_float+0xb6>
 80041da:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80041de:	4543      	cmp	r3, r8
 80041e0:	db02      	blt.n	80041e8 <_printf_float+0x21c>
 80041e2:	6823      	ldr	r3, [r4, #0]
 80041e4:	07d8      	lsls	r0, r3, #31
 80041e6:	d50f      	bpl.n	8004208 <_printf_float+0x23c>
 80041e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041ec:	4631      	mov	r1, r6
 80041ee:	4628      	mov	r0, r5
 80041f0:	47b8      	blx	r7
 80041f2:	3001      	adds	r0, #1
 80041f4:	f43f af45 	beq.w	8004082 <_printf_float+0xb6>
 80041f8:	f04f 0900 	mov.w	r9, #0
 80041fc:	f108 38ff 	add.w	r8, r8, #4294967295
 8004200:	f104 0a1a 	add.w	sl, r4, #26
 8004204:	45c8      	cmp	r8, r9
 8004206:	dc09      	bgt.n	800421c <_printf_float+0x250>
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	079b      	lsls	r3, r3, #30
 800420c:	f100 8103 	bmi.w	8004416 <_printf_float+0x44a>
 8004210:	68e0      	ldr	r0, [r4, #12]
 8004212:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004214:	4298      	cmp	r0, r3
 8004216:	bfb8      	it	lt
 8004218:	4618      	movlt	r0, r3
 800421a:	e734      	b.n	8004086 <_printf_float+0xba>
 800421c:	2301      	movs	r3, #1
 800421e:	4652      	mov	r2, sl
 8004220:	4631      	mov	r1, r6
 8004222:	4628      	mov	r0, r5
 8004224:	47b8      	blx	r7
 8004226:	3001      	adds	r0, #1
 8004228:	f43f af2b 	beq.w	8004082 <_printf_float+0xb6>
 800422c:	f109 0901 	add.w	r9, r9, #1
 8004230:	e7e8      	b.n	8004204 <_printf_float+0x238>
 8004232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	dc39      	bgt.n	80042ac <_printf_float+0x2e0>
 8004238:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <_printf_float+0x2dc>)
 800423a:	2301      	movs	r3, #1
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f af1d 	beq.w	8004082 <_printf_float+0xb6>
 8004248:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800424c:	ea59 0303 	orrs.w	r3, r9, r3
 8004250:	d102      	bne.n	8004258 <_printf_float+0x28c>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07d9      	lsls	r1, r3, #31
 8004256:	d5d7      	bpl.n	8004208 <_printf_float+0x23c>
 8004258:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800425c:	4631      	mov	r1, r6
 800425e:	4628      	mov	r0, r5
 8004260:	47b8      	blx	r7
 8004262:	3001      	adds	r0, #1
 8004264:	f43f af0d 	beq.w	8004082 <_printf_float+0xb6>
 8004268:	f04f 0a00 	mov.w	sl, #0
 800426c:	f104 0b1a 	add.w	fp, r4, #26
 8004270:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004272:	425b      	negs	r3, r3
 8004274:	4553      	cmp	r3, sl
 8004276:	dc01      	bgt.n	800427c <_printf_float+0x2b0>
 8004278:	464b      	mov	r3, r9
 800427a:	e793      	b.n	80041a4 <_printf_float+0x1d8>
 800427c:	2301      	movs	r3, #1
 800427e:	465a      	mov	r2, fp
 8004280:	4631      	mov	r1, r6
 8004282:	4628      	mov	r0, r5
 8004284:	47b8      	blx	r7
 8004286:	3001      	adds	r0, #1
 8004288:	f43f aefb 	beq.w	8004082 <_printf_float+0xb6>
 800428c:	f10a 0a01 	add.w	sl, sl, #1
 8004290:	e7ee      	b.n	8004270 <_printf_float+0x2a4>
 8004292:	bf00      	nop
 8004294:	7fefffff 	.word	0x7fefffff
 8004298:	08006810 	.word	0x08006810
 800429c:	0800680c 	.word	0x0800680c
 80042a0:	08006818 	.word	0x08006818
 80042a4:	08006814 	.word	0x08006814
 80042a8:	0800681c 	.word	0x0800681c
 80042ac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042ae:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042b2:	4553      	cmp	r3, sl
 80042b4:	bfa8      	it	ge
 80042b6:	4653      	movge	r3, sl
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	4699      	mov	r9, r3
 80042bc:	dc36      	bgt.n	800432c <_printf_float+0x360>
 80042be:	f04f 0b00 	mov.w	fp, #0
 80042c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042c6:	f104 021a 	add.w	r2, r4, #26
 80042ca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042cc:	9306      	str	r3, [sp, #24]
 80042ce:	eba3 0309 	sub.w	r3, r3, r9
 80042d2:	455b      	cmp	r3, fp
 80042d4:	dc31      	bgt.n	800433a <_printf_float+0x36e>
 80042d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042d8:	459a      	cmp	sl, r3
 80042da:	dc3a      	bgt.n	8004352 <_printf_float+0x386>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	07da      	lsls	r2, r3, #31
 80042e0:	d437      	bmi.n	8004352 <_printf_float+0x386>
 80042e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042e4:	ebaa 0903 	sub.w	r9, sl, r3
 80042e8:	9b06      	ldr	r3, [sp, #24]
 80042ea:	ebaa 0303 	sub.w	r3, sl, r3
 80042ee:	4599      	cmp	r9, r3
 80042f0:	bfa8      	it	ge
 80042f2:	4699      	movge	r9, r3
 80042f4:	f1b9 0f00 	cmp.w	r9, #0
 80042f8:	dc33      	bgt.n	8004362 <_printf_float+0x396>
 80042fa:	f04f 0800 	mov.w	r8, #0
 80042fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004302:	f104 0b1a 	add.w	fp, r4, #26
 8004306:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004308:	ebaa 0303 	sub.w	r3, sl, r3
 800430c:	eba3 0309 	sub.w	r3, r3, r9
 8004310:	4543      	cmp	r3, r8
 8004312:	f77f af79 	ble.w	8004208 <_printf_float+0x23c>
 8004316:	2301      	movs	r3, #1
 8004318:	465a      	mov	r2, fp
 800431a:	4631      	mov	r1, r6
 800431c:	4628      	mov	r0, r5
 800431e:	47b8      	blx	r7
 8004320:	3001      	adds	r0, #1
 8004322:	f43f aeae 	beq.w	8004082 <_printf_float+0xb6>
 8004326:	f108 0801 	add.w	r8, r8, #1
 800432a:	e7ec      	b.n	8004306 <_printf_float+0x33a>
 800432c:	4642      	mov	r2, r8
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	d1c2      	bne.n	80042be <_printf_float+0x2f2>
 8004338:	e6a3      	b.n	8004082 <_printf_float+0xb6>
 800433a:	2301      	movs	r3, #1
 800433c:	4631      	mov	r1, r6
 800433e:	4628      	mov	r0, r5
 8004340:	9206      	str	r2, [sp, #24]
 8004342:	47b8      	blx	r7
 8004344:	3001      	adds	r0, #1
 8004346:	f43f ae9c 	beq.w	8004082 <_printf_float+0xb6>
 800434a:	9a06      	ldr	r2, [sp, #24]
 800434c:	f10b 0b01 	add.w	fp, fp, #1
 8004350:	e7bb      	b.n	80042ca <_printf_float+0x2fe>
 8004352:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	d1c0      	bne.n	80042e2 <_printf_float+0x316>
 8004360:	e68f      	b.n	8004082 <_printf_float+0xb6>
 8004362:	9a06      	ldr	r2, [sp, #24]
 8004364:	464b      	mov	r3, r9
 8004366:	4442      	add	r2, r8
 8004368:	4631      	mov	r1, r6
 800436a:	4628      	mov	r0, r5
 800436c:	47b8      	blx	r7
 800436e:	3001      	adds	r0, #1
 8004370:	d1c3      	bne.n	80042fa <_printf_float+0x32e>
 8004372:	e686      	b.n	8004082 <_printf_float+0xb6>
 8004374:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004378:	f1ba 0f01 	cmp.w	sl, #1
 800437c:	dc01      	bgt.n	8004382 <_printf_float+0x3b6>
 800437e:	07db      	lsls	r3, r3, #31
 8004380:	d536      	bpl.n	80043f0 <_printf_float+0x424>
 8004382:	2301      	movs	r3, #1
 8004384:	4642      	mov	r2, r8
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	f43f ae78 	beq.w	8004082 <_printf_float+0xb6>
 8004392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004396:	4631      	mov	r1, r6
 8004398:	4628      	mov	r0, r5
 800439a:	47b8      	blx	r7
 800439c:	3001      	adds	r0, #1
 800439e:	f43f ae70 	beq.w	8004082 <_printf_float+0xb6>
 80043a2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043a6:	2200      	movs	r2, #0
 80043a8:	2300      	movs	r3, #0
 80043aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ae:	f7fc fb93 	bl	8000ad8 <__aeabi_dcmpeq>
 80043b2:	b9c0      	cbnz	r0, 80043e6 <_printf_float+0x41a>
 80043b4:	4653      	mov	r3, sl
 80043b6:	f108 0201 	add.w	r2, r8, #1
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	d10c      	bne.n	80043de <_printf_float+0x412>
 80043c4:	e65d      	b.n	8004082 <_printf_float+0xb6>
 80043c6:	2301      	movs	r3, #1
 80043c8:	465a      	mov	r2, fp
 80043ca:	4631      	mov	r1, r6
 80043cc:	4628      	mov	r0, r5
 80043ce:	47b8      	blx	r7
 80043d0:	3001      	adds	r0, #1
 80043d2:	f43f ae56 	beq.w	8004082 <_printf_float+0xb6>
 80043d6:	f108 0801 	add.w	r8, r8, #1
 80043da:	45d0      	cmp	r8, sl
 80043dc:	dbf3      	blt.n	80043c6 <_printf_float+0x3fa>
 80043de:	464b      	mov	r3, r9
 80043e0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80043e4:	e6df      	b.n	80041a6 <_printf_float+0x1da>
 80043e6:	f04f 0800 	mov.w	r8, #0
 80043ea:	f104 0b1a 	add.w	fp, r4, #26
 80043ee:	e7f4      	b.n	80043da <_printf_float+0x40e>
 80043f0:	2301      	movs	r3, #1
 80043f2:	4642      	mov	r2, r8
 80043f4:	e7e1      	b.n	80043ba <_printf_float+0x3ee>
 80043f6:	2301      	movs	r3, #1
 80043f8:	464a      	mov	r2, r9
 80043fa:	4631      	mov	r1, r6
 80043fc:	4628      	mov	r0, r5
 80043fe:	47b8      	blx	r7
 8004400:	3001      	adds	r0, #1
 8004402:	f43f ae3e 	beq.w	8004082 <_printf_float+0xb6>
 8004406:	f108 0801 	add.w	r8, r8, #1
 800440a:	68e3      	ldr	r3, [r4, #12]
 800440c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800440e:	1a5b      	subs	r3, r3, r1
 8004410:	4543      	cmp	r3, r8
 8004412:	dcf0      	bgt.n	80043f6 <_printf_float+0x42a>
 8004414:	e6fc      	b.n	8004210 <_printf_float+0x244>
 8004416:	f04f 0800 	mov.w	r8, #0
 800441a:	f104 0919 	add.w	r9, r4, #25
 800441e:	e7f4      	b.n	800440a <_printf_float+0x43e>

08004420 <_printf_common>:
 8004420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004424:	4616      	mov	r6, r2
 8004426:	4698      	mov	r8, r3
 8004428:	688a      	ldr	r2, [r1, #8]
 800442a:	690b      	ldr	r3, [r1, #16]
 800442c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004430:	4293      	cmp	r3, r2
 8004432:	bfb8      	it	lt
 8004434:	4613      	movlt	r3, r2
 8004436:	6033      	str	r3, [r6, #0]
 8004438:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800443c:	4607      	mov	r7, r0
 800443e:	460c      	mov	r4, r1
 8004440:	b10a      	cbz	r2, 8004446 <_printf_common+0x26>
 8004442:	3301      	adds	r3, #1
 8004444:	6033      	str	r3, [r6, #0]
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	0699      	lsls	r1, r3, #26
 800444a:	bf42      	ittt	mi
 800444c:	6833      	ldrmi	r3, [r6, #0]
 800444e:	3302      	addmi	r3, #2
 8004450:	6033      	strmi	r3, [r6, #0]
 8004452:	6825      	ldr	r5, [r4, #0]
 8004454:	f015 0506 	ands.w	r5, r5, #6
 8004458:	d106      	bne.n	8004468 <_printf_common+0x48>
 800445a:	f104 0a19 	add.w	sl, r4, #25
 800445e:	68e3      	ldr	r3, [r4, #12]
 8004460:	6832      	ldr	r2, [r6, #0]
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	42ab      	cmp	r3, r5
 8004466:	dc26      	bgt.n	80044b6 <_printf_common+0x96>
 8004468:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800446c:	6822      	ldr	r2, [r4, #0]
 800446e:	3b00      	subs	r3, #0
 8004470:	bf18      	it	ne
 8004472:	2301      	movne	r3, #1
 8004474:	0692      	lsls	r2, r2, #26
 8004476:	d42b      	bmi.n	80044d0 <_printf_common+0xb0>
 8004478:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800447c:	4641      	mov	r1, r8
 800447e:	4638      	mov	r0, r7
 8004480:	47c8      	blx	r9
 8004482:	3001      	adds	r0, #1
 8004484:	d01e      	beq.n	80044c4 <_printf_common+0xa4>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	6922      	ldr	r2, [r4, #16]
 800448a:	f003 0306 	and.w	r3, r3, #6
 800448e:	2b04      	cmp	r3, #4
 8004490:	bf02      	ittt	eq
 8004492:	68e5      	ldreq	r5, [r4, #12]
 8004494:	6833      	ldreq	r3, [r6, #0]
 8004496:	1aed      	subeq	r5, r5, r3
 8004498:	68a3      	ldr	r3, [r4, #8]
 800449a:	bf0c      	ite	eq
 800449c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044a0:	2500      	movne	r5, #0
 80044a2:	4293      	cmp	r3, r2
 80044a4:	bfc4      	itt	gt
 80044a6:	1a9b      	subgt	r3, r3, r2
 80044a8:	18ed      	addgt	r5, r5, r3
 80044aa:	2600      	movs	r6, #0
 80044ac:	341a      	adds	r4, #26
 80044ae:	42b5      	cmp	r5, r6
 80044b0:	d11a      	bne.n	80044e8 <_printf_common+0xc8>
 80044b2:	2000      	movs	r0, #0
 80044b4:	e008      	b.n	80044c8 <_printf_common+0xa8>
 80044b6:	2301      	movs	r3, #1
 80044b8:	4652      	mov	r2, sl
 80044ba:	4641      	mov	r1, r8
 80044bc:	4638      	mov	r0, r7
 80044be:	47c8      	blx	r9
 80044c0:	3001      	adds	r0, #1
 80044c2:	d103      	bne.n	80044cc <_printf_common+0xac>
 80044c4:	f04f 30ff 	mov.w	r0, #4294967295
 80044c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044cc:	3501      	adds	r5, #1
 80044ce:	e7c6      	b.n	800445e <_printf_common+0x3e>
 80044d0:	18e1      	adds	r1, r4, r3
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	2030      	movs	r0, #48	@ 0x30
 80044d6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044da:	4422      	add	r2, r4
 80044dc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044e0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044e4:	3302      	adds	r3, #2
 80044e6:	e7c7      	b.n	8004478 <_printf_common+0x58>
 80044e8:	2301      	movs	r3, #1
 80044ea:	4622      	mov	r2, r4
 80044ec:	4641      	mov	r1, r8
 80044ee:	4638      	mov	r0, r7
 80044f0:	47c8      	blx	r9
 80044f2:	3001      	adds	r0, #1
 80044f4:	d0e6      	beq.n	80044c4 <_printf_common+0xa4>
 80044f6:	3601      	adds	r6, #1
 80044f8:	e7d9      	b.n	80044ae <_printf_common+0x8e>
	...

080044fc <_printf_i>:
 80044fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004500:	7e0f      	ldrb	r7, [r1, #24]
 8004502:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004504:	2f78      	cmp	r7, #120	@ 0x78
 8004506:	4691      	mov	r9, r2
 8004508:	4680      	mov	r8, r0
 800450a:	460c      	mov	r4, r1
 800450c:	469a      	mov	sl, r3
 800450e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004512:	d807      	bhi.n	8004524 <_printf_i+0x28>
 8004514:	2f62      	cmp	r7, #98	@ 0x62
 8004516:	d80a      	bhi.n	800452e <_printf_i+0x32>
 8004518:	2f00      	cmp	r7, #0
 800451a:	f000 80d1 	beq.w	80046c0 <_printf_i+0x1c4>
 800451e:	2f58      	cmp	r7, #88	@ 0x58
 8004520:	f000 80b8 	beq.w	8004694 <_printf_i+0x198>
 8004524:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004528:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800452c:	e03a      	b.n	80045a4 <_printf_i+0xa8>
 800452e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004532:	2b15      	cmp	r3, #21
 8004534:	d8f6      	bhi.n	8004524 <_printf_i+0x28>
 8004536:	a101      	add	r1, pc, #4	@ (adr r1, 800453c <_printf_i+0x40>)
 8004538:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800453c:	08004595 	.word	0x08004595
 8004540:	080045a9 	.word	0x080045a9
 8004544:	08004525 	.word	0x08004525
 8004548:	08004525 	.word	0x08004525
 800454c:	08004525 	.word	0x08004525
 8004550:	08004525 	.word	0x08004525
 8004554:	080045a9 	.word	0x080045a9
 8004558:	08004525 	.word	0x08004525
 800455c:	08004525 	.word	0x08004525
 8004560:	08004525 	.word	0x08004525
 8004564:	08004525 	.word	0x08004525
 8004568:	080046a7 	.word	0x080046a7
 800456c:	080045d3 	.word	0x080045d3
 8004570:	08004661 	.word	0x08004661
 8004574:	08004525 	.word	0x08004525
 8004578:	08004525 	.word	0x08004525
 800457c:	080046c9 	.word	0x080046c9
 8004580:	08004525 	.word	0x08004525
 8004584:	080045d3 	.word	0x080045d3
 8004588:	08004525 	.word	0x08004525
 800458c:	08004525 	.word	0x08004525
 8004590:	08004669 	.word	0x08004669
 8004594:	6833      	ldr	r3, [r6, #0]
 8004596:	1d1a      	adds	r2, r3, #4
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6032      	str	r2, [r6, #0]
 800459c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045a4:	2301      	movs	r3, #1
 80045a6:	e09c      	b.n	80046e2 <_printf_i+0x1e6>
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	6820      	ldr	r0, [r4, #0]
 80045ac:	1d19      	adds	r1, r3, #4
 80045ae:	6031      	str	r1, [r6, #0]
 80045b0:	0606      	lsls	r6, r0, #24
 80045b2:	d501      	bpl.n	80045b8 <_printf_i+0xbc>
 80045b4:	681d      	ldr	r5, [r3, #0]
 80045b6:	e003      	b.n	80045c0 <_printf_i+0xc4>
 80045b8:	0645      	lsls	r5, r0, #25
 80045ba:	d5fb      	bpl.n	80045b4 <_printf_i+0xb8>
 80045bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045c0:	2d00      	cmp	r5, #0
 80045c2:	da03      	bge.n	80045cc <_printf_i+0xd0>
 80045c4:	232d      	movs	r3, #45	@ 0x2d
 80045c6:	426d      	negs	r5, r5
 80045c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045cc:	4858      	ldr	r0, [pc, #352]	@ (8004730 <_printf_i+0x234>)
 80045ce:	230a      	movs	r3, #10
 80045d0:	e011      	b.n	80045f6 <_printf_i+0xfa>
 80045d2:	6821      	ldr	r1, [r4, #0]
 80045d4:	6833      	ldr	r3, [r6, #0]
 80045d6:	0608      	lsls	r0, r1, #24
 80045d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80045dc:	d402      	bmi.n	80045e4 <_printf_i+0xe8>
 80045de:	0649      	lsls	r1, r1, #25
 80045e0:	bf48      	it	mi
 80045e2:	b2ad      	uxthmi	r5, r5
 80045e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80045e6:	4852      	ldr	r0, [pc, #328]	@ (8004730 <_printf_i+0x234>)
 80045e8:	6033      	str	r3, [r6, #0]
 80045ea:	bf14      	ite	ne
 80045ec:	230a      	movne	r3, #10
 80045ee:	2308      	moveq	r3, #8
 80045f0:	2100      	movs	r1, #0
 80045f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045f6:	6866      	ldr	r6, [r4, #4]
 80045f8:	60a6      	str	r6, [r4, #8]
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	db05      	blt.n	800460a <_printf_i+0x10e>
 80045fe:	6821      	ldr	r1, [r4, #0]
 8004600:	432e      	orrs	r6, r5
 8004602:	f021 0104 	bic.w	r1, r1, #4
 8004606:	6021      	str	r1, [r4, #0]
 8004608:	d04b      	beq.n	80046a2 <_printf_i+0x1a6>
 800460a:	4616      	mov	r6, r2
 800460c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004610:	fb03 5711 	mls	r7, r3, r1, r5
 8004614:	5dc7      	ldrb	r7, [r0, r7]
 8004616:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800461a:	462f      	mov	r7, r5
 800461c:	42bb      	cmp	r3, r7
 800461e:	460d      	mov	r5, r1
 8004620:	d9f4      	bls.n	800460c <_printf_i+0x110>
 8004622:	2b08      	cmp	r3, #8
 8004624:	d10b      	bne.n	800463e <_printf_i+0x142>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	07df      	lsls	r7, r3, #31
 800462a:	d508      	bpl.n	800463e <_printf_i+0x142>
 800462c:	6923      	ldr	r3, [r4, #16]
 800462e:	6861      	ldr	r1, [r4, #4]
 8004630:	4299      	cmp	r1, r3
 8004632:	bfde      	ittt	le
 8004634:	2330      	movle	r3, #48	@ 0x30
 8004636:	f806 3c01 	strble.w	r3, [r6, #-1]
 800463a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800463e:	1b92      	subs	r2, r2, r6
 8004640:	6122      	str	r2, [r4, #16]
 8004642:	f8cd a000 	str.w	sl, [sp]
 8004646:	464b      	mov	r3, r9
 8004648:	aa03      	add	r2, sp, #12
 800464a:	4621      	mov	r1, r4
 800464c:	4640      	mov	r0, r8
 800464e:	f7ff fee7 	bl	8004420 <_printf_common>
 8004652:	3001      	adds	r0, #1
 8004654:	d14a      	bne.n	80046ec <_printf_i+0x1f0>
 8004656:	f04f 30ff 	mov.w	r0, #4294967295
 800465a:	b004      	add	sp, #16
 800465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	f043 0320 	orr.w	r3, r3, #32
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	4832      	ldr	r0, [pc, #200]	@ (8004734 <_printf_i+0x238>)
 800466a:	2778      	movs	r7, #120	@ 0x78
 800466c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	6831      	ldr	r1, [r6, #0]
 8004674:	061f      	lsls	r7, r3, #24
 8004676:	f851 5b04 	ldr.w	r5, [r1], #4
 800467a:	d402      	bmi.n	8004682 <_printf_i+0x186>
 800467c:	065f      	lsls	r7, r3, #25
 800467e:	bf48      	it	mi
 8004680:	b2ad      	uxthmi	r5, r5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	07d9      	lsls	r1, r3, #31
 8004686:	bf44      	itt	mi
 8004688:	f043 0320 	orrmi.w	r3, r3, #32
 800468c:	6023      	strmi	r3, [r4, #0]
 800468e:	b11d      	cbz	r5, 8004698 <_printf_i+0x19c>
 8004690:	2310      	movs	r3, #16
 8004692:	e7ad      	b.n	80045f0 <_printf_i+0xf4>
 8004694:	4826      	ldr	r0, [pc, #152]	@ (8004730 <_printf_i+0x234>)
 8004696:	e7e9      	b.n	800466c <_printf_i+0x170>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	f023 0320 	bic.w	r3, r3, #32
 800469e:	6023      	str	r3, [r4, #0]
 80046a0:	e7f6      	b.n	8004690 <_printf_i+0x194>
 80046a2:	4616      	mov	r6, r2
 80046a4:	e7bd      	b.n	8004622 <_printf_i+0x126>
 80046a6:	6833      	ldr	r3, [r6, #0]
 80046a8:	6825      	ldr	r5, [r4, #0]
 80046aa:	6961      	ldr	r1, [r4, #20]
 80046ac:	1d18      	adds	r0, r3, #4
 80046ae:	6030      	str	r0, [r6, #0]
 80046b0:	062e      	lsls	r6, r5, #24
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	d501      	bpl.n	80046ba <_printf_i+0x1be>
 80046b6:	6019      	str	r1, [r3, #0]
 80046b8:	e002      	b.n	80046c0 <_printf_i+0x1c4>
 80046ba:	0668      	lsls	r0, r5, #25
 80046bc:	d5fb      	bpl.n	80046b6 <_printf_i+0x1ba>
 80046be:	8019      	strh	r1, [r3, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	6123      	str	r3, [r4, #16]
 80046c4:	4616      	mov	r6, r2
 80046c6:	e7bc      	b.n	8004642 <_printf_i+0x146>
 80046c8:	6833      	ldr	r3, [r6, #0]
 80046ca:	1d1a      	adds	r2, r3, #4
 80046cc:	6032      	str	r2, [r6, #0]
 80046ce:	681e      	ldr	r6, [r3, #0]
 80046d0:	6862      	ldr	r2, [r4, #4]
 80046d2:	2100      	movs	r1, #0
 80046d4:	4630      	mov	r0, r6
 80046d6:	f7fb fd83 	bl	80001e0 <memchr>
 80046da:	b108      	cbz	r0, 80046e0 <_printf_i+0x1e4>
 80046dc:	1b80      	subs	r0, r0, r6
 80046de:	6060      	str	r0, [r4, #4]
 80046e0:	6863      	ldr	r3, [r4, #4]
 80046e2:	6123      	str	r3, [r4, #16]
 80046e4:	2300      	movs	r3, #0
 80046e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046ea:	e7aa      	b.n	8004642 <_printf_i+0x146>
 80046ec:	6923      	ldr	r3, [r4, #16]
 80046ee:	4632      	mov	r2, r6
 80046f0:	4649      	mov	r1, r9
 80046f2:	4640      	mov	r0, r8
 80046f4:	47d0      	blx	sl
 80046f6:	3001      	adds	r0, #1
 80046f8:	d0ad      	beq.n	8004656 <_printf_i+0x15a>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	079b      	lsls	r3, r3, #30
 80046fe:	d413      	bmi.n	8004728 <_printf_i+0x22c>
 8004700:	68e0      	ldr	r0, [r4, #12]
 8004702:	9b03      	ldr	r3, [sp, #12]
 8004704:	4298      	cmp	r0, r3
 8004706:	bfb8      	it	lt
 8004708:	4618      	movlt	r0, r3
 800470a:	e7a6      	b.n	800465a <_printf_i+0x15e>
 800470c:	2301      	movs	r3, #1
 800470e:	4632      	mov	r2, r6
 8004710:	4649      	mov	r1, r9
 8004712:	4640      	mov	r0, r8
 8004714:	47d0      	blx	sl
 8004716:	3001      	adds	r0, #1
 8004718:	d09d      	beq.n	8004656 <_printf_i+0x15a>
 800471a:	3501      	adds	r5, #1
 800471c:	68e3      	ldr	r3, [r4, #12]
 800471e:	9903      	ldr	r1, [sp, #12]
 8004720:	1a5b      	subs	r3, r3, r1
 8004722:	42ab      	cmp	r3, r5
 8004724:	dcf2      	bgt.n	800470c <_printf_i+0x210>
 8004726:	e7eb      	b.n	8004700 <_printf_i+0x204>
 8004728:	2500      	movs	r5, #0
 800472a:	f104 0619 	add.w	r6, r4, #25
 800472e:	e7f5      	b.n	800471c <_printf_i+0x220>
 8004730:	0800681e 	.word	0x0800681e
 8004734:	0800682f 	.word	0x0800682f

08004738 <std>:
 8004738:	2300      	movs	r3, #0
 800473a:	b510      	push	{r4, lr}
 800473c:	4604      	mov	r4, r0
 800473e:	e9c0 3300 	strd	r3, r3, [r0]
 8004742:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004746:	6083      	str	r3, [r0, #8]
 8004748:	8181      	strh	r1, [r0, #12]
 800474a:	6643      	str	r3, [r0, #100]	@ 0x64
 800474c:	81c2      	strh	r2, [r0, #14]
 800474e:	6183      	str	r3, [r0, #24]
 8004750:	4619      	mov	r1, r3
 8004752:	2208      	movs	r2, #8
 8004754:	305c      	adds	r0, #92	@ 0x5c
 8004756:	f000 f906 	bl	8004966 <memset>
 800475a:	4b0d      	ldr	r3, [pc, #52]	@ (8004790 <std+0x58>)
 800475c:	6263      	str	r3, [r4, #36]	@ 0x24
 800475e:	4b0d      	ldr	r3, [pc, #52]	@ (8004794 <std+0x5c>)
 8004760:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004762:	4b0d      	ldr	r3, [pc, #52]	@ (8004798 <std+0x60>)
 8004764:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004766:	4b0d      	ldr	r3, [pc, #52]	@ (800479c <std+0x64>)
 8004768:	6323      	str	r3, [r4, #48]	@ 0x30
 800476a:	4b0d      	ldr	r3, [pc, #52]	@ (80047a0 <std+0x68>)
 800476c:	6224      	str	r4, [r4, #32]
 800476e:	429c      	cmp	r4, r3
 8004770:	d006      	beq.n	8004780 <std+0x48>
 8004772:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004776:	4294      	cmp	r4, r2
 8004778:	d002      	beq.n	8004780 <std+0x48>
 800477a:	33d0      	adds	r3, #208	@ 0xd0
 800477c:	429c      	cmp	r4, r3
 800477e:	d105      	bne.n	800478c <std+0x54>
 8004780:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004788:	f000 b96a 	b.w	8004a60 <__retarget_lock_init_recursive>
 800478c:	bd10      	pop	{r4, pc}
 800478e:	bf00      	nop
 8004790:	080048e1 	.word	0x080048e1
 8004794:	08004903 	.word	0x08004903
 8004798:	0800493b 	.word	0x0800493b
 800479c:	0800495f 	.word	0x0800495f
 80047a0:	200002bc 	.word	0x200002bc

080047a4 <stdio_exit_handler>:
 80047a4:	4a02      	ldr	r2, [pc, #8]	@ (80047b0 <stdio_exit_handler+0xc>)
 80047a6:	4903      	ldr	r1, [pc, #12]	@ (80047b4 <stdio_exit_handler+0x10>)
 80047a8:	4803      	ldr	r0, [pc, #12]	@ (80047b8 <stdio_exit_handler+0x14>)
 80047aa:	f000 b869 	b.w	8004880 <_fwalk_sglue>
 80047ae:	bf00      	nop
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	08006399 	.word	0x08006399
 80047b8:	2000001c 	.word	0x2000001c

080047bc <cleanup_stdio>:
 80047bc:	6841      	ldr	r1, [r0, #4]
 80047be:	4b0c      	ldr	r3, [pc, #48]	@ (80047f0 <cleanup_stdio+0x34>)
 80047c0:	4299      	cmp	r1, r3
 80047c2:	b510      	push	{r4, lr}
 80047c4:	4604      	mov	r4, r0
 80047c6:	d001      	beq.n	80047cc <cleanup_stdio+0x10>
 80047c8:	f001 fde6 	bl	8006398 <_fflush_r>
 80047cc:	68a1      	ldr	r1, [r4, #8]
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <cleanup_stdio+0x38>)
 80047d0:	4299      	cmp	r1, r3
 80047d2:	d002      	beq.n	80047da <cleanup_stdio+0x1e>
 80047d4:	4620      	mov	r0, r4
 80047d6:	f001 fddf 	bl	8006398 <_fflush_r>
 80047da:	68e1      	ldr	r1, [r4, #12]
 80047dc:	4b06      	ldr	r3, [pc, #24]	@ (80047f8 <cleanup_stdio+0x3c>)
 80047de:	4299      	cmp	r1, r3
 80047e0:	d004      	beq.n	80047ec <cleanup_stdio+0x30>
 80047e2:	4620      	mov	r0, r4
 80047e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e8:	f001 bdd6 	b.w	8006398 <_fflush_r>
 80047ec:	bd10      	pop	{r4, pc}
 80047ee:	bf00      	nop
 80047f0:	200002bc 	.word	0x200002bc
 80047f4:	20000324 	.word	0x20000324
 80047f8:	2000038c 	.word	0x2000038c

080047fc <global_stdio_init.part.0>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <global_stdio_init.part.0+0x30>)
 8004800:	4c0b      	ldr	r4, [pc, #44]	@ (8004830 <global_stdio_init.part.0+0x34>)
 8004802:	4a0c      	ldr	r2, [pc, #48]	@ (8004834 <global_stdio_init.part.0+0x38>)
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	4620      	mov	r0, r4
 8004808:	2200      	movs	r2, #0
 800480a:	2104      	movs	r1, #4
 800480c:	f7ff ff94 	bl	8004738 <std>
 8004810:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004814:	2201      	movs	r2, #1
 8004816:	2109      	movs	r1, #9
 8004818:	f7ff ff8e 	bl	8004738 <std>
 800481c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004820:	2202      	movs	r2, #2
 8004822:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004826:	2112      	movs	r1, #18
 8004828:	f7ff bf86 	b.w	8004738 <std>
 800482c:	200003f4 	.word	0x200003f4
 8004830:	200002bc 	.word	0x200002bc
 8004834:	080047a5 	.word	0x080047a5

08004838 <__sfp_lock_acquire>:
 8004838:	4801      	ldr	r0, [pc, #4]	@ (8004840 <__sfp_lock_acquire+0x8>)
 800483a:	f000 b912 	b.w	8004a62 <__retarget_lock_acquire_recursive>
 800483e:	bf00      	nop
 8004840:	200003fd 	.word	0x200003fd

08004844 <__sfp_lock_release>:
 8004844:	4801      	ldr	r0, [pc, #4]	@ (800484c <__sfp_lock_release+0x8>)
 8004846:	f000 b90d 	b.w	8004a64 <__retarget_lock_release_recursive>
 800484a:	bf00      	nop
 800484c:	200003fd 	.word	0x200003fd

08004850 <__sinit>:
 8004850:	b510      	push	{r4, lr}
 8004852:	4604      	mov	r4, r0
 8004854:	f7ff fff0 	bl	8004838 <__sfp_lock_acquire>
 8004858:	6a23      	ldr	r3, [r4, #32]
 800485a:	b11b      	cbz	r3, 8004864 <__sinit+0x14>
 800485c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004860:	f7ff bff0 	b.w	8004844 <__sfp_lock_release>
 8004864:	4b04      	ldr	r3, [pc, #16]	@ (8004878 <__sinit+0x28>)
 8004866:	6223      	str	r3, [r4, #32]
 8004868:	4b04      	ldr	r3, [pc, #16]	@ (800487c <__sinit+0x2c>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d1f5      	bne.n	800485c <__sinit+0xc>
 8004870:	f7ff ffc4 	bl	80047fc <global_stdio_init.part.0>
 8004874:	e7f2      	b.n	800485c <__sinit+0xc>
 8004876:	bf00      	nop
 8004878:	080047bd 	.word	0x080047bd
 800487c:	200003f4 	.word	0x200003f4

08004880 <_fwalk_sglue>:
 8004880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004884:	4607      	mov	r7, r0
 8004886:	4688      	mov	r8, r1
 8004888:	4614      	mov	r4, r2
 800488a:	2600      	movs	r6, #0
 800488c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004890:	f1b9 0901 	subs.w	r9, r9, #1
 8004894:	d505      	bpl.n	80048a2 <_fwalk_sglue+0x22>
 8004896:	6824      	ldr	r4, [r4, #0]
 8004898:	2c00      	cmp	r4, #0
 800489a:	d1f7      	bne.n	800488c <_fwalk_sglue+0xc>
 800489c:	4630      	mov	r0, r6
 800489e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048a2:	89ab      	ldrh	r3, [r5, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d907      	bls.n	80048b8 <_fwalk_sglue+0x38>
 80048a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80048ac:	3301      	adds	r3, #1
 80048ae:	d003      	beq.n	80048b8 <_fwalk_sglue+0x38>
 80048b0:	4629      	mov	r1, r5
 80048b2:	4638      	mov	r0, r7
 80048b4:	47c0      	blx	r8
 80048b6:	4306      	orrs	r6, r0
 80048b8:	3568      	adds	r5, #104	@ 0x68
 80048ba:	e7e9      	b.n	8004890 <_fwalk_sglue+0x10>

080048bc <iprintf>:
 80048bc:	b40f      	push	{r0, r1, r2, r3}
 80048be:	b507      	push	{r0, r1, r2, lr}
 80048c0:	4906      	ldr	r1, [pc, #24]	@ (80048dc <iprintf+0x20>)
 80048c2:	ab04      	add	r3, sp, #16
 80048c4:	6808      	ldr	r0, [r1, #0]
 80048c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80048ca:	6881      	ldr	r1, [r0, #8]
 80048cc:	9301      	str	r3, [sp, #4]
 80048ce:	f001 fbc7 	bl	8006060 <_vfiprintf_r>
 80048d2:	b003      	add	sp, #12
 80048d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80048d8:	b004      	add	sp, #16
 80048da:	4770      	bx	lr
 80048dc:	20000018 	.word	0x20000018

080048e0 <__sread>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	460c      	mov	r4, r1
 80048e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e8:	f000 f86c 	bl	80049c4 <_read_r>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	bfab      	itete	ge
 80048f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80048f2:	89a3      	ldrhlt	r3, [r4, #12]
 80048f4:	181b      	addge	r3, r3, r0
 80048f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80048fa:	bfac      	ite	ge
 80048fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80048fe:	81a3      	strhlt	r3, [r4, #12]
 8004900:	bd10      	pop	{r4, pc}

08004902 <__swrite>:
 8004902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004906:	461f      	mov	r7, r3
 8004908:	898b      	ldrh	r3, [r1, #12]
 800490a:	05db      	lsls	r3, r3, #23
 800490c:	4605      	mov	r5, r0
 800490e:	460c      	mov	r4, r1
 8004910:	4616      	mov	r6, r2
 8004912:	d505      	bpl.n	8004920 <__swrite+0x1e>
 8004914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004918:	2302      	movs	r3, #2
 800491a:	2200      	movs	r2, #0
 800491c:	f000 f840 	bl	80049a0 <_lseek_r>
 8004920:	89a3      	ldrh	r3, [r4, #12]
 8004922:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004926:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800492a:	81a3      	strh	r3, [r4, #12]
 800492c:	4632      	mov	r2, r6
 800492e:	463b      	mov	r3, r7
 8004930:	4628      	mov	r0, r5
 8004932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004936:	f000 b857 	b.w	80049e8 <_write_r>

0800493a <__sseek>:
 800493a:	b510      	push	{r4, lr}
 800493c:	460c      	mov	r4, r1
 800493e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004942:	f000 f82d 	bl	80049a0 <_lseek_r>
 8004946:	1c43      	adds	r3, r0, #1
 8004948:	89a3      	ldrh	r3, [r4, #12]
 800494a:	bf15      	itete	ne
 800494c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800494e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004952:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004956:	81a3      	strheq	r3, [r4, #12]
 8004958:	bf18      	it	ne
 800495a:	81a3      	strhne	r3, [r4, #12]
 800495c:	bd10      	pop	{r4, pc}

0800495e <__sclose>:
 800495e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004962:	f000 b80d 	b.w	8004980 <_close_r>

08004966 <memset>:
 8004966:	4402      	add	r2, r0
 8004968:	4603      	mov	r3, r0
 800496a:	4293      	cmp	r3, r2
 800496c:	d100      	bne.n	8004970 <memset+0xa>
 800496e:	4770      	bx	lr
 8004970:	f803 1b01 	strb.w	r1, [r3], #1
 8004974:	e7f9      	b.n	800496a <memset+0x4>
	...

08004978 <_localeconv_r>:
 8004978:	4800      	ldr	r0, [pc, #0]	@ (800497c <_localeconv_r+0x4>)
 800497a:	4770      	bx	lr
 800497c:	20000158 	.word	0x20000158

08004980 <_close_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4d06      	ldr	r5, [pc, #24]	@ (800499c <_close_r+0x1c>)
 8004984:	2300      	movs	r3, #0
 8004986:	4604      	mov	r4, r0
 8004988:	4608      	mov	r0, r1
 800498a:	602b      	str	r3, [r5, #0]
 800498c:	f7fc ff3d 	bl	800180a <_close>
 8004990:	1c43      	adds	r3, r0, #1
 8004992:	d102      	bne.n	800499a <_close_r+0x1a>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	b103      	cbz	r3, 800499a <_close_r+0x1a>
 8004998:	6023      	str	r3, [r4, #0]
 800499a:	bd38      	pop	{r3, r4, r5, pc}
 800499c:	200003f8 	.word	0x200003f8

080049a0 <_lseek_r>:
 80049a0:	b538      	push	{r3, r4, r5, lr}
 80049a2:	4d07      	ldr	r5, [pc, #28]	@ (80049c0 <_lseek_r+0x20>)
 80049a4:	4604      	mov	r4, r0
 80049a6:	4608      	mov	r0, r1
 80049a8:	4611      	mov	r1, r2
 80049aa:	2200      	movs	r2, #0
 80049ac:	602a      	str	r2, [r5, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f7fc ff52 	bl	8001858 <_lseek>
 80049b4:	1c43      	adds	r3, r0, #1
 80049b6:	d102      	bne.n	80049be <_lseek_r+0x1e>
 80049b8:	682b      	ldr	r3, [r5, #0]
 80049ba:	b103      	cbz	r3, 80049be <_lseek_r+0x1e>
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	bd38      	pop	{r3, r4, r5, pc}
 80049c0:	200003f8 	.word	0x200003f8

080049c4 <_read_r>:
 80049c4:	b538      	push	{r3, r4, r5, lr}
 80049c6:	4d07      	ldr	r5, [pc, #28]	@ (80049e4 <_read_r+0x20>)
 80049c8:	4604      	mov	r4, r0
 80049ca:	4608      	mov	r0, r1
 80049cc:	4611      	mov	r1, r2
 80049ce:	2200      	movs	r2, #0
 80049d0:	602a      	str	r2, [r5, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	f7fc fefc 	bl	80017d0 <_read>
 80049d8:	1c43      	adds	r3, r0, #1
 80049da:	d102      	bne.n	80049e2 <_read_r+0x1e>
 80049dc:	682b      	ldr	r3, [r5, #0]
 80049de:	b103      	cbz	r3, 80049e2 <_read_r+0x1e>
 80049e0:	6023      	str	r3, [r4, #0]
 80049e2:	bd38      	pop	{r3, r4, r5, pc}
 80049e4:	200003f8 	.word	0x200003f8

080049e8 <_write_r>:
 80049e8:	b538      	push	{r3, r4, r5, lr}
 80049ea:	4d07      	ldr	r5, [pc, #28]	@ (8004a08 <_write_r+0x20>)
 80049ec:	4604      	mov	r4, r0
 80049ee:	4608      	mov	r0, r1
 80049f0:	4611      	mov	r1, r2
 80049f2:	2200      	movs	r2, #0
 80049f4:	602a      	str	r2, [r5, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	f7fc fdbe 	bl	8001578 <_write>
 80049fc:	1c43      	adds	r3, r0, #1
 80049fe:	d102      	bne.n	8004a06 <_write_r+0x1e>
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	b103      	cbz	r3, 8004a06 <_write_r+0x1e>
 8004a04:	6023      	str	r3, [r4, #0]
 8004a06:	bd38      	pop	{r3, r4, r5, pc}
 8004a08:	200003f8 	.word	0x200003f8

08004a0c <__errno>:
 8004a0c:	4b01      	ldr	r3, [pc, #4]	@ (8004a14 <__errno+0x8>)
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	20000018 	.word	0x20000018

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	@ (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f001 fec2 	bl	80067b4 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08006b8c 	.word	0x08006b8c
 8004a54:	08006b8c 	.word	0x08006b8c
 8004a58:	08006b8c 	.word	0x08006b8c
 8004a5c:	08006b90 	.word	0x08006b90

08004a60 <__retarget_lock_init_recursive>:
 8004a60:	4770      	bx	lr

08004a62 <__retarget_lock_acquire_recursive>:
 8004a62:	4770      	bx	lr

08004a64 <__retarget_lock_release_recursive>:
 8004a64:	4770      	bx	lr

08004a66 <quorem>:
 8004a66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a6a:	6903      	ldr	r3, [r0, #16]
 8004a6c:	690c      	ldr	r4, [r1, #16]
 8004a6e:	42a3      	cmp	r3, r4
 8004a70:	4607      	mov	r7, r0
 8004a72:	db7e      	blt.n	8004b72 <quorem+0x10c>
 8004a74:	3c01      	subs	r4, #1
 8004a76:	f101 0814 	add.w	r8, r1, #20
 8004a7a:	00a3      	lsls	r3, r4, #2
 8004a7c:	f100 0514 	add.w	r5, r0, #20
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a90:	3301      	adds	r3, #1
 8004a92:	429a      	cmp	r2, r3
 8004a94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a98:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a9c:	d32e      	bcc.n	8004afc <quorem+0x96>
 8004a9e:	f04f 0a00 	mov.w	sl, #0
 8004aa2:	46c4      	mov	ip, r8
 8004aa4:	46ae      	mov	lr, r5
 8004aa6:	46d3      	mov	fp, sl
 8004aa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004aac:	b298      	uxth	r0, r3
 8004aae:	fb06 a000 	mla	r0, r6, r0, sl
 8004ab2:	0c02      	lsrs	r2, r0, #16
 8004ab4:	0c1b      	lsrs	r3, r3, #16
 8004ab6:	fb06 2303 	mla	r3, r6, r3, r2
 8004aba:	f8de 2000 	ldr.w	r2, [lr]
 8004abe:	b280      	uxth	r0, r0
 8004ac0:	b292      	uxth	r2, r2
 8004ac2:	1a12      	subs	r2, r2, r0
 8004ac4:	445a      	add	r2, fp
 8004ac6:	f8de 0000 	ldr.w	r0, [lr]
 8004aca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ad4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004ad8:	b292      	uxth	r2, r2
 8004ada:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004ade:	45e1      	cmp	r9, ip
 8004ae0:	f84e 2b04 	str.w	r2, [lr], #4
 8004ae4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004ae8:	d2de      	bcs.n	8004aa8 <quorem+0x42>
 8004aea:	9b00      	ldr	r3, [sp, #0]
 8004aec:	58eb      	ldr	r3, [r5, r3]
 8004aee:	b92b      	cbnz	r3, 8004afc <quorem+0x96>
 8004af0:	9b01      	ldr	r3, [sp, #4]
 8004af2:	3b04      	subs	r3, #4
 8004af4:	429d      	cmp	r5, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	d32f      	bcc.n	8004b5a <quorem+0xf4>
 8004afa:	613c      	str	r4, [r7, #16]
 8004afc:	4638      	mov	r0, r7
 8004afe:	f001 f97d 	bl	8005dfc <__mcmp>
 8004b02:	2800      	cmp	r0, #0
 8004b04:	db25      	blt.n	8004b52 <quorem+0xec>
 8004b06:	4629      	mov	r1, r5
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f858 2b04 	ldr.w	r2, [r8], #4
 8004b0e:	f8d1 c000 	ldr.w	ip, [r1]
 8004b12:	fa1f fe82 	uxth.w	lr, r2
 8004b16:	fa1f f38c 	uxth.w	r3, ip
 8004b1a:	eba3 030e 	sub.w	r3, r3, lr
 8004b1e:	4403      	add	r3, r0
 8004b20:	0c12      	lsrs	r2, r2, #16
 8004b22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004b26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b30:	45c1      	cmp	r9, r8
 8004b32:	f841 3b04 	str.w	r3, [r1], #4
 8004b36:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b3a:	d2e6      	bcs.n	8004b0a <quorem+0xa4>
 8004b3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b44:	b922      	cbnz	r2, 8004b50 <quorem+0xea>
 8004b46:	3b04      	subs	r3, #4
 8004b48:	429d      	cmp	r5, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	d30b      	bcc.n	8004b66 <quorem+0x100>
 8004b4e:	613c      	str	r4, [r7, #16]
 8004b50:	3601      	adds	r6, #1
 8004b52:	4630      	mov	r0, r6
 8004b54:	b003      	add	sp, #12
 8004b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5a:	6812      	ldr	r2, [r2, #0]
 8004b5c:	3b04      	subs	r3, #4
 8004b5e:	2a00      	cmp	r2, #0
 8004b60:	d1cb      	bne.n	8004afa <quorem+0x94>
 8004b62:	3c01      	subs	r4, #1
 8004b64:	e7c6      	b.n	8004af4 <quorem+0x8e>
 8004b66:	6812      	ldr	r2, [r2, #0]
 8004b68:	3b04      	subs	r3, #4
 8004b6a:	2a00      	cmp	r2, #0
 8004b6c:	d1ef      	bne.n	8004b4e <quorem+0xe8>
 8004b6e:	3c01      	subs	r4, #1
 8004b70:	e7ea      	b.n	8004b48 <quorem+0xe2>
 8004b72:	2000      	movs	r0, #0
 8004b74:	e7ee      	b.n	8004b54 <quorem+0xee>
	...

08004b78 <_dtoa_r>:
 8004b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b7c:	69c7      	ldr	r7, [r0, #28]
 8004b7e:	b097      	sub	sp, #92	@ 0x5c
 8004b80:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004b84:	ec55 4b10 	vmov	r4, r5, d0
 8004b88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004b8a:	9107      	str	r1, [sp, #28]
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004b90:	9311      	str	r3, [sp, #68]	@ 0x44
 8004b92:	b97f      	cbnz	r7, 8004bb4 <_dtoa_r+0x3c>
 8004b94:	2010      	movs	r0, #16
 8004b96:	f000 fe09 	bl	80057ac <malloc>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004ba0:	b920      	cbnz	r0, 8004bac <_dtoa_r+0x34>
 8004ba2:	4ba9      	ldr	r3, [pc, #676]	@ (8004e48 <_dtoa_r+0x2d0>)
 8004ba4:	21ef      	movs	r1, #239	@ 0xef
 8004ba6:	48a9      	ldr	r0, [pc, #676]	@ (8004e4c <_dtoa_r+0x2d4>)
 8004ba8:	f001 fcd0 	bl	800654c <__assert_func>
 8004bac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004bb0:	6007      	str	r7, [r0, #0]
 8004bb2:	60c7      	str	r7, [r0, #12]
 8004bb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	b159      	cbz	r1, 8004bd4 <_dtoa_r+0x5c>
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	604a      	str	r2, [r1, #4]
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	4093      	lsls	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
 8004bc6:	4648      	mov	r0, r9
 8004bc8:	f000 fee6 	bl	8005998 <_Bfree>
 8004bcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	1e2b      	subs	r3, r5, #0
 8004bd6:	bfb9      	ittee	lt
 8004bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004bdc:	9305      	strlt	r3, [sp, #20]
 8004bde:	2300      	movge	r3, #0
 8004be0:	6033      	strge	r3, [r6, #0]
 8004be2:	9f05      	ldr	r7, [sp, #20]
 8004be4:	4b9a      	ldr	r3, [pc, #616]	@ (8004e50 <_dtoa_r+0x2d8>)
 8004be6:	bfbc      	itt	lt
 8004be8:	2201      	movlt	r2, #1
 8004bea:	6032      	strlt	r2, [r6, #0]
 8004bec:	43bb      	bics	r3, r7
 8004bee:	d112      	bne.n	8004c16 <_dtoa_r+0x9e>
 8004bf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004bf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004bf6:	6013      	str	r3, [r2, #0]
 8004bf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004bfc:	4323      	orrs	r3, r4
 8004bfe:	f000 855a 	beq.w	80056b6 <_dtoa_r+0xb3e>
 8004c02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004e64 <_dtoa_r+0x2ec>
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 855c 	beq.w	80056c6 <_dtoa_r+0xb4e>
 8004c0e:	f10a 0303 	add.w	r3, sl, #3
 8004c12:	f000 bd56 	b.w	80056c2 <_dtoa_r+0xb4a>
 8004c16:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	ec51 0b17 	vmov	r0, r1, d7
 8004c20:	2300      	movs	r3, #0
 8004c22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004c26:	f7fb ff57 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c2a:	4680      	mov	r8, r0
 8004c2c:	b158      	cbz	r0, 8004c46 <_dtoa_r+0xce>
 8004c2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004c30:	2301      	movs	r3, #1
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004c36:	b113      	cbz	r3, 8004c3e <_dtoa_r+0xc6>
 8004c38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004c3a:	4b86      	ldr	r3, [pc, #536]	@ (8004e54 <_dtoa_r+0x2dc>)
 8004c3c:	6013      	str	r3, [r2, #0]
 8004c3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004e68 <_dtoa_r+0x2f0>
 8004c42:	f000 bd40 	b.w	80056c6 <_dtoa_r+0xb4e>
 8004c46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004c4a:	aa14      	add	r2, sp, #80	@ 0x50
 8004c4c:	a915      	add	r1, sp, #84	@ 0x54
 8004c4e:	4648      	mov	r0, r9
 8004c50:	f001 f984 	bl	8005f5c <__d2b>
 8004c54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004c58:	9002      	str	r0, [sp, #8]
 8004c5a:	2e00      	cmp	r6, #0
 8004c5c:	d078      	beq.n	8004d50 <_dtoa_r+0x1d8>
 8004c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004c60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004c6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004c70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004c74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004c78:	4619      	mov	r1, r3
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	4b76      	ldr	r3, [pc, #472]	@ (8004e58 <_dtoa_r+0x2e0>)
 8004c7e:	f7fb fb0b 	bl	8000298 <__aeabi_dsub>
 8004c82:	a36b      	add	r3, pc, #428	@ (adr r3, 8004e30 <_dtoa_r+0x2b8>)
 8004c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c88:	f7fb fcbe 	bl	8000608 <__aeabi_dmul>
 8004c8c:	a36a      	add	r3, pc, #424	@ (adr r3, 8004e38 <_dtoa_r+0x2c0>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	f7fb fb03 	bl	800029c <__adddf3>
 8004c96:	4604      	mov	r4, r0
 8004c98:	4630      	mov	r0, r6
 8004c9a:	460d      	mov	r5, r1
 8004c9c:	f7fb fc4a 	bl	8000534 <__aeabi_i2d>
 8004ca0:	a367      	add	r3, pc, #412	@ (adr r3, 8004e40 <_dtoa_r+0x2c8>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb fcaf 	bl	8000608 <__aeabi_dmul>
 8004caa:	4602      	mov	r2, r0
 8004cac:	460b      	mov	r3, r1
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7fb faf3 	bl	800029c <__adddf3>
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	460d      	mov	r5, r1
 8004cba:	f7fb ff55 	bl	8000b68 <__aeabi_d2iz>
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	4629      	mov	r1, r5
 8004cc8:	f7fb ff10 	bl	8000aec <__aeabi_dcmplt>
 8004ccc:	b140      	cbz	r0, 8004ce0 <_dtoa_r+0x168>
 8004cce:	4638      	mov	r0, r7
 8004cd0:	f7fb fc30 	bl	8000534 <__aeabi_i2d>
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	f7fb fefe 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cdc:	b900      	cbnz	r0, 8004ce0 <_dtoa_r+0x168>
 8004cde:	3f01      	subs	r7, #1
 8004ce0:	2f16      	cmp	r7, #22
 8004ce2:	d852      	bhi.n	8004d8a <_dtoa_r+0x212>
 8004ce4:	4b5d      	ldr	r3, [pc, #372]	@ (8004e5c <_dtoa_r+0x2e4>)
 8004ce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004cf2:	f7fb fefb 	bl	8000aec <__aeabi_dcmplt>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d049      	beq.n	8004d8e <_dtoa_r+0x216>
 8004cfa:	3f01      	subs	r7, #1
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8004d00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004d02:	1b9b      	subs	r3, r3, r6
 8004d04:	1e5a      	subs	r2, r3, #1
 8004d06:	bf45      	ittet	mi
 8004d08:	f1c3 0301 	rsbmi	r3, r3, #1
 8004d0c:	9300      	strmi	r3, [sp, #0]
 8004d0e:	2300      	movpl	r3, #0
 8004d10:	2300      	movmi	r3, #0
 8004d12:	9206      	str	r2, [sp, #24]
 8004d14:	bf54      	ite	pl
 8004d16:	9300      	strpl	r3, [sp, #0]
 8004d18:	9306      	strmi	r3, [sp, #24]
 8004d1a:	2f00      	cmp	r7, #0
 8004d1c:	db39      	blt.n	8004d92 <_dtoa_r+0x21a>
 8004d1e:	9b06      	ldr	r3, [sp, #24]
 8004d20:	970d      	str	r7, [sp, #52]	@ 0x34
 8004d22:	443b      	add	r3, r7
 8004d24:	9306      	str	r3, [sp, #24]
 8004d26:	2300      	movs	r3, #0
 8004d28:	9308      	str	r3, [sp, #32]
 8004d2a:	9b07      	ldr	r3, [sp, #28]
 8004d2c:	2b09      	cmp	r3, #9
 8004d2e:	d863      	bhi.n	8004df8 <_dtoa_r+0x280>
 8004d30:	2b05      	cmp	r3, #5
 8004d32:	bfc4      	itt	gt
 8004d34:	3b04      	subgt	r3, #4
 8004d36:	9307      	strgt	r3, [sp, #28]
 8004d38:	9b07      	ldr	r3, [sp, #28]
 8004d3a:	f1a3 0302 	sub.w	r3, r3, #2
 8004d3e:	bfcc      	ite	gt
 8004d40:	2400      	movgt	r4, #0
 8004d42:	2401      	movle	r4, #1
 8004d44:	2b03      	cmp	r3, #3
 8004d46:	d863      	bhi.n	8004e10 <_dtoa_r+0x298>
 8004d48:	e8df f003 	tbb	[pc, r3]
 8004d4c:	2b375452 	.word	0x2b375452
 8004d50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004d54:	441e      	add	r6, r3
 8004d56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	bfc1      	itttt	gt
 8004d5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004d62:	409f      	lslgt	r7, r3
 8004d64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004d68:	fa24 f303 	lsrgt.w	r3, r4, r3
 8004d6c:	bfd6      	itet	le
 8004d6e:	f1c3 0320 	rsble	r3, r3, #32
 8004d72:	ea47 0003 	orrgt.w	r0, r7, r3
 8004d76:	fa04 f003 	lslle.w	r0, r4, r3
 8004d7a:	f7fb fbcb 	bl	8000514 <__aeabi_ui2d>
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004d84:	3e01      	subs	r6, #1
 8004d86:	9212      	str	r2, [sp, #72]	@ 0x48
 8004d88:	e776      	b.n	8004c78 <_dtoa_r+0x100>
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e7b7      	b.n	8004cfe <_dtoa_r+0x186>
 8004d8e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004d90:	e7b6      	b.n	8004d00 <_dtoa_r+0x188>
 8004d92:	9b00      	ldr	r3, [sp, #0]
 8004d94:	1bdb      	subs	r3, r3, r7
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	427b      	negs	r3, r7
 8004d9a:	9308      	str	r3, [sp, #32]
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004da0:	e7c3      	b.n	8004d2a <_dtoa_r+0x1b2>
 8004da2:	2301      	movs	r3, #1
 8004da4:	9309      	str	r3, [sp, #36]	@ 0x24
 8004da6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004da8:	eb07 0b03 	add.w	fp, r7, r3
 8004dac:	f10b 0301 	add.w	r3, fp, #1
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	9303      	str	r3, [sp, #12]
 8004db4:	bfb8      	it	lt
 8004db6:	2301      	movlt	r3, #1
 8004db8:	e006      	b.n	8004dc8 <_dtoa_r+0x250>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dd28      	ble.n	8004e16 <_dtoa_r+0x29e>
 8004dc4:	469b      	mov	fp, r3
 8004dc6:	9303      	str	r3, [sp, #12]
 8004dc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8004dcc:	2100      	movs	r1, #0
 8004dce:	2204      	movs	r2, #4
 8004dd0:	f102 0514 	add.w	r5, r2, #20
 8004dd4:	429d      	cmp	r5, r3
 8004dd6:	d926      	bls.n	8004e26 <_dtoa_r+0x2ae>
 8004dd8:	6041      	str	r1, [r0, #4]
 8004dda:	4648      	mov	r0, r9
 8004ddc:	f000 fd9c 	bl	8005918 <_Balloc>
 8004de0:	4682      	mov	sl, r0
 8004de2:	2800      	cmp	r0, #0
 8004de4:	d142      	bne.n	8004e6c <_dtoa_r+0x2f4>
 8004de6:	4b1e      	ldr	r3, [pc, #120]	@ (8004e60 <_dtoa_r+0x2e8>)
 8004de8:	4602      	mov	r2, r0
 8004dea:	f240 11af 	movw	r1, #431	@ 0x1af
 8004dee:	e6da      	b.n	8004ba6 <_dtoa_r+0x2e>
 8004df0:	2300      	movs	r3, #0
 8004df2:	e7e3      	b.n	8004dbc <_dtoa_r+0x244>
 8004df4:	2300      	movs	r3, #0
 8004df6:	e7d5      	b.n	8004da4 <_dtoa_r+0x22c>
 8004df8:	2401      	movs	r4, #1
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	9307      	str	r3, [sp, #28]
 8004dfe:	9409      	str	r4, [sp, #36]	@ 0x24
 8004e00:	f04f 3bff 	mov.w	fp, #4294967295
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8cd b00c 	str.w	fp, [sp, #12]
 8004e0a:	2312      	movs	r3, #18
 8004e0c:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e0e:	e7db      	b.n	8004dc8 <_dtoa_r+0x250>
 8004e10:	2301      	movs	r3, #1
 8004e12:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e14:	e7f4      	b.n	8004e00 <_dtoa_r+0x288>
 8004e16:	f04f 0b01 	mov.w	fp, #1
 8004e1a:	f8cd b00c 	str.w	fp, [sp, #12]
 8004e1e:	465b      	mov	r3, fp
 8004e20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8004e24:	e7d0      	b.n	8004dc8 <_dtoa_r+0x250>
 8004e26:	3101      	adds	r1, #1
 8004e28:	0052      	lsls	r2, r2, #1
 8004e2a:	e7d1      	b.n	8004dd0 <_dtoa_r+0x258>
 8004e2c:	f3af 8000 	nop.w
 8004e30:	636f4361 	.word	0x636f4361
 8004e34:	3fd287a7 	.word	0x3fd287a7
 8004e38:	8b60c8b3 	.word	0x8b60c8b3
 8004e3c:	3fc68a28 	.word	0x3fc68a28
 8004e40:	509f79fb 	.word	0x509f79fb
 8004e44:	3fd34413 	.word	0x3fd34413
 8004e48:	0800684d 	.word	0x0800684d
 8004e4c:	08006864 	.word	0x08006864
 8004e50:	7ff00000 	.word	0x7ff00000
 8004e54:	0800681d 	.word	0x0800681d
 8004e58:	3ff80000 	.word	0x3ff80000
 8004e5c:	080069b8 	.word	0x080069b8
 8004e60:	080068bc 	.word	0x080068bc
 8004e64:	08006849 	.word	0x08006849
 8004e68:	0800681c 	.word	0x0800681c
 8004e6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e70:	6018      	str	r0, [r3, #0]
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	2b0e      	cmp	r3, #14
 8004e76:	f200 80a1 	bhi.w	8004fbc <_dtoa_r+0x444>
 8004e7a:	2c00      	cmp	r4, #0
 8004e7c:	f000 809e 	beq.w	8004fbc <_dtoa_r+0x444>
 8004e80:	2f00      	cmp	r7, #0
 8004e82:	dd33      	ble.n	8004eec <_dtoa_r+0x374>
 8004e84:	4b9c      	ldr	r3, [pc, #624]	@ (80050f8 <_dtoa_r+0x580>)
 8004e86:	f007 020f 	and.w	r2, r7, #15
 8004e8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e8e:	ed93 7b00 	vldr	d7, [r3]
 8004e92:	05f8      	lsls	r0, r7, #23
 8004e94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004e98:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004e9c:	d516      	bpl.n	8004ecc <_dtoa_r+0x354>
 8004e9e:	4b97      	ldr	r3, [pc, #604]	@ (80050fc <_dtoa_r+0x584>)
 8004ea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ea8:	f7fb fcd8 	bl	800085c <__aeabi_ddiv>
 8004eac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eb0:	f004 040f 	and.w	r4, r4, #15
 8004eb4:	2603      	movs	r6, #3
 8004eb6:	4d91      	ldr	r5, [pc, #580]	@ (80050fc <_dtoa_r+0x584>)
 8004eb8:	b954      	cbnz	r4, 8004ed0 <_dtoa_r+0x358>
 8004eba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ec2:	f7fb fccb 	bl	800085c <__aeabi_ddiv>
 8004ec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eca:	e028      	b.n	8004f1e <_dtoa_r+0x3a6>
 8004ecc:	2602      	movs	r6, #2
 8004ece:	e7f2      	b.n	8004eb6 <_dtoa_r+0x33e>
 8004ed0:	07e1      	lsls	r1, r4, #31
 8004ed2:	d508      	bpl.n	8004ee6 <_dtoa_r+0x36e>
 8004ed4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004ed8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004edc:	f7fb fb94 	bl	8000608 <__aeabi_dmul>
 8004ee0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ee4:	3601      	adds	r6, #1
 8004ee6:	1064      	asrs	r4, r4, #1
 8004ee8:	3508      	adds	r5, #8
 8004eea:	e7e5      	b.n	8004eb8 <_dtoa_r+0x340>
 8004eec:	f000 80af 	beq.w	800504e <_dtoa_r+0x4d6>
 8004ef0:	427c      	negs	r4, r7
 8004ef2:	4b81      	ldr	r3, [pc, #516]	@ (80050f8 <_dtoa_r+0x580>)
 8004ef4:	4d81      	ldr	r5, [pc, #516]	@ (80050fc <_dtoa_r+0x584>)
 8004ef6:	f004 020f 	and.w	r2, r4, #15
 8004efa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f06:	f7fb fb7f 	bl	8000608 <__aeabi_dmul>
 8004f0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f0e:	1124      	asrs	r4, r4, #4
 8004f10:	2300      	movs	r3, #0
 8004f12:	2602      	movs	r6, #2
 8004f14:	2c00      	cmp	r4, #0
 8004f16:	f040 808f 	bne.w	8005038 <_dtoa_r+0x4c0>
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1d3      	bne.n	8004ec6 <_dtoa_r+0x34e>
 8004f1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8094 	beq.w	8005052 <_dtoa_r+0x4da>
 8004f2a:	4b75      	ldr	r3, [pc, #468]	@ (8005100 <_dtoa_r+0x588>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	4620      	mov	r0, r4
 8004f30:	4629      	mov	r1, r5
 8004f32:	f7fb fddb 	bl	8000aec <__aeabi_dcmplt>
 8004f36:	2800      	cmp	r0, #0
 8004f38:	f000 808b 	beq.w	8005052 <_dtoa_r+0x4da>
 8004f3c:	9b03      	ldr	r3, [sp, #12]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f000 8087 	beq.w	8005052 <_dtoa_r+0x4da>
 8004f44:	f1bb 0f00 	cmp.w	fp, #0
 8004f48:	dd34      	ble.n	8004fb4 <_dtoa_r+0x43c>
 8004f4a:	4620      	mov	r0, r4
 8004f4c:	4b6d      	ldr	r3, [pc, #436]	@ (8005104 <_dtoa_r+0x58c>)
 8004f4e:	2200      	movs	r2, #0
 8004f50:	4629      	mov	r1, r5
 8004f52:	f7fb fb59 	bl	8000608 <__aeabi_dmul>
 8004f56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f5a:	f107 38ff 	add.w	r8, r7, #4294967295
 8004f5e:	3601      	adds	r6, #1
 8004f60:	465c      	mov	r4, fp
 8004f62:	4630      	mov	r0, r6
 8004f64:	f7fb fae6 	bl	8000534 <__aeabi_i2d>
 8004f68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f6c:	f7fb fb4c 	bl	8000608 <__aeabi_dmul>
 8004f70:	4b65      	ldr	r3, [pc, #404]	@ (8005108 <_dtoa_r+0x590>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	f7fb f992 	bl	800029c <__adddf3>
 8004f78:	4605      	mov	r5, r0
 8004f7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004f7e:	2c00      	cmp	r4, #0
 8004f80:	d16a      	bne.n	8005058 <_dtoa_r+0x4e0>
 8004f82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f86:	4b61      	ldr	r3, [pc, #388]	@ (800510c <_dtoa_r+0x594>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f7fb f985 	bl	8000298 <__aeabi_dsub>
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004f96:	462a      	mov	r2, r5
 8004f98:	4633      	mov	r3, r6
 8004f9a:	f7fb fdc5 	bl	8000b28 <__aeabi_dcmpgt>
 8004f9e:	2800      	cmp	r0, #0
 8004fa0:	f040 8298 	bne.w	80054d4 <_dtoa_r+0x95c>
 8004fa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fa8:	462a      	mov	r2, r5
 8004faa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004fae:	f7fb fd9d 	bl	8000aec <__aeabi_dcmplt>
 8004fb2:	bb38      	cbnz	r0, 8005004 <_dtoa_r+0x48c>
 8004fb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004fb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f2c0 8157 	blt.w	8005272 <_dtoa_r+0x6fa>
 8004fc4:	2f0e      	cmp	r7, #14
 8004fc6:	f300 8154 	bgt.w	8005272 <_dtoa_r+0x6fa>
 8004fca:	4b4b      	ldr	r3, [pc, #300]	@ (80050f8 <_dtoa_r+0x580>)
 8004fcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004fd0:	ed93 7b00 	vldr	d7, [r3]
 8004fd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	ed8d 7b00 	vstr	d7, [sp]
 8004fdc:	f280 80e5 	bge.w	80051aa <_dtoa_r+0x632>
 8004fe0:	9b03      	ldr	r3, [sp, #12]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f300 80e1 	bgt.w	80051aa <_dtoa_r+0x632>
 8004fe8:	d10c      	bne.n	8005004 <_dtoa_r+0x48c>
 8004fea:	4b48      	ldr	r3, [pc, #288]	@ (800510c <_dtoa_r+0x594>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	ec51 0b17 	vmov	r0, r1, d7
 8004ff2:	f7fb fb09 	bl	8000608 <__aeabi_dmul>
 8004ff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ffa:	f7fb fd8b 	bl	8000b14 <__aeabi_dcmpge>
 8004ffe:	2800      	cmp	r0, #0
 8005000:	f000 8266 	beq.w	80054d0 <_dtoa_r+0x958>
 8005004:	2400      	movs	r4, #0
 8005006:	4625      	mov	r5, r4
 8005008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800500a:	4656      	mov	r6, sl
 800500c:	ea6f 0803 	mvn.w	r8, r3
 8005010:	2700      	movs	r7, #0
 8005012:	4621      	mov	r1, r4
 8005014:	4648      	mov	r0, r9
 8005016:	f000 fcbf 	bl	8005998 <_Bfree>
 800501a:	2d00      	cmp	r5, #0
 800501c:	f000 80bd 	beq.w	800519a <_dtoa_r+0x622>
 8005020:	b12f      	cbz	r7, 800502e <_dtoa_r+0x4b6>
 8005022:	42af      	cmp	r7, r5
 8005024:	d003      	beq.n	800502e <_dtoa_r+0x4b6>
 8005026:	4639      	mov	r1, r7
 8005028:	4648      	mov	r0, r9
 800502a:	f000 fcb5 	bl	8005998 <_Bfree>
 800502e:	4629      	mov	r1, r5
 8005030:	4648      	mov	r0, r9
 8005032:	f000 fcb1 	bl	8005998 <_Bfree>
 8005036:	e0b0      	b.n	800519a <_dtoa_r+0x622>
 8005038:	07e2      	lsls	r2, r4, #31
 800503a:	d505      	bpl.n	8005048 <_dtoa_r+0x4d0>
 800503c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005040:	f7fb fae2 	bl	8000608 <__aeabi_dmul>
 8005044:	3601      	adds	r6, #1
 8005046:	2301      	movs	r3, #1
 8005048:	1064      	asrs	r4, r4, #1
 800504a:	3508      	adds	r5, #8
 800504c:	e762      	b.n	8004f14 <_dtoa_r+0x39c>
 800504e:	2602      	movs	r6, #2
 8005050:	e765      	b.n	8004f1e <_dtoa_r+0x3a6>
 8005052:	9c03      	ldr	r4, [sp, #12]
 8005054:	46b8      	mov	r8, r7
 8005056:	e784      	b.n	8004f62 <_dtoa_r+0x3ea>
 8005058:	4b27      	ldr	r3, [pc, #156]	@ (80050f8 <_dtoa_r+0x580>)
 800505a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800505c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005064:	4454      	add	r4, sl
 8005066:	2900      	cmp	r1, #0
 8005068:	d054      	beq.n	8005114 <_dtoa_r+0x59c>
 800506a:	4929      	ldr	r1, [pc, #164]	@ (8005110 <_dtoa_r+0x598>)
 800506c:	2000      	movs	r0, #0
 800506e:	f7fb fbf5 	bl	800085c <__aeabi_ddiv>
 8005072:	4633      	mov	r3, r6
 8005074:	462a      	mov	r2, r5
 8005076:	f7fb f90f 	bl	8000298 <__aeabi_dsub>
 800507a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800507e:	4656      	mov	r6, sl
 8005080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005084:	f7fb fd70 	bl	8000b68 <__aeabi_d2iz>
 8005088:	4605      	mov	r5, r0
 800508a:	f7fb fa53 	bl	8000534 <__aeabi_i2d>
 800508e:	4602      	mov	r2, r0
 8005090:	460b      	mov	r3, r1
 8005092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005096:	f7fb f8ff 	bl	8000298 <__aeabi_dsub>
 800509a:	3530      	adds	r5, #48	@ 0x30
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050a4:	f806 5b01 	strb.w	r5, [r6], #1
 80050a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80050ac:	f7fb fd1e 	bl	8000aec <__aeabi_dcmplt>
 80050b0:	2800      	cmp	r0, #0
 80050b2:	d172      	bne.n	800519a <_dtoa_r+0x622>
 80050b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b8:	4911      	ldr	r1, [pc, #68]	@ (8005100 <_dtoa_r+0x588>)
 80050ba:	2000      	movs	r0, #0
 80050bc:	f7fb f8ec 	bl	8000298 <__aeabi_dsub>
 80050c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80050c4:	f7fb fd12 	bl	8000aec <__aeabi_dcmplt>
 80050c8:	2800      	cmp	r0, #0
 80050ca:	f040 80b4 	bne.w	8005236 <_dtoa_r+0x6be>
 80050ce:	42a6      	cmp	r6, r4
 80050d0:	f43f af70 	beq.w	8004fb4 <_dtoa_r+0x43c>
 80050d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80050d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <_dtoa_r+0x58c>)
 80050da:	2200      	movs	r2, #0
 80050dc:	f7fb fa94 	bl	8000608 <__aeabi_dmul>
 80050e0:	4b08      	ldr	r3, [pc, #32]	@ (8005104 <_dtoa_r+0x58c>)
 80050e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80050e6:	2200      	movs	r2, #0
 80050e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ec:	f7fb fa8c 	bl	8000608 <__aeabi_dmul>
 80050f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f4:	e7c4      	b.n	8005080 <_dtoa_r+0x508>
 80050f6:	bf00      	nop
 80050f8:	080069b8 	.word	0x080069b8
 80050fc:	08006990 	.word	0x08006990
 8005100:	3ff00000 	.word	0x3ff00000
 8005104:	40240000 	.word	0x40240000
 8005108:	401c0000 	.word	0x401c0000
 800510c:	40140000 	.word	0x40140000
 8005110:	3fe00000 	.word	0x3fe00000
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	f7fb fa76 	bl	8000608 <__aeabi_dmul>
 800511c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005120:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005122:	4656      	mov	r6, sl
 8005124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005128:	f7fb fd1e 	bl	8000b68 <__aeabi_d2iz>
 800512c:	4605      	mov	r5, r0
 800512e:	f7fb fa01 	bl	8000534 <__aeabi_i2d>
 8005132:	4602      	mov	r2, r0
 8005134:	460b      	mov	r3, r1
 8005136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800513a:	f7fb f8ad 	bl	8000298 <__aeabi_dsub>
 800513e:	3530      	adds	r5, #48	@ 0x30
 8005140:	f806 5b01 	strb.w	r5, [r6], #1
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	42a6      	cmp	r6, r4
 800514a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	d124      	bne.n	800519e <_dtoa_r+0x626>
 8005154:	4baf      	ldr	r3, [pc, #700]	@ (8005414 <_dtoa_r+0x89c>)
 8005156:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800515a:	f7fb f89f 	bl	800029c <__adddf3>
 800515e:	4602      	mov	r2, r0
 8005160:	460b      	mov	r3, r1
 8005162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005166:	f7fb fcdf 	bl	8000b28 <__aeabi_dcmpgt>
 800516a:	2800      	cmp	r0, #0
 800516c:	d163      	bne.n	8005236 <_dtoa_r+0x6be>
 800516e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005172:	49a8      	ldr	r1, [pc, #672]	@ (8005414 <_dtoa_r+0x89c>)
 8005174:	2000      	movs	r0, #0
 8005176:	f7fb f88f 	bl	8000298 <__aeabi_dsub>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005182:	f7fb fcb3 	bl	8000aec <__aeabi_dcmplt>
 8005186:	2800      	cmp	r0, #0
 8005188:	f43f af14 	beq.w	8004fb4 <_dtoa_r+0x43c>
 800518c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800518e:	1e73      	subs	r3, r6, #1
 8005190:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005192:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005196:	2b30      	cmp	r3, #48	@ 0x30
 8005198:	d0f8      	beq.n	800518c <_dtoa_r+0x614>
 800519a:	4647      	mov	r7, r8
 800519c:	e03b      	b.n	8005216 <_dtoa_r+0x69e>
 800519e:	4b9e      	ldr	r3, [pc, #632]	@ (8005418 <_dtoa_r+0x8a0>)
 80051a0:	f7fb fa32 	bl	8000608 <__aeabi_dmul>
 80051a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a8:	e7bc      	b.n	8005124 <_dtoa_r+0x5ac>
 80051aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80051ae:	4656      	mov	r6, sl
 80051b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051b4:	4620      	mov	r0, r4
 80051b6:	4629      	mov	r1, r5
 80051b8:	f7fb fb50 	bl	800085c <__aeabi_ddiv>
 80051bc:	f7fb fcd4 	bl	8000b68 <__aeabi_d2iz>
 80051c0:	4680      	mov	r8, r0
 80051c2:	f7fb f9b7 	bl	8000534 <__aeabi_i2d>
 80051c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051ca:	f7fb fa1d 	bl	8000608 <__aeabi_dmul>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4620      	mov	r0, r4
 80051d4:	4629      	mov	r1, r5
 80051d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80051da:	f7fb f85d 	bl	8000298 <__aeabi_dsub>
 80051de:	f806 4b01 	strb.w	r4, [r6], #1
 80051e2:	9d03      	ldr	r5, [sp, #12]
 80051e4:	eba6 040a 	sub.w	r4, r6, sl
 80051e8:	42a5      	cmp	r5, r4
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	d133      	bne.n	8005258 <_dtoa_r+0x6e0>
 80051f0:	f7fb f854 	bl	800029c <__adddf3>
 80051f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f8:	4604      	mov	r4, r0
 80051fa:	460d      	mov	r5, r1
 80051fc:	f7fb fc94 	bl	8000b28 <__aeabi_dcmpgt>
 8005200:	b9c0      	cbnz	r0, 8005234 <_dtoa_r+0x6bc>
 8005202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fb fc65 	bl	8000ad8 <__aeabi_dcmpeq>
 800520e:	b110      	cbz	r0, 8005216 <_dtoa_r+0x69e>
 8005210:	f018 0f01 	tst.w	r8, #1
 8005214:	d10e      	bne.n	8005234 <_dtoa_r+0x6bc>
 8005216:	9902      	ldr	r1, [sp, #8]
 8005218:	4648      	mov	r0, r9
 800521a:	f000 fbbd 	bl	8005998 <_Bfree>
 800521e:	2300      	movs	r3, #0
 8005220:	7033      	strb	r3, [r6, #0]
 8005222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005224:	3701      	adds	r7, #1
 8005226:	601f      	str	r7, [r3, #0]
 8005228:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 824b 	beq.w	80056c6 <_dtoa_r+0xb4e>
 8005230:	601e      	str	r6, [r3, #0]
 8005232:	e248      	b.n	80056c6 <_dtoa_r+0xb4e>
 8005234:	46b8      	mov	r8, r7
 8005236:	4633      	mov	r3, r6
 8005238:	461e      	mov	r6, r3
 800523a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800523e:	2a39      	cmp	r2, #57	@ 0x39
 8005240:	d106      	bne.n	8005250 <_dtoa_r+0x6d8>
 8005242:	459a      	cmp	sl, r3
 8005244:	d1f8      	bne.n	8005238 <_dtoa_r+0x6c0>
 8005246:	2230      	movs	r2, #48	@ 0x30
 8005248:	f108 0801 	add.w	r8, r8, #1
 800524c:	f88a 2000 	strb.w	r2, [sl]
 8005250:	781a      	ldrb	r2, [r3, #0]
 8005252:	3201      	adds	r2, #1
 8005254:	701a      	strb	r2, [r3, #0]
 8005256:	e7a0      	b.n	800519a <_dtoa_r+0x622>
 8005258:	4b6f      	ldr	r3, [pc, #444]	@ (8005418 <_dtoa_r+0x8a0>)
 800525a:	2200      	movs	r2, #0
 800525c:	f7fb f9d4 	bl	8000608 <__aeabi_dmul>
 8005260:	2200      	movs	r2, #0
 8005262:	2300      	movs	r3, #0
 8005264:	4604      	mov	r4, r0
 8005266:	460d      	mov	r5, r1
 8005268:	f7fb fc36 	bl	8000ad8 <__aeabi_dcmpeq>
 800526c:	2800      	cmp	r0, #0
 800526e:	d09f      	beq.n	80051b0 <_dtoa_r+0x638>
 8005270:	e7d1      	b.n	8005216 <_dtoa_r+0x69e>
 8005272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005274:	2a00      	cmp	r2, #0
 8005276:	f000 80ea 	beq.w	800544e <_dtoa_r+0x8d6>
 800527a:	9a07      	ldr	r2, [sp, #28]
 800527c:	2a01      	cmp	r2, #1
 800527e:	f300 80cd 	bgt.w	800541c <_dtoa_r+0x8a4>
 8005282:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005284:	2a00      	cmp	r2, #0
 8005286:	f000 80c1 	beq.w	800540c <_dtoa_r+0x894>
 800528a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800528e:	9c08      	ldr	r4, [sp, #32]
 8005290:	9e00      	ldr	r6, [sp, #0]
 8005292:	9a00      	ldr	r2, [sp, #0]
 8005294:	441a      	add	r2, r3
 8005296:	9200      	str	r2, [sp, #0]
 8005298:	9a06      	ldr	r2, [sp, #24]
 800529a:	2101      	movs	r1, #1
 800529c:	441a      	add	r2, r3
 800529e:	4648      	mov	r0, r9
 80052a0:	9206      	str	r2, [sp, #24]
 80052a2:	f000 fc2d 	bl	8005b00 <__i2b>
 80052a6:	4605      	mov	r5, r0
 80052a8:	b166      	cbz	r6, 80052c4 <_dtoa_r+0x74c>
 80052aa:	9b06      	ldr	r3, [sp, #24]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	dd09      	ble.n	80052c4 <_dtoa_r+0x74c>
 80052b0:	42b3      	cmp	r3, r6
 80052b2:	9a00      	ldr	r2, [sp, #0]
 80052b4:	bfa8      	it	ge
 80052b6:	4633      	movge	r3, r6
 80052b8:	1ad2      	subs	r2, r2, r3
 80052ba:	9200      	str	r2, [sp, #0]
 80052bc:	9a06      	ldr	r2, [sp, #24]
 80052be:	1af6      	subs	r6, r6, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	9306      	str	r3, [sp, #24]
 80052c4:	9b08      	ldr	r3, [sp, #32]
 80052c6:	b30b      	cbz	r3, 800530c <_dtoa_r+0x794>
 80052c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80c6 	beq.w	800545c <_dtoa_r+0x8e4>
 80052d0:	2c00      	cmp	r4, #0
 80052d2:	f000 80c0 	beq.w	8005456 <_dtoa_r+0x8de>
 80052d6:	4629      	mov	r1, r5
 80052d8:	4622      	mov	r2, r4
 80052da:	4648      	mov	r0, r9
 80052dc:	f000 fcc8 	bl	8005c70 <__pow5mult>
 80052e0:	9a02      	ldr	r2, [sp, #8]
 80052e2:	4601      	mov	r1, r0
 80052e4:	4605      	mov	r5, r0
 80052e6:	4648      	mov	r0, r9
 80052e8:	f000 fc20 	bl	8005b2c <__multiply>
 80052ec:	9902      	ldr	r1, [sp, #8]
 80052ee:	4680      	mov	r8, r0
 80052f0:	4648      	mov	r0, r9
 80052f2:	f000 fb51 	bl	8005998 <_Bfree>
 80052f6:	9b08      	ldr	r3, [sp, #32]
 80052f8:	1b1b      	subs	r3, r3, r4
 80052fa:	9308      	str	r3, [sp, #32]
 80052fc:	f000 80b1 	beq.w	8005462 <_dtoa_r+0x8ea>
 8005300:	9a08      	ldr	r2, [sp, #32]
 8005302:	4641      	mov	r1, r8
 8005304:	4648      	mov	r0, r9
 8005306:	f000 fcb3 	bl	8005c70 <__pow5mult>
 800530a:	9002      	str	r0, [sp, #8]
 800530c:	2101      	movs	r1, #1
 800530e:	4648      	mov	r0, r9
 8005310:	f000 fbf6 	bl	8005b00 <__i2b>
 8005314:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005316:	4604      	mov	r4, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 81d8 	beq.w	80056ce <_dtoa_r+0xb56>
 800531e:	461a      	mov	r2, r3
 8005320:	4601      	mov	r1, r0
 8005322:	4648      	mov	r0, r9
 8005324:	f000 fca4 	bl	8005c70 <__pow5mult>
 8005328:	9b07      	ldr	r3, [sp, #28]
 800532a:	2b01      	cmp	r3, #1
 800532c:	4604      	mov	r4, r0
 800532e:	f300 809f 	bgt.w	8005470 <_dtoa_r+0x8f8>
 8005332:	9b04      	ldr	r3, [sp, #16]
 8005334:	2b00      	cmp	r3, #0
 8005336:	f040 8097 	bne.w	8005468 <_dtoa_r+0x8f0>
 800533a:	9b05      	ldr	r3, [sp, #20]
 800533c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005340:	2b00      	cmp	r3, #0
 8005342:	f040 8093 	bne.w	800546c <_dtoa_r+0x8f4>
 8005346:	9b05      	ldr	r3, [sp, #20]
 8005348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800534c:	0d1b      	lsrs	r3, r3, #20
 800534e:	051b      	lsls	r3, r3, #20
 8005350:	b133      	cbz	r3, 8005360 <_dtoa_r+0x7e8>
 8005352:	9b00      	ldr	r3, [sp, #0]
 8005354:	3301      	adds	r3, #1
 8005356:	9300      	str	r3, [sp, #0]
 8005358:	9b06      	ldr	r3, [sp, #24]
 800535a:	3301      	adds	r3, #1
 800535c:	9306      	str	r3, [sp, #24]
 800535e:	2301      	movs	r3, #1
 8005360:	9308      	str	r3, [sp, #32]
 8005362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005364:	2b00      	cmp	r3, #0
 8005366:	f000 81b8 	beq.w	80056da <_dtoa_r+0xb62>
 800536a:	6923      	ldr	r3, [r4, #16]
 800536c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005370:	6918      	ldr	r0, [r3, #16]
 8005372:	f000 fb79 	bl	8005a68 <__hi0bits>
 8005376:	f1c0 0020 	rsb	r0, r0, #32
 800537a:	9b06      	ldr	r3, [sp, #24]
 800537c:	4418      	add	r0, r3
 800537e:	f010 001f 	ands.w	r0, r0, #31
 8005382:	f000 8082 	beq.w	800548a <_dtoa_r+0x912>
 8005386:	f1c0 0320 	rsb	r3, r0, #32
 800538a:	2b04      	cmp	r3, #4
 800538c:	dd73      	ble.n	8005476 <_dtoa_r+0x8fe>
 800538e:	9b00      	ldr	r3, [sp, #0]
 8005390:	f1c0 001c 	rsb	r0, r0, #28
 8005394:	4403      	add	r3, r0
 8005396:	9300      	str	r3, [sp, #0]
 8005398:	9b06      	ldr	r3, [sp, #24]
 800539a:	4403      	add	r3, r0
 800539c:	4406      	add	r6, r0
 800539e:	9306      	str	r3, [sp, #24]
 80053a0:	9b00      	ldr	r3, [sp, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	dd05      	ble.n	80053b2 <_dtoa_r+0x83a>
 80053a6:	9902      	ldr	r1, [sp, #8]
 80053a8:	461a      	mov	r2, r3
 80053aa:	4648      	mov	r0, r9
 80053ac:	f000 fcba 	bl	8005d24 <__lshift>
 80053b0:	9002      	str	r0, [sp, #8]
 80053b2:	9b06      	ldr	r3, [sp, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	dd05      	ble.n	80053c4 <_dtoa_r+0x84c>
 80053b8:	4621      	mov	r1, r4
 80053ba:	461a      	mov	r2, r3
 80053bc:	4648      	mov	r0, r9
 80053be:	f000 fcb1 	bl	8005d24 <__lshift>
 80053c2:	4604      	mov	r4, r0
 80053c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d061      	beq.n	800548e <_dtoa_r+0x916>
 80053ca:	9802      	ldr	r0, [sp, #8]
 80053cc:	4621      	mov	r1, r4
 80053ce:	f000 fd15 	bl	8005dfc <__mcmp>
 80053d2:	2800      	cmp	r0, #0
 80053d4:	da5b      	bge.n	800548e <_dtoa_r+0x916>
 80053d6:	2300      	movs	r3, #0
 80053d8:	9902      	ldr	r1, [sp, #8]
 80053da:	220a      	movs	r2, #10
 80053dc:	4648      	mov	r0, r9
 80053de:	f000 fafd 	bl	80059dc <__multadd>
 80053e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	f107 38ff 	add.w	r8, r7, #4294967295
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8177 	beq.w	80056de <_dtoa_r+0xb66>
 80053f0:	4629      	mov	r1, r5
 80053f2:	2300      	movs	r3, #0
 80053f4:	220a      	movs	r2, #10
 80053f6:	4648      	mov	r0, r9
 80053f8:	f000 faf0 	bl	80059dc <__multadd>
 80053fc:	f1bb 0f00 	cmp.w	fp, #0
 8005400:	4605      	mov	r5, r0
 8005402:	dc6f      	bgt.n	80054e4 <_dtoa_r+0x96c>
 8005404:	9b07      	ldr	r3, [sp, #28]
 8005406:	2b02      	cmp	r3, #2
 8005408:	dc49      	bgt.n	800549e <_dtoa_r+0x926>
 800540a:	e06b      	b.n	80054e4 <_dtoa_r+0x96c>
 800540c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800540e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005412:	e73c      	b.n	800528e <_dtoa_r+0x716>
 8005414:	3fe00000 	.word	0x3fe00000
 8005418:	40240000 	.word	0x40240000
 800541c:	9b03      	ldr	r3, [sp, #12]
 800541e:	1e5c      	subs	r4, r3, #1
 8005420:	9b08      	ldr	r3, [sp, #32]
 8005422:	42a3      	cmp	r3, r4
 8005424:	db09      	blt.n	800543a <_dtoa_r+0x8c2>
 8005426:	1b1c      	subs	r4, r3, r4
 8005428:	9b03      	ldr	r3, [sp, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f6bf af30 	bge.w	8005290 <_dtoa_r+0x718>
 8005430:	9b00      	ldr	r3, [sp, #0]
 8005432:	9a03      	ldr	r2, [sp, #12]
 8005434:	1a9e      	subs	r6, r3, r2
 8005436:	2300      	movs	r3, #0
 8005438:	e72b      	b.n	8005292 <_dtoa_r+0x71a>
 800543a:	9b08      	ldr	r3, [sp, #32]
 800543c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800543e:	9408      	str	r4, [sp, #32]
 8005440:	1ae3      	subs	r3, r4, r3
 8005442:	441a      	add	r2, r3
 8005444:	9e00      	ldr	r6, [sp, #0]
 8005446:	9b03      	ldr	r3, [sp, #12]
 8005448:	920d      	str	r2, [sp, #52]	@ 0x34
 800544a:	2400      	movs	r4, #0
 800544c:	e721      	b.n	8005292 <_dtoa_r+0x71a>
 800544e:	9c08      	ldr	r4, [sp, #32]
 8005450:	9e00      	ldr	r6, [sp, #0]
 8005452:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005454:	e728      	b.n	80052a8 <_dtoa_r+0x730>
 8005456:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800545a:	e751      	b.n	8005300 <_dtoa_r+0x788>
 800545c:	9a08      	ldr	r2, [sp, #32]
 800545e:	9902      	ldr	r1, [sp, #8]
 8005460:	e750      	b.n	8005304 <_dtoa_r+0x78c>
 8005462:	f8cd 8008 	str.w	r8, [sp, #8]
 8005466:	e751      	b.n	800530c <_dtoa_r+0x794>
 8005468:	2300      	movs	r3, #0
 800546a:	e779      	b.n	8005360 <_dtoa_r+0x7e8>
 800546c:	9b04      	ldr	r3, [sp, #16]
 800546e:	e777      	b.n	8005360 <_dtoa_r+0x7e8>
 8005470:	2300      	movs	r3, #0
 8005472:	9308      	str	r3, [sp, #32]
 8005474:	e779      	b.n	800536a <_dtoa_r+0x7f2>
 8005476:	d093      	beq.n	80053a0 <_dtoa_r+0x828>
 8005478:	9a00      	ldr	r2, [sp, #0]
 800547a:	331c      	adds	r3, #28
 800547c:	441a      	add	r2, r3
 800547e:	9200      	str	r2, [sp, #0]
 8005480:	9a06      	ldr	r2, [sp, #24]
 8005482:	441a      	add	r2, r3
 8005484:	441e      	add	r6, r3
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	e78a      	b.n	80053a0 <_dtoa_r+0x828>
 800548a:	4603      	mov	r3, r0
 800548c:	e7f4      	b.n	8005478 <_dtoa_r+0x900>
 800548e:	9b03      	ldr	r3, [sp, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	46b8      	mov	r8, r7
 8005494:	dc20      	bgt.n	80054d8 <_dtoa_r+0x960>
 8005496:	469b      	mov	fp, r3
 8005498:	9b07      	ldr	r3, [sp, #28]
 800549a:	2b02      	cmp	r3, #2
 800549c:	dd1e      	ble.n	80054dc <_dtoa_r+0x964>
 800549e:	f1bb 0f00 	cmp.w	fp, #0
 80054a2:	f47f adb1 	bne.w	8005008 <_dtoa_r+0x490>
 80054a6:	4621      	mov	r1, r4
 80054a8:	465b      	mov	r3, fp
 80054aa:	2205      	movs	r2, #5
 80054ac:	4648      	mov	r0, r9
 80054ae:	f000 fa95 	bl	80059dc <__multadd>
 80054b2:	4601      	mov	r1, r0
 80054b4:	4604      	mov	r4, r0
 80054b6:	9802      	ldr	r0, [sp, #8]
 80054b8:	f000 fca0 	bl	8005dfc <__mcmp>
 80054bc:	2800      	cmp	r0, #0
 80054be:	f77f ada3 	ble.w	8005008 <_dtoa_r+0x490>
 80054c2:	4656      	mov	r6, sl
 80054c4:	2331      	movs	r3, #49	@ 0x31
 80054c6:	f806 3b01 	strb.w	r3, [r6], #1
 80054ca:	f108 0801 	add.w	r8, r8, #1
 80054ce:	e59f      	b.n	8005010 <_dtoa_r+0x498>
 80054d0:	9c03      	ldr	r4, [sp, #12]
 80054d2:	46b8      	mov	r8, r7
 80054d4:	4625      	mov	r5, r4
 80054d6:	e7f4      	b.n	80054c2 <_dtoa_r+0x94a>
 80054d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80054dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 8101 	beq.w	80056e6 <_dtoa_r+0xb6e>
 80054e4:	2e00      	cmp	r6, #0
 80054e6:	dd05      	ble.n	80054f4 <_dtoa_r+0x97c>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4632      	mov	r2, r6
 80054ec:	4648      	mov	r0, r9
 80054ee:	f000 fc19 	bl	8005d24 <__lshift>
 80054f2:	4605      	mov	r5, r0
 80054f4:	9b08      	ldr	r3, [sp, #32]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d05c      	beq.n	80055b4 <_dtoa_r+0xa3c>
 80054fa:	6869      	ldr	r1, [r5, #4]
 80054fc:	4648      	mov	r0, r9
 80054fe:	f000 fa0b 	bl	8005918 <_Balloc>
 8005502:	4606      	mov	r6, r0
 8005504:	b928      	cbnz	r0, 8005512 <_dtoa_r+0x99a>
 8005506:	4b82      	ldr	r3, [pc, #520]	@ (8005710 <_dtoa_r+0xb98>)
 8005508:	4602      	mov	r2, r0
 800550a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800550e:	f7ff bb4a 	b.w	8004ba6 <_dtoa_r+0x2e>
 8005512:	692a      	ldr	r2, [r5, #16]
 8005514:	3202      	adds	r2, #2
 8005516:	0092      	lsls	r2, r2, #2
 8005518:	f105 010c 	add.w	r1, r5, #12
 800551c:	300c      	adds	r0, #12
 800551e:	f001 f807 	bl	8006530 <memcpy>
 8005522:	2201      	movs	r2, #1
 8005524:	4631      	mov	r1, r6
 8005526:	4648      	mov	r0, r9
 8005528:	f000 fbfc 	bl	8005d24 <__lshift>
 800552c:	f10a 0301 	add.w	r3, sl, #1
 8005530:	9300      	str	r3, [sp, #0]
 8005532:	eb0a 030b 	add.w	r3, sl, fp
 8005536:	9308      	str	r3, [sp, #32]
 8005538:	9b04      	ldr	r3, [sp, #16]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	462f      	mov	r7, r5
 8005540:	9306      	str	r3, [sp, #24]
 8005542:	4605      	mov	r5, r0
 8005544:	9b00      	ldr	r3, [sp, #0]
 8005546:	9802      	ldr	r0, [sp, #8]
 8005548:	4621      	mov	r1, r4
 800554a:	f103 3bff 	add.w	fp, r3, #4294967295
 800554e:	f7ff fa8a 	bl	8004a66 <quorem>
 8005552:	4603      	mov	r3, r0
 8005554:	3330      	adds	r3, #48	@ 0x30
 8005556:	9003      	str	r0, [sp, #12]
 8005558:	4639      	mov	r1, r7
 800555a:	9802      	ldr	r0, [sp, #8]
 800555c:	9309      	str	r3, [sp, #36]	@ 0x24
 800555e:	f000 fc4d 	bl	8005dfc <__mcmp>
 8005562:	462a      	mov	r2, r5
 8005564:	9004      	str	r0, [sp, #16]
 8005566:	4621      	mov	r1, r4
 8005568:	4648      	mov	r0, r9
 800556a:	f000 fc63 	bl	8005e34 <__mdiff>
 800556e:	68c2      	ldr	r2, [r0, #12]
 8005570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005572:	4606      	mov	r6, r0
 8005574:	bb02      	cbnz	r2, 80055b8 <_dtoa_r+0xa40>
 8005576:	4601      	mov	r1, r0
 8005578:	9802      	ldr	r0, [sp, #8]
 800557a:	f000 fc3f 	bl	8005dfc <__mcmp>
 800557e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005580:	4602      	mov	r2, r0
 8005582:	4631      	mov	r1, r6
 8005584:	4648      	mov	r0, r9
 8005586:	920c      	str	r2, [sp, #48]	@ 0x30
 8005588:	9309      	str	r3, [sp, #36]	@ 0x24
 800558a:	f000 fa05 	bl	8005998 <_Bfree>
 800558e:	9b07      	ldr	r3, [sp, #28]
 8005590:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005592:	9e00      	ldr	r6, [sp, #0]
 8005594:	ea42 0103 	orr.w	r1, r2, r3
 8005598:	9b06      	ldr	r3, [sp, #24]
 800559a:	4319      	orrs	r1, r3
 800559c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800559e:	d10d      	bne.n	80055bc <_dtoa_r+0xa44>
 80055a0:	2b39      	cmp	r3, #57	@ 0x39
 80055a2:	d027      	beq.n	80055f4 <_dtoa_r+0xa7c>
 80055a4:	9a04      	ldr	r2, [sp, #16]
 80055a6:	2a00      	cmp	r2, #0
 80055a8:	dd01      	ble.n	80055ae <_dtoa_r+0xa36>
 80055aa:	9b03      	ldr	r3, [sp, #12]
 80055ac:	3331      	adds	r3, #49	@ 0x31
 80055ae:	f88b 3000 	strb.w	r3, [fp]
 80055b2:	e52e      	b.n	8005012 <_dtoa_r+0x49a>
 80055b4:	4628      	mov	r0, r5
 80055b6:	e7b9      	b.n	800552c <_dtoa_r+0x9b4>
 80055b8:	2201      	movs	r2, #1
 80055ba:	e7e2      	b.n	8005582 <_dtoa_r+0xa0a>
 80055bc:	9904      	ldr	r1, [sp, #16]
 80055be:	2900      	cmp	r1, #0
 80055c0:	db04      	blt.n	80055cc <_dtoa_r+0xa54>
 80055c2:	9807      	ldr	r0, [sp, #28]
 80055c4:	4301      	orrs	r1, r0
 80055c6:	9806      	ldr	r0, [sp, #24]
 80055c8:	4301      	orrs	r1, r0
 80055ca:	d120      	bne.n	800560e <_dtoa_r+0xa96>
 80055cc:	2a00      	cmp	r2, #0
 80055ce:	ddee      	ble.n	80055ae <_dtoa_r+0xa36>
 80055d0:	9902      	ldr	r1, [sp, #8]
 80055d2:	9300      	str	r3, [sp, #0]
 80055d4:	2201      	movs	r2, #1
 80055d6:	4648      	mov	r0, r9
 80055d8:	f000 fba4 	bl	8005d24 <__lshift>
 80055dc:	4621      	mov	r1, r4
 80055de:	9002      	str	r0, [sp, #8]
 80055e0:	f000 fc0c 	bl	8005dfc <__mcmp>
 80055e4:	2800      	cmp	r0, #0
 80055e6:	9b00      	ldr	r3, [sp, #0]
 80055e8:	dc02      	bgt.n	80055f0 <_dtoa_r+0xa78>
 80055ea:	d1e0      	bne.n	80055ae <_dtoa_r+0xa36>
 80055ec:	07da      	lsls	r2, r3, #31
 80055ee:	d5de      	bpl.n	80055ae <_dtoa_r+0xa36>
 80055f0:	2b39      	cmp	r3, #57	@ 0x39
 80055f2:	d1da      	bne.n	80055aa <_dtoa_r+0xa32>
 80055f4:	2339      	movs	r3, #57	@ 0x39
 80055f6:	f88b 3000 	strb.w	r3, [fp]
 80055fa:	4633      	mov	r3, r6
 80055fc:	461e      	mov	r6, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005604:	2a39      	cmp	r2, #57	@ 0x39
 8005606:	d04e      	beq.n	80056a6 <_dtoa_r+0xb2e>
 8005608:	3201      	adds	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e501      	b.n	8005012 <_dtoa_r+0x49a>
 800560e:	2a00      	cmp	r2, #0
 8005610:	dd03      	ble.n	800561a <_dtoa_r+0xaa2>
 8005612:	2b39      	cmp	r3, #57	@ 0x39
 8005614:	d0ee      	beq.n	80055f4 <_dtoa_r+0xa7c>
 8005616:	3301      	adds	r3, #1
 8005618:	e7c9      	b.n	80055ae <_dtoa_r+0xa36>
 800561a:	9a00      	ldr	r2, [sp, #0]
 800561c:	9908      	ldr	r1, [sp, #32]
 800561e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005622:	428a      	cmp	r2, r1
 8005624:	d028      	beq.n	8005678 <_dtoa_r+0xb00>
 8005626:	9902      	ldr	r1, [sp, #8]
 8005628:	2300      	movs	r3, #0
 800562a:	220a      	movs	r2, #10
 800562c:	4648      	mov	r0, r9
 800562e:	f000 f9d5 	bl	80059dc <__multadd>
 8005632:	42af      	cmp	r7, r5
 8005634:	9002      	str	r0, [sp, #8]
 8005636:	f04f 0300 	mov.w	r3, #0
 800563a:	f04f 020a 	mov.w	r2, #10
 800563e:	4639      	mov	r1, r7
 8005640:	4648      	mov	r0, r9
 8005642:	d107      	bne.n	8005654 <_dtoa_r+0xadc>
 8005644:	f000 f9ca 	bl	80059dc <__multadd>
 8005648:	4607      	mov	r7, r0
 800564a:	4605      	mov	r5, r0
 800564c:	9b00      	ldr	r3, [sp, #0]
 800564e:	3301      	adds	r3, #1
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	e777      	b.n	8005544 <_dtoa_r+0x9cc>
 8005654:	f000 f9c2 	bl	80059dc <__multadd>
 8005658:	4629      	mov	r1, r5
 800565a:	4607      	mov	r7, r0
 800565c:	2300      	movs	r3, #0
 800565e:	220a      	movs	r2, #10
 8005660:	4648      	mov	r0, r9
 8005662:	f000 f9bb 	bl	80059dc <__multadd>
 8005666:	4605      	mov	r5, r0
 8005668:	e7f0      	b.n	800564c <_dtoa_r+0xad4>
 800566a:	f1bb 0f00 	cmp.w	fp, #0
 800566e:	bfcc      	ite	gt
 8005670:	465e      	movgt	r6, fp
 8005672:	2601      	movle	r6, #1
 8005674:	4456      	add	r6, sl
 8005676:	2700      	movs	r7, #0
 8005678:	9902      	ldr	r1, [sp, #8]
 800567a:	9300      	str	r3, [sp, #0]
 800567c:	2201      	movs	r2, #1
 800567e:	4648      	mov	r0, r9
 8005680:	f000 fb50 	bl	8005d24 <__lshift>
 8005684:	4621      	mov	r1, r4
 8005686:	9002      	str	r0, [sp, #8]
 8005688:	f000 fbb8 	bl	8005dfc <__mcmp>
 800568c:	2800      	cmp	r0, #0
 800568e:	dcb4      	bgt.n	80055fa <_dtoa_r+0xa82>
 8005690:	d102      	bne.n	8005698 <_dtoa_r+0xb20>
 8005692:	9b00      	ldr	r3, [sp, #0]
 8005694:	07db      	lsls	r3, r3, #31
 8005696:	d4b0      	bmi.n	80055fa <_dtoa_r+0xa82>
 8005698:	4633      	mov	r3, r6
 800569a:	461e      	mov	r6, r3
 800569c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056a0:	2a30      	cmp	r2, #48	@ 0x30
 80056a2:	d0fa      	beq.n	800569a <_dtoa_r+0xb22>
 80056a4:	e4b5      	b.n	8005012 <_dtoa_r+0x49a>
 80056a6:	459a      	cmp	sl, r3
 80056a8:	d1a8      	bne.n	80055fc <_dtoa_r+0xa84>
 80056aa:	2331      	movs	r3, #49	@ 0x31
 80056ac:	f108 0801 	add.w	r8, r8, #1
 80056b0:	f88a 3000 	strb.w	r3, [sl]
 80056b4:	e4ad      	b.n	8005012 <_dtoa_r+0x49a>
 80056b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005714 <_dtoa_r+0xb9c>
 80056bc:	b11b      	cbz	r3, 80056c6 <_dtoa_r+0xb4e>
 80056be:	f10a 0308 	add.w	r3, sl, #8
 80056c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056c4:	6013      	str	r3, [r2, #0]
 80056c6:	4650      	mov	r0, sl
 80056c8:	b017      	add	sp, #92	@ 0x5c
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ce:	9b07      	ldr	r3, [sp, #28]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	f77f ae2e 	ble.w	8005332 <_dtoa_r+0x7ba>
 80056d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056d8:	9308      	str	r3, [sp, #32]
 80056da:	2001      	movs	r0, #1
 80056dc:	e64d      	b.n	800537a <_dtoa_r+0x802>
 80056de:	f1bb 0f00 	cmp.w	fp, #0
 80056e2:	f77f aed9 	ble.w	8005498 <_dtoa_r+0x920>
 80056e6:	4656      	mov	r6, sl
 80056e8:	9802      	ldr	r0, [sp, #8]
 80056ea:	4621      	mov	r1, r4
 80056ec:	f7ff f9bb 	bl	8004a66 <quorem>
 80056f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80056f4:	f806 3b01 	strb.w	r3, [r6], #1
 80056f8:	eba6 020a 	sub.w	r2, r6, sl
 80056fc:	4593      	cmp	fp, r2
 80056fe:	ddb4      	ble.n	800566a <_dtoa_r+0xaf2>
 8005700:	9902      	ldr	r1, [sp, #8]
 8005702:	2300      	movs	r3, #0
 8005704:	220a      	movs	r2, #10
 8005706:	4648      	mov	r0, r9
 8005708:	f000 f968 	bl	80059dc <__multadd>
 800570c:	9002      	str	r0, [sp, #8]
 800570e:	e7eb      	b.n	80056e8 <_dtoa_r+0xb70>
 8005710:	080068bc 	.word	0x080068bc
 8005714:	08006840 	.word	0x08006840

08005718 <_free_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4605      	mov	r5, r0
 800571c:	2900      	cmp	r1, #0
 800571e:	d041      	beq.n	80057a4 <_free_r+0x8c>
 8005720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005724:	1f0c      	subs	r4, r1, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	bfb8      	it	lt
 800572a:	18e4      	addlt	r4, r4, r3
 800572c:	f000 f8e8 	bl	8005900 <__malloc_lock>
 8005730:	4a1d      	ldr	r2, [pc, #116]	@ (80057a8 <_free_r+0x90>)
 8005732:	6813      	ldr	r3, [r2, #0]
 8005734:	b933      	cbnz	r3, 8005744 <_free_r+0x2c>
 8005736:	6063      	str	r3, [r4, #4]
 8005738:	6014      	str	r4, [r2, #0]
 800573a:	4628      	mov	r0, r5
 800573c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005740:	f000 b8e4 	b.w	800590c <__malloc_unlock>
 8005744:	42a3      	cmp	r3, r4
 8005746:	d908      	bls.n	800575a <_free_r+0x42>
 8005748:	6820      	ldr	r0, [r4, #0]
 800574a:	1821      	adds	r1, r4, r0
 800574c:	428b      	cmp	r3, r1
 800574e:	bf01      	itttt	eq
 8005750:	6819      	ldreq	r1, [r3, #0]
 8005752:	685b      	ldreq	r3, [r3, #4]
 8005754:	1809      	addeq	r1, r1, r0
 8005756:	6021      	streq	r1, [r4, #0]
 8005758:	e7ed      	b.n	8005736 <_free_r+0x1e>
 800575a:	461a      	mov	r2, r3
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	b10b      	cbz	r3, 8005764 <_free_r+0x4c>
 8005760:	42a3      	cmp	r3, r4
 8005762:	d9fa      	bls.n	800575a <_free_r+0x42>
 8005764:	6811      	ldr	r1, [r2, #0]
 8005766:	1850      	adds	r0, r2, r1
 8005768:	42a0      	cmp	r0, r4
 800576a:	d10b      	bne.n	8005784 <_free_r+0x6c>
 800576c:	6820      	ldr	r0, [r4, #0]
 800576e:	4401      	add	r1, r0
 8005770:	1850      	adds	r0, r2, r1
 8005772:	4283      	cmp	r3, r0
 8005774:	6011      	str	r1, [r2, #0]
 8005776:	d1e0      	bne.n	800573a <_free_r+0x22>
 8005778:	6818      	ldr	r0, [r3, #0]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	6053      	str	r3, [r2, #4]
 800577e:	4408      	add	r0, r1
 8005780:	6010      	str	r0, [r2, #0]
 8005782:	e7da      	b.n	800573a <_free_r+0x22>
 8005784:	d902      	bls.n	800578c <_free_r+0x74>
 8005786:	230c      	movs	r3, #12
 8005788:	602b      	str	r3, [r5, #0]
 800578a:	e7d6      	b.n	800573a <_free_r+0x22>
 800578c:	6820      	ldr	r0, [r4, #0]
 800578e:	1821      	adds	r1, r4, r0
 8005790:	428b      	cmp	r3, r1
 8005792:	bf04      	itt	eq
 8005794:	6819      	ldreq	r1, [r3, #0]
 8005796:	685b      	ldreq	r3, [r3, #4]
 8005798:	6063      	str	r3, [r4, #4]
 800579a:	bf04      	itt	eq
 800579c:	1809      	addeq	r1, r1, r0
 800579e:	6021      	streq	r1, [r4, #0]
 80057a0:	6054      	str	r4, [r2, #4]
 80057a2:	e7ca      	b.n	800573a <_free_r+0x22>
 80057a4:	bd38      	pop	{r3, r4, r5, pc}
 80057a6:	bf00      	nop
 80057a8:	20000404 	.word	0x20000404

080057ac <malloc>:
 80057ac:	4b02      	ldr	r3, [pc, #8]	@ (80057b8 <malloc+0xc>)
 80057ae:	4601      	mov	r1, r0
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	f000 b825 	b.w	8005800 <_malloc_r>
 80057b6:	bf00      	nop
 80057b8:	20000018 	.word	0x20000018

080057bc <sbrk_aligned>:
 80057bc:	b570      	push	{r4, r5, r6, lr}
 80057be:	4e0f      	ldr	r6, [pc, #60]	@ (80057fc <sbrk_aligned+0x40>)
 80057c0:	460c      	mov	r4, r1
 80057c2:	6831      	ldr	r1, [r6, #0]
 80057c4:	4605      	mov	r5, r0
 80057c6:	b911      	cbnz	r1, 80057ce <sbrk_aligned+0x12>
 80057c8:	f000 fea2 	bl	8006510 <_sbrk_r>
 80057cc:	6030      	str	r0, [r6, #0]
 80057ce:	4621      	mov	r1, r4
 80057d0:	4628      	mov	r0, r5
 80057d2:	f000 fe9d 	bl	8006510 <_sbrk_r>
 80057d6:	1c43      	adds	r3, r0, #1
 80057d8:	d103      	bne.n	80057e2 <sbrk_aligned+0x26>
 80057da:	f04f 34ff 	mov.w	r4, #4294967295
 80057de:	4620      	mov	r0, r4
 80057e0:	bd70      	pop	{r4, r5, r6, pc}
 80057e2:	1cc4      	adds	r4, r0, #3
 80057e4:	f024 0403 	bic.w	r4, r4, #3
 80057e8:	42a0      	cmp	r0, r4
 80057ea:	d0f8      	beq.n	80057de <sbrk_aligned+0x22>
 80057ec:	1a21      	subs	r1, r4, r0
 80057ee:	4628      	mov	r0, r5
 80057f0:	f000 fe8e 	bl	8006510 <_sbrk_r>
 80057f4:	3001      	adds	r0, #1
 80057f6:	d1f2      	bne.n	80057de <sbrk_aligned+0x22>
 80057f8:	e7ef      	b.n	80057da <sbrk_aligned+0x1e>
 80057fa:	bf00      	nop
 80057fc:	20000400 	.word	0x20000400

08005800 <_malloc_r>:
 8005800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005804:	1ccd      	adds	r5, r1, #3
 8005806:	f025 0503 	bic.w	r5, r5, #3
 800580a:	3508      	adds	r5, #8
 800580c:	2d0c      	cmp	r5, #12
 800580e:	bf38      	it	cc
 8005810:	250c      	movcc	r5, #12
 8005812:	2d00      	cmp	r5, #0
 8005814:	4606      	mov	r6, r0
 8005816:	db01      	blt.n	800581c <_malloc_r+0x1c>
 8005818:	42a9      	cmp	r1, r5
 800581a:	d904      	bls.n	8005826 <_malloc_r+0x26>
 800581c:	230c      	movs	r3, #12
 800581e:	6033      	str	r3, [r6, #0]
 8005820:	2000      	movs	r0, #0
 8005822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80058fc <_malloc_r+0xfc>
 800582a:	f000 f869 	bl	8005900 <__malloc_lock>
 800582e:	f8d8 3000 	ldr.w	r3, [r8]
 8005832:	461c      	mov	r4, r3
 8005834:	bb44      	cbnz	r4, 8005888 <_malloc_r+0x88>
 8005836:	4629      	mov	r1, r5
 8005838:	4630      	mov	r0, r6
 800583a:	f7ff ffbf 	bl	80057bc <sbrk_aligned>
 800583e:	1c43      	adds	r3, r0, #1
 8005840:	4604      	mov	r4, r0
 8005842:	d158      	bne.n	80058f6 <_malloc_r+0xf6>
 8005844:	f8d8 4000 	ldr.w	r4, [r8]
 8005848:	4627      	mov	r7, r4
 800584a:	2f00      	cmp	r7, #0
 800584c:	d143      	bne.n	80058d6 <_malloc_r+0xd6>
 800584e:	2c00      	cmp	r4, #0
 8005850:	d04b      	beq.n	80058ea <_malloc_r+0xea>
 8005852:	6823      	ldr	r3, [r4, #0]
 8005854:	4639      	mov	r1, r7
 8005856:	4630      	mov	r0, r6
 8005858:	eb04 0903 	add.w	r9, r4, r3
 800585c:	f000 fe58 	bl	8006510 <_sbrk_r>
 8005860:	4581      	cmp	r9, r0
 8005862:	d142      	bne.n	80058ea <_malloc_r+0xea>
 8005864:	6821      	ldr	r1, [r4, #0]
 8005866:	1a6d      	subs	r5, r5, r1
 8005868:	4629      	mov	r1, r5
 800586a:	4630      	mov	r0, r6
 800586c:	f7ff ffa6 	bl	80057bc <sbrk_aligned>
 8005870:	3001      	adds	r0, #1
 8005872:	d03a      	beq.n	80058ea <_malloc_r+0xea>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	442b      	add	r3, r5
 8005878:	6023      	str	r3, [r4, #0]
 800587a:	f8d8 3000 	ldr.w	r3, [r8]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	bb62      	cbnz	r2, 80058dc <_malloc_r+0xdc>
 8005882:	f8c8 7000 	str.w	r7, [r8]
 8005886:	e00f      	b.n	80058a8 <_malloc_r+0xa8>
 8005888:	6822      	ldr	r2, [r4, #0]
 800588a:	1b52      	subs	r2, r2, r5
 800588c:	d420      	bmi.n	80058d0 <_malloc_r+0xd0>
 800588e:	2a0b      	cmp	r2, #11
 8005890:	d917      	bls.n	80058c2 <_malloc_r+0xc2>
 8005892:	1961      	adds	r1, r4, r5
 8005894:	42a3      	cmp	r3, r4
 8005896:	6025      	str	r5, [r4, #0]
 8005898:	bf18      	it	ne
 800589a:	6059      	strne	r1, [r3, #4]
 800589c:	6863      	ldr	r3, [r4, #4]
 800589e:	bf08      	it	eq
 80058a0:	f8c8 1000 	streq.w	r1, [r8]
 80058a4:	5162      	str	r2, [r4, r5]
 80058a6:	604b      	str	r3, [r1, #4]
 80058a8:	4630      	mov	r0, r6
 80058aa:	f000 f82f 	bl	800590c <__malloc_unlock>
 80058ae:	f104 000b 	add.w	r0, r4, #11
 80058b2:	1d23      	adds	r3, r4, #4
 80058b4:	f020 0007 	bic.w	r0, r0, #7
 80058b8:	1ac2      	subs	r2, r0, r3
 80058ba:	bf1c      	itt	ne
 80058bc:	1a1b      	subne	r3, r3, r0
 80058be:	50a3      	strne	r3, [r4, r2]
 80058c0:	e7af      	b.n	8005822 <_malloc_r+0x22>
 80058c2:	6862      	ldr	r2, [r4, #4]
 80058c4:	42a3      	cmp	r3, r4
 80058c6:	bf0c      	ite	eq
 80058c8:	f8c8 2000 	streq.w	r2, [r8]
 80058cc:	605a      	strne	r2, [r3, #4]
 80058ce:	e7eb      	b.n	80058a8 <_malloc_r+0xa8>
 80058d0:	4623      	mov	r3, r4
 80058d2:	6864      	ldr	r4, [r4, #4]
 80058d4:	e7ae      	b.n	8005834 <_malloc_r+0x34>
 80058d6:	463c      	mov	r4, r7
 80058d8:	687f      	ldr	r7, [r7, #4]
 80058da:	e7b6      	b.n	800584a <_malloc_r+0x4a>
 80058dc:	461a      	mov	r2, r3
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	42a3      	cmp	r3, r4
 80058e2:	d1fb      	bne.n	80058dc <_malloc_r+0xdc>
 80058e4:	2300      	movs	r3, #0
 80058e6:	6053      	str	r3, [r2, #4]
 80058e8:	e7de      	b.n	80058a8 <_malloc_r+0xa8>
 80058ea:	230c      	movs	r3, #12
 80058ec:	6033      	str	r3, [r6, #0]
 80058ee:	4630      	mov	r0, r6
 80058f0:	f000 f80c 	bl	800590c <__malloc_unlock>
 80058f4:	e794      	b.n	8005820 <_malloc_r+0x20>
 80058f6:	6005      	str	r5, [r0, #0]
 80058f8:	e7d6      	b.n	80058a8 <_malloc_r+0xa8>
 80058fa:	bf00      	nop
 80058fc:	20000404 	.word	0x20000404

08005900 <__malloc_lock>:
 8005900:	4801      	ldr	r0, [pc, #4]	@ (8005908 <__malloc_lock+0x8>)
 8005902:	f7ff b8ae 	b.w	8004a62 <__retarget_lock_acquire_recursive>
 8005906:	bf00      	nop
 8005908:	200003fc 	.word	0x200003fc

0800590c <__malloc_unlock>:
 800590c:	4801      	ldr	r0, [pc, #4]	@ (8005914 <__malloc_unlock+0x8>)
 800590e:	f7ff b8a9 	b.w	8004a64 <__retarget_lock_release_recursive>
 8005912:	bf00      	nop
 8005914:	200003fc 	.word	0x200003fc

08005918 <_Balloc>:
 8005918:	b570      	push	{r4, r5, r6, lr}
 800591a:	69c6      	ldr	r6, [r0, #28]
 800591c:	4604      	mov	r4, r0
 800591e:	460d      	mov	r5, r1
 8005920:	b976      	cbnz	r6, 8005940 <_Balloc+0x28>
 8005922:	2010      	movs	r0, #16
 8005924:	f7ff ff42 	bl	80057ac <malloc>
 8005928:	4602      	mov	r2, r0
 800592a:	61e0      	str	r0, [r4, #28]
 800592c:	b920      	cbnz	r0, 8005938 <_Balloc+0x20>
 800592e:	4b18      	ldr	r3, [pc, #96]	@ (8005990 <_Balloc+0x78>)
 8005930:	4818      	ldr	r0, [pc, #96]	@ (8005994 <_Balloc+0x7c>)
 8005932:	216b      	movs	r1, #107	@ 0x6b
 8005934:	f000 fe0a 	bl	800654c <__assert_func>
 8005938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800593c:	6006      	str	r6, [r0, #0]
 800593e:	60c6      	str	r6, [r0, #12]
 8005940:	69e6      	ldr	r6, [r4, #28]
 8005942:	68f3      	ldr	r3, [r6, #12]
 8005944:	b183      	cbz	r3, 8005968 <_Balloc+0x50>
 8005946:	69e3      	ldr	r3, [r4, #28]
 8005948:	68db      	ldr	r3, [r3, #12]
 800594a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800594e:	b9b8      	cbnz	r0, 8005980 <_Balloc+0x68>
 8005950:	2101      	movs	r1, #1
 8005952:	fa01 f605 	lsl.w	r6, r1, r5
 8005956:	1d72      	adds	r2, r6, #5
 8005958:	0092      	lsls	r2, r2, #2
 800595a:	4620      	mov	r0, r4
 800595c:	f000 fe14 	bl	8006588 <_calloc_r>
 8005960:	b160      	cbz	r0, 800597c <_Balloc+0x64>
 8005962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005966:	e00e      	b.n	8005986 <_Balloc+0x6e>
 8005968:	2221      	movs	r2, #33	@ 0x21
 800596a:	2104      	movs	r1, #4
 800596c:	4620      	mov	r0, r4
 800596e:	f000 fe0b 	bl	8006588 <_calloc_r>
 8005972:	69e3      	ldr	r3, [r4, #28]
 8005974:	60f0      	str	r0, [r6, #12]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1e4      	bne.n	8005946 <_Balloc+0x2e>
 800597c:	2000      	movs	r0, #0
 800597e:	bd70      	pop	{r4, r5, r6, pc}
 8005980:	6802      	ldr	r2, [r0, #0]
 8005982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005986:	2300      	movs	r3, #0
 8005988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800598c:	e7f7      	b.n	800597e <_Balloc+0x66>
 800598e:	bf00      	nop
 8005990:	0800684d 	.word	0x0800684d
 8005994:	080068cd 	.word	0x080068cd

08005998 <_Bfree>:
 8005998:	b570      	push	{r4, r5, r6, lr}
 800599a:	69c6      	ldr	r6, [r0, #28]
 800599c:	4605      	mov	r5, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	b976      	cbnz	r6, 80059c0 <_Bfree+0x28>
 80059a2:	2010      	movs	r0, #16
 80059a4:	f7ff ff02 	bl	80057ac <malloc>
 80059a8:	4602      	mov	r2, r0
 80059aa:	61e8      	str	r0, [r5, #28]
 80059ac:	b920      	cbnz	r0, 80059b8 <_Bfree+0x20>
 80059ae:	4b09      	ldr	r3, [pc, #36]	@ (80059d4 <_Bfree+0x3c>)
 80059b0:	4809      	ldr	r0, [pc, #36]	@ (80059d8 <_Bfree+0x40>)
 80059b2:	218f      	movs	r1, #143	@ 0x8f
 80059b4:	f000 fdca 	bl	800654c <__assert_func>
 80059b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059bc:	6006      	str	r6, [r0, #0]
 80059be:	60c6      	str	r6, [r0, #12]
 80059c0:	b13c      	cbz	r4, 80059d2 <_Bfree+0x3a>
 80059c2:	69eb      	ldr	r3, [r5, #28]
 80059c4:	6862      	ldr	r2, [r4, #4]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059cc:	6021      	str	r1, [r4, #0]
 80059ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	0800684d 	.word	0x0800684d
 80059d8:	080068cd 	.word	0x080068cd

080059dc <__multadd>:
 80059dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e0:	690d      	ldr	r5, [r1, #16]
 80059e2:	4607      	mov	r7, r0
 80059e4:	460c      	mov	r4, r1
 80059e6:	461e      	mov	r6, r3
 80059e8:	f101 0c14 	add.w	ip, r1, #20
 80059ec:	2000      	movs	r0, #0
 80059ee:	f8dc 3000 	ldr.w	r3, [ip]
 80059f2:	b299      	uxth	r1, r3
 80059f4:	fb02 6101 	mla	r1, r2, r1, r6
 80059f8:	0c1e      	lsrs	r6, r3, #16
 80059fa:	0c0b      	lsrs	r3, r1, #16
 80059fc:	fb02 3306 	mla	r3, r2, r6, r3
 8005a00:	b289      	uxth	r1, r1
 8005a02:	3001      	adds	r0, #1
 8005a04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a08:	4285      	cmp	r5, r0
 8005a0a:	f84c 1b04 	str.w	r1, [ip], #4
 8005a0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a12:	dcec      	bgt.n	80059ee <__multadd+0x12>
 8005a14:	b30e      	cbz	r6, 8005a5a <__multadd+0x7e>
 8005a16:	68a3      	ldr	r3, [r4, #8]
 8005a18:	42ab      	cmp	r3, r5
 8005a1a:	dc19      	bgt.n	8005a50 <__multadd+0x74>
 8005a1c:	6861      	ldr	r1, [r4, #4]
 8005a1e:	4638      	mov	r0, r7
 8005a20:	3101      	adds	r1, #1
 8005a22:	f7ff ff79 	bl	8005918 <_Balloc>
 8005a26:	4680      	mov	r8, r0
 8005a28:	b928      	cbnz	r0, 8005a36 <__multadd+0x5a>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a60 <__multadd+0x84>)
 8005a2e:	480d      	ldr	r0, [pc, #52]	@ (8005a64 <__multadd+0x88>)
 8005a30:	21ba      	movs	r1, #186	@ 0xba
 8005a32:	f000 fd8b 	bl	800654c <__assert_func>
 8005a36:	6922      	ldr	r2, [r4, #16]
 8005a38:	3202      	adds	r2, #2
 8005a3a:	f104 010c 	add.w	r1, r4, #12
 8005a3e:	0092      	lsls	r2, r2, #2
 8005a40:	300c      	adds	r0, #12
 8005a42:	f000 fd75 	bl	8006530 <memcpy>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4638      	mov	r0, r7
 8005a4a:	f7ff ffa5 	bl	8005998 <_Bfree>
 8005a4e:	4644      	mov	r4, r8
 8005a50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a54:	3501      	adds	r5, #1
 8005a56:	615e      	str	r6, [r3, #20]
 8005a58:	6125      	str	r5, [r4, #16]
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a60:	080068bc 	.word	0x080068bc
 8005a64:	080068cd 	.word	0x080068cd

08005a68 <__hi0bits>:
 8005a68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	bf36      	itet	cc
 8005a70:	0403      	lslcc	r3, r0, #16
 8005a72:	2000      	movcs	r0, #0
 8005a74:	2010      	movcc	r0, #16
 8005a76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a7a:	bf3c      	itt	cc
 8005a7c:	021b      	lslcc	r3, r3, #8
 8005a7e:	3008      	addcc	r0, #8
 8005a80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a84:	bf3c      	itt	cc
 8005a86:	011b      	lslcc	r3, r3, #4
 8005a88:	3004      	addcc	r0, #4
 8005a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a8e:	bf3c      	itt	cc
 8005a90:	009b      	lslcc	r3, r3, #2
 8005a92:	3002      	addcc	r0, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	db05      	blt.n	8005aa4 <__hi0bits+0x3c>
 8005a98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005a9c:	f100 0001 	add.w	r0, r0, #1
 8005aa0:	bf08      	it	eq
 8005aa2:	2020      	moveq	r0, #32
 8005aa4:	4770      	bx	lr

08005aa6 <__lo0bits>:
 8005aa6:	6803      	ldr	r3, [r0, #0]
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	f013 0007 	ands.w	r0, r3, #7
 8005aae:	d00b      	beq.n	8005ac8 <__lo0bits+0x22>
 8005ab0:	07d9      	lsls	r1, r3, #31
 8005ab2:	d421      	bmi.n	8005af8 <__lo0bits+0x52>
 8005ab4:	0798      	lsls	r0, r3, #30
 8005ab6:	bf49      	itett	mi
 8005ab8:	085b      	lsrmi	r3, r3, #1
 8005aba:	089b      	lsrpl	r3, r3, #2
 8005abc:	2001      	movmi	r0, #1
 8005abe:	6013      	strmi	r3, [r2, #0]
 8005ac0:	bf5c      	itt	pl
 8005ac2:	6013      	strpl	r3, [r2, #0]
 8005ac4:	2002      	movpl	r0, #2
 8005ac6:	4770      	bx	lr
 8005ac8:	b299      	uxth	r1, r3
 8005aca:	b909      	cbnz	r1, 8005ad0 <__lo0bits+0x2a>
 8005acc:	0c1b      	lsrs	r3, r3, #16
 8005ace:	2010      	movs	r0, #16
 8005ad0:	b2d9      	uxtb	r1, r3
 8005ad2:	b909      	cbnz	r1, 8005ad8 <__lo0bits+0x32>
 8005ad4:	3008      	adds	r0, #8
 8005ad6:	0a1b      	lsrs	r3, r3, #8
 8005ad8:	0719      	lsls	r1, r3, #28
 8005ada:	bf04      	itt	eq
 8005adc:	091b      	lsreq	r3, r3, #4
 8005ade:	3004      	addeq	r0, #4
 8005ae0:	0799      	lsls	r1, r3, #30
 8005ae2:	bf04      	itt	eq
 8005ae4:	089b      	lsreq	r3, r3, #2
 8005ae6:	3002      	addeq	r0, #2
 8005ae8:	07d9      	lsls	r1, r3, #31
 8005aea:	d403      	bmi.n	8005af4 <__lo0bits+0x4e>
 8005aec:	085b      	lsrs	r3, r3, #1
 8005aee:	f100 0001 	add.w	r0, r0, #1
 8005af2:	d003      	beq.n	8005afc <__lo0bits+0x56>
 8005af4:	6013      	str	r3, [r2, #0]
 8005af6:	4770      	bx	lr
 8005af8:	2000      	movs	r0, #0
 8005afa:	4770      	bx	lr
 8005afc:	2020      	movs	r0, #32
 8005afe:	4770      	bx	lr

08005b00 <__i2b>:
 8005b00:	b510      	push	{r4, lr}
 8005b02:	460c      	mov	r4, r1
 8005b04:	2101      	movs	r1, #1
 8005b06:	f7ff ff07 	bl	8005918 <_Balloc>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	b928      	cbnz	r0, 8005b1a <__i2b+0x1a>
 8005b0e:	4b05      	ldr	r3, [pc, #20]	@ (8005b24 <__i2b+0x24>)
 8005b10:	4805      	ldr	r0, [pc, #20]	@ (8005b28 <__i2b+0x28>)
 8005b12:	f240 1145 	movw	r1, #325	@ 0x145
 8005b16:	f000 fd19 	bl	800654c <__assert_func>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	6144      	str	r4, [r0, #20]
 8005b1e:	6103      	str	r3, [r0, #16]
 8005b20:	bd10      	pop	{r4, pc}
 8005b22:	bf00      	nop
 8005b24:	080068bc 	.word	0x080068bc
 8005b28:	080068cd 	.word	0x080068cd

08005b2c <__multiply>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	4617      	mov	r7, r2
 8005b32:	690a      	ldr	r2, [r1, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	bfa8      	it	ge
 8005b3a:	463b      	movge	r3, r7
 8005b3c:	4689      	mov	r9, r1
 8005b3e:	bfa4      	itt	ge
 8005b40:	460f      	movge	r7, r1
 8005b42:	4699      	movge	r9, r3
 8005b44:	693d      	ldr	r5, [r7, #16]
 8005b46:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	6879      	ldr	r1, [r7, #4]
 8005b4e:	eb05 060a 	add.w	r6, r5, sl
 8005b52:	42b3      	cmp	r3, r6
 8005b54:	b085      	sub	sp, #20
 8005b56:	bfb8      	it	lt
 8005b58:	3101      	addlt	r1, #1
 8005b5a:	f7ff fedd 	bl	8005918 <_Balloc>
 8005b5e:	b930      	cbnz	r0, 8005b6e <__multiply+0x42>
 8005b60:	4602      	mov	r2, r0
 8005b62:	4b41      	ldr	r3, [pc, #260]	@ (8005c68 <__multiply+0x13c>)
 8005b64:	4841      	ldr	r0, [pc, #260]	@ (8005c6c <__multiply+0x140>)
 8005b66:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005b6a:	f000 fcef 	bl	800654c <__assert_func>
 8005b6e:	f100 0414 	add.w	r4, r0, #20
 8005b72:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005b76:	4623      	mov	r3, r4
 8005b78:	2200      	movs	r2, #0
 8005b7a:	4573      	cmp	r3, lr
 8005b7c:	d320      	bcc.n	8005bc0 <__multiply+0x94>
 8005b7e:	f107 0814 	add.w	r8, r7, #20
 8005b82:	f109 0114 	add.w	r1, r9, #20
 8005b86:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005b8a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005b8e:	9302      	str	r3, [sp, #8]
 8005b90:	1beb      	subs	r3, r5, r7
 8005b92:	3b15      	subs	r3, #21
 8005b94:	f023 0303 	bic.w	r3, r3, #3
 8005b98:	3304      	adds	r3, #4
 8005b9a:	3715      	adds	r7, #21
 8005b9c:	42bd      	cmp	r5, r7
 8005b9e:	bf38      	it	cc
 8005ba0:	2304      	movcc	r3, #4
 8005ba2:	9301      	str	r3, [sp, #4]
 8005ba4:	9b02      	ldr	r3, [sp, #8]
 8005ba6:	9103      	str	r1, [sp, #12]
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	d80c      	bhi.n	8005bc6 <__multiply+0x9a>
 8005bac:	2e00      	cmp	r6, #0
 8005bae:	dd03      	ble.n	8005bb8 <__multiply+0x8c>
 8005bb0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d055      	beq.n	8005c64 <__multiply+0x138>
 8005bb8:	6106      	str	r6, [r0, #16]
 8005bba:	b005      	add	sp, #20
 8005bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc0:	f843 2b04 	str.w	r2, [r3], #4
 8005bc4:	e7d9      	b.n	8005b7a <__multiply+0x4e>
 8005bc6:	f8b1 a000 	ldrh.w	sl, [r1]
 8005bca:	f1ba 0f00 	cmp.w	sl, #0
 8005bce:	d01f      	beq.n	8005c10 <__multiply+0xe4>
 8005bd0:	46c4      	mov	ip, r8
 8005bd2:	46a1      	mov	r9, r4
 8005bd4:	2700      	movs	r7, #0
 8005bd6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005bda:	f8d9 3000 	ldr.w	r3, [r9]
 8005bde:	fa1f fb82 	uxth.w	fp, r2
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	fb0a 330b 	mla	r3, sl, fp, r3
 8005be8:	443b      	add	r3, r7
 8005bea:	f8d9 7000 	ldr.w	r7, [r9]
 8005bee:	0c12      	lsrs	r2, r2, #16
 8005bf0:	0c3f      	lsrs	r7, r7, #16
 8005bf2:	fb0a 7202 	mla	r2, sl, r2, r7
 8005bf6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c00:	4565      	cmp	r5, ip
 8005c02:	f849 3b04 	str.w	r3, [r9], #4
 8005c06:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005c0a:	d8e4      	bhi.n	8005bd6 <__multiply+0xaa>
 8005c0c:	9b01      	ldr	r3, [sp, #4]
 8005c0e:	50e7      	str	r7, [r4, r3]
 8005c10:	9b03      	ldr	r3, [sp, #12]
 8005c12:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005c16:	3104      	adds	r1, #4
 8005c18:	f1b9 0f00 	cmp.w	r9, #0
 8005c1c:	d020      	beq.n	8005c60 <__multiply+0x134>
 8005c1e:	6823      	ldr	r3, [r4, #0]
 8005c20:	4647      	mov	r7, r8
 8005c22:	46a4      	mov	ip, r4
 8005c24:	f04f 0a00 	mov.w	sl, #0
 8005c28:	f8b7 b000 	ldrh.w	fp, [r7]
 8005c2c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005c30:	fb09 220b 	mla	r2, r9, fp, r2
 8005c34:	4452      	add	r2, sl
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005c3c:	f84c 3b04 	str.w	r3, [ip], #4
 8005c40:	f857 3b04 	ldr.w	r3, [r7], #4
 8005c44:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c48:	f8bc 3000 	ldrh.w	r3, [ip]
 8005c4c:	fb09 330a 	mla	r3, r9, sl, r3
 8005c50:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005c54:	42bd      	cmp	r5, r7
 8005c56:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c5a:	d8e5      	bhi.n	8005c28 <__multiply+0xfc>
 8005c5c:	9a01      	ldr	r2, [sp, #4]
 8005c5e:	50a3      	str	r3, [r4, r2]
 8005c60:	3404      	adds	r4, #4
 8005c62:	e79f      	b.n	8005ba4 <__multiply+0x78>
 8005c64:	3e01      	subs	r6, #1
 8005c66:	e7a1      	b.n	8005bac <__multiply+0x80>
 8005c68:	080068bc 	.word	0x080068bc
 8005c6c:	080068cd 	.word	0x080068cd

08005c70 <__pow5mult>:
 8005c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c74:	4615      	mov	r5, r2
 8005c76:	f012 0203 	ands.w	r2, r2, #3
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	460e      	mov	r6, r1
 8005c7e:	d007      	beq.n	8005c90 <__pow5mult+0x20>
 8005c80:	4c25      	ldr	r4, [pc, #148]	@ (8005d18 <__pow5mult+0xa8>)
 8005c82:	3a01      	subs	r2, #1
 8005c84:	2300      	movs	r3, #0
 8005c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c8a:	f7ff fea7 	bl	80059dc <__multadd>
 8005c8e:	4606      	mov	r6, r0
 8005c90:	10ad      	asrs	r5, r5, #2
 8005c92:	d03d      	beq.n	8005d10 <__pow5mult+0xa0>
 8005c94:	69fc      	ldr	r4, [r7, #28]
 8005c96:	b97c      	cbnz	r4, 8005cb8 <__pow5mult+0x48>
 8005c98:	2010      	movs	r0, #16
 8005c9a:	f7ff fd87 	bl	80057ac <malloc>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	61f8      	str	r0, [r7, #28]
 8005ca2:	b928      	cbnz	r0, 8005cb0 <__pow5mult+0x40>
 8005ca4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d1c <__pow5mult+0xac>)
 8005ca6:	481e      	ldr	r0, [pc, #120]	@ (8005d20 <__pow5mult+0xb0>)
 8005ca8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005cac:	f000 fc4e 	bl	800654c <__assert_func>
 8005cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005cb4:	6004      	str	r4, [r0, #0]
 8005cb6:	60c4      	str	r4, [r0, #12]
 8005cb8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cc0:	b94c      	cbnz	r4, 8005cd6 <__pow5mult+0x66>
 8005cc2:	f240 2171 	movw	r1, #625	@ 0x271
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f7ff ff1a 	bl	8005b00 <__i2b>
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cd2:	4604      	mov	r4, r0
 8005cd4:	6003      	str	r3, [r0, #0]
 8005cd6:	f04f 0900 	mov.w	r9, #0
 8005cda:	07eb      	lsls	r3, r5, #31
 8005cdc:	d50a      	bpl.n	8005cf4 <__pow5mult+0x84>
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4622      	mov	r2, r4
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f7ff ff22 	bl	8005b2c <__multiply>
 8005ce8:	4631      	mov	r1, r6
 8005cea:	4680      	mov	r8, r0
 8005cec:	4638      	mov	r0, r7
 8005cee:	f7ff fe53 	bl	8005998 <_Bfree>
 8005cf2:	4646      	mov	r6, r8
 8005cf4:	106d      	asrs	r5, r5, #1
 8005cf6:	d00b      	beq.n	8005d10 <__pow5mult+0xa0>
 8005cf8:	6820      	ldr	r0, [r4, #0]
 8005cfa:	b938      	cbnz	r0, 8005d0c <__pow5mult+0x9c>
 8005cfc:	4622      	mov	r2, r4
 8005cfe:	4621      	mov	r1, r4
 8005d00:	4638      	mov	r0, r7
 8005d02:	f7ff ff13 	bl	8005b2c <__multiply>
 8005d06:	6020      	str	r0, [r4, #0]
 8005d08:	f8c0 9000 	str.w	r9, [r0]
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	e7e4      	b.n	8005cda <__pow5mult+0x6a>
 8005d10:	4630      	mov	r0, r6
 8005d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d16:	bf00      	nop
 8005d18:	08006980 	.word	0x08006980
 8005d1c:	0800684d 	.word	0x0800684d
 8005d20:	080068cd 	.word	0x080068cd

08005d24 <__lshift>:
 8005d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d28:	460c      	mov	r4, r1
 8005d2a:	6849      	ldr	r1, [r1, #4]
 8005d2c:	6923      	ldr	r3, [r4, #16]
 8005d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d32:	68a3      	ldr	r3, [r4, #8]
 8005d34:	4607      	mov	r7, r0
 8005d36:	4691      	mov	r9, r2
 8005d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d3c:	f108 0601 	add.w	r6, r8, #1
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	db0b      	blt.n	8005d5c <__lshift+0x38>
 8005d44:	4638      	mov	r0, r7
 8005d46:	f7ff fde7 	bl	8005918 <_Balloc>
 8005d4a:	4605      	mov	r5, r0
 8005d4c:	b948      	cbnz	r0, 8005d62 <__lshift+0x3e>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	4b28      	ldr	r3, [pc, #160]	@ (8005df4 <__lshift+0xd0>)
 8005d52:	4829      	ldr	r0, [pc, #164]	@ (8005df8 <__lshift+0xd4>)
 8005d54:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005d58:	f000 fbf8 	bl	800654c <__assert_func>
 8005d5c:	3101      	adds	r1, #1
 8005d5e:	005b      	lsls	r3, r3, #1
 8005d60:	e7ee      	b.n	8005d40 <__lshift+0x1c>
 8005d62:	2300      	movs	r3, #0
 8005d64:	f100 0114 	add.w	r1, r0, #20
 8005d68:	f100 0210 	add.w	r2, r0, #16
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4553      	cmp	r3, sl
 8005d70:	db33      	blt.n	8005dda <__lshift+0xb6>
 8005d72:	6920      	ldr	r0, [r4, #16]
 8005d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d78:	f104 0314 	add.w	r3, r4, #20
 8005d7c:	f019 091f 	ands.w	r9, r9, #31
 8005d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005d88:	d02b      	beq.n	8005de2 <__lshift+0xbe>
 8005d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8005d8e:	468a      	mov	sl, r1
 8005d90:	2200      	movs	r2, #0
 8005d92:	6818      	ldr	r0, [r3, #0]
 8005d94:	fa00 f009 	lsl.w	r0, r0, r9
 8005d98:	4310      	orrs	r0, r2
 8005d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8005d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005da2:	459c      	cmp	ip, r3
 8005da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8005da8:	d8f3      	bhi.n	8005d92 <__lshift+0x6e>
 8005daa:	ebac 0304 	sub.w	r3, ip, r4
 8005dae:	3b15      	subs	r3, #21
 8005db0:	f023 0303 	bic.w	r3, r3, #3
 8005db4:	3304      	adds	r3, #4
 8005db6:	f104 0015 	add.w	r0, r4, #21
 8005dba:	4560      	cmp	r0, ip
 8005dbc:	bf88      	it	hi
 8005dbe:	2304      	movhi	r3, #4
 8005dc0:	50ca      	str	r2, [r1, r3]
 8005dc2:	b10a      	cbz	r2, 8005dc8 <__lshift+0xa4>
 8005dc4:	f108 0602 	add.w	r6, r8, #2
 8005dc8:	3e01      	subs	r6, #1
 8005dca:	4638      	mov	r0, r7
 8005dcc:	612e      	str	r6, [r5, #16]
 8005dce:	4621      	mov	r1, r4
 8005dd0:	f7ff fde2 	bl	8005998 <_Bfree>
 8005dd4:	4628      	mov	r0, r5
 8005dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8005dde:	3301      	adds	r3, #1
 8005de0:	e7c5      	b.n	8005d6e <__lshift+0x4a>
 8005de2:	3904      	subs	r1, #4
 8005de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005de8:	f841 2f04 	str.w	r2, [r1, #4]!
 8005dec:	459c      	cmp	ip, r3
 8005dee:	d8f9      	bhi.n	8005de4 <__lshift+0xc0>
 8005df0:	e7ea      	b.n	8005dc8 <__lshift+0xa4>
 8005df2:	bf00      	nop
 8005df4:	080068bc 	.word	0x080068bc
 8005df8:	080068cd 	.word	0x080068cd

08005dfc <__mcmp>:
 8005dfc:	690a      	ldr	r2, [r1, #16]
 8005dfe:	4603      	mov	r3, r0
 8005e00:	6900      	ldr	r0, [r0, #16]
 8005e02:	1a80      	subs	r0, r0, r2
 8005e04:	b530      	push	{r4, r5, lr}
 8005e06:	d10e      	bne.n	8005e26 <__mcmp+0x2a>
 8005e08:	3314      	adds	r3, #20
 8005e0a:	3114      	adds	r1, #20
 8005e0c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e10:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e14:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e18:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e1c:	4295      	cmp	r5, r2
 8005e1e:	d003      	beq.n	8005e28 <__mcmp+0x2c>
 8005e20:	d205      	bcs.n	8005e2e <__mcmp+0x32>
 8005e22:	f04f 30ff 	mov.w	r0, #4294967295
 8005e26:	bd30      	pop	{r4, r5, pc}
 8005e28:	42a3      	cmp	r3, r4
 8005e2a:	d3f3      	bcc.n	8005e14 <__mcmp+0x18>
 8005e2c:	e7fb      	b.n	8005e26 <__mcmp+0x2a>
 8005e2e:	2001      	movs	r0, #1
 8005e30:	e7f9      	b.n	8005e26 <__mcmp+0x2a>
	...

08005e34 <__mdiff>:
 8005e34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	4689      	mov	r9, r1
 8005e3a:	4606      	mov	r6, r0
 8005e3c:	4611      	mov	r1, r2
 8005e3e:	4648      	mov	r0, r9
 8005e40:	4614      	mov	r4, r2
 8005e42:	f7ff ffdb 	bl	8005dfc <__mcmp>
 8005e46:	1e05      	subs	r5, r0, #0
 8005e48:	d112      	bne.n	8005e70 <__mdiff+0x3c>
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	4630      	mov	r0, r6
 8005e4e:	f7ff fd63 	bl	8005918 <_Balloc>
 8005e52:	4602      	mov	r2, r0
 8005e54:	b928      	cbnz	r0, 8005e62 <__mdiff+0x2e>
 8005e56:	4b3f      	ldr	r3, [pc, #252]	@ (8005f54 <__mdiff+0x120>)
 8005e58:	f240 2137 	movw	r1, #567	@ 0x237
 8005e5c:	483e      	ldr	r0, [pc, #248]	@ (8005f58 <__mdiff+0x124>)
 8005e5e:	f000 fb75 	bl	800654c <__assert_func>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005e68:	4610      	mov	r0, r2
 8005e6a:	b003      	add	sp, #12
 8005e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e70:	bfbc      	itt	lt
 8005e72:	464b      	movlt	r3, r9
 8005e74:	46a1      	movlt	r9, r4
 8005e76:	4630      	mov	r0, r6
 8005e78:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005e7c:	bfba      	itte	lt
 8005e7e:	461c      	movlt	r4, r3
 8005e80:	2501      	movlt	r5, #1
 8005e82:	2500      	movge	r5, #0
 8005e84:	f7ff fd48 	bl	8005918 <_Balloc>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	b918      	cbnz	r0, 8005e94 <__mdiff+0x60>
 8005e8c:	4b31      	ldr	r3, [pc, #196]	@ (8005f54 <__mdiff+0x120>)
 8005e8e:	f240 2145 	movw	r1, #581	@ 0x245
 8005e92:	e7e3      	b.n	8005e5c <__mdiff+0x28>
 8005e94:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005e98:	6926      	ldr	r6, [r4, #16]
 8005e9a:	60c5      	str	r5, [r0, #12]
 8005e9c:	f109 0310 	add.w	r3, r9, #16
 8005ea0:	f109 0514 	add.w	r5, r9, #20
 8005ea4:	f104 0e14 	add.w	lr, r4, #20
 8005ea8:	f100 0b14 	add.w	fp, r0, #20
 8005eac:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005eb0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005eb4:	9301      	str	r3, [sp, #4]
 8005eb6:	46d9      	mov	r9, fp
 8005eb8:	f04f 0c00 	mov.w	ip, #0
 8005ebc:	9b01      	ldr	r3, [sp, #4]
 8005ebe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005ec2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005ec6:	9301      	str	r3, [sp, #4]
 8005ec8:	fa1f f38a 	uxth.w	r3, sl
 8005ecc:	4619      	mov	r1, r3
 8005ece:	b283      	uxth	r3, r0
 8005ed0:	1acb      	subs	r3, r1, r3
 8005ed2:	0c00      	lsrs	r0, r0, #16
 8005ed4:	4463      	add	r3, ip
 8005ed6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005eda:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ee4:	4576      	cmp	r6, lr
 8005ee6:	f849 3b04 	str.w	r3, [r9], #4
 8005eea:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005eee:	d8e5      	bhi.n	8005ebc <__mdiff+0x88>
 8005ef0:	1b33      	subs	r3, r6, r4
 8005ef2:	3b15      	subs	r3, #21
 8005ef4:	f023 0303 	bic.w	r3, r3, #3
 8005ef8:	3415      	adds	r4, #21
 8005efa:	3304      	adds	r3, #4
 8005efc:	42a6      	cmp	r6, r4
 8005efe:	bf38      	it	cc
 8005f00:	2304      	movcc	r3, #4
 8005f02:	441d      	add	r5, r3
 8005f04:	445b      	add	r3, fp
 8005f06:	461e      	mov	r6, r3
 8005f08:	462c      	mov	r4, r5
 8005f0a:	4544      	cmp	r4, r8
 8005f0c:	d30e      	bcc.n	8005f2c <__mdiff+0xf8>
 8005f0e:	f108 0103 	add.w	r1, r8, #3
 8005f12:	1b49      	subs	r1, r1, r5
 8005f14:	f021 0103 	bic.w	r1, r1, #3
 8005f18:	3d03      	subs	r5, #3
 8005f1a:	45a8      	cmp	r8, r5
 8005f1c:	bf38      	it	cc
 8005f1e:	2100      	movcc	r1, #0
 8005f20:	440b      	add	r3, r1
 8005f22:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f26:	b191      	cbz	r1, 8005f4e <__mdiff+0x11a>
 8005f28:	6117      	str	r7, [r2, #16]
 8005f2a:	e79d      	b.n	8005e68 <__mdiff+0x34>
 8005f2c:	f854 1b04 	ldr.w	r1, [r4], #4
 8005f30:	46e6      	mov	lr, ip
 8005f32:	0c08      	lsrs	r0, r1, #16
 8005f34:	fa1c fc81 	uxtah	ip, ip, r1
 8005f38:	4471      	add	r1, lr
 8005f3a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005f3e:	b289      	uxth	r1, r1
 8005f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005f44:	f846 1b04 	str.w	r1, [r6], #4
 8005f48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005f4c:	e7dd      	b.n	8005f0a <__mdiff+0xd6>
 8005f4e:	3f01      	subs	r7, #1
 8005f50:	e7e7      	b.n	8005f22 <__mdiff+0xee>
 8005f52:	bf00      	nop
 8005f54:	080068bc 	.word	0x080068bc
 8005f58:	080068cd 	.word	0x080068cd

08005f5c <__d2b>:
 8005f5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005f60:	460f      	mov	r7, r1
 8005f62:	2101      	movs	r1, #1
 8005f64:	ec59 8b10 	vmov	r8, r9, d0
 8005f68:	4616      	mov	r6, r2
 8005f6a:	f7ff fcd5 	bl	8005918 <_Balloc>
 8005f6e:	4604      	mov	r4, r0
 8005f70:	b930      	cbnz	r0, 8005f80 <__d2b+0x24>
 8005f72:	4602      	mov	r2, r0
 8005f74:	4b23      	ldr	r3, [pc, #140]	@ (8006004 <__d2b+0xa8>)
 8005f76:	4824      	ldr	r0, [pc, #144]	@ (8006008 <__d2b+0xac>)
 8005f78:	f240 310f 	movw	r1, #783	@ 0x30f
 8005f7c:	f000 fae6 	bl	800654c <__assert_func>
 8005f80:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005f84:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005f88:	b10d      	cbz	r5, 8005f8e <__d2b+0x32>
 8005f8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f8e:	9301      	str	r3, [sp, #4]
 8005f90:	f1b8 0300 	subs.w	r3, r8, #0
 8005f94:	d023      	beq.n	8005fde <__d2b+0x82>
 8005f96:	4668      	mov	r0, sp
 8005f98:	9300      	str	r3, [sp, #0]
 8005f9a:	f7ff fd84 	bl	8005aa6 <__lo0bits>
 8005f9e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005fa2:	b1d0      	cbz	r0, 8005fda <__d2b+0x7e>
 8005fa4:	f1c0 0320 	rsb	r3, r0, #32
 8005fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fac:	430b      	orrs	r3, r1
 8005fae:	40c2      	lsrs	r2, r0
 8005fb0:	6163      	str	r3, [r4, #20]
 8005fb2:	9201      	str	r2, [sp, #4]
 8005fb4:	9b01      	ldr	r3, [sp, #4]
 8005fb6:	61a3      	str	r3, [r4, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	bf0c      	ite	eq
 8005fbc:	2201      	moveq	r2, #1
 8005fbe:	2202      	movne	r2, #2
 8005fc0:	6122      	str	r2, [r4, #16]
 8005fc2:	b1a5      	cbz	r5, 8005fee <__d2b+0x92>
 8005fc4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005fc8:	4405      	add	r5, r0
 8005fca:	603d      	str	r5, [r7, #0]
 8005fcc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005fd0:	6030      	str	r0, [r6, #0]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	b003      	add	sp, #12
 8005fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fda:	6161      	str	r1, [r4, #20]
 8005fdc:	e7ea      	b.n	8005fb4 <__d2b+0x58>
 8005fde:	a801      	add	r0, sp, #4
 8005fe0:	f7ff fd61 	bl	8005aa6 <__lo0bits>
 8005fe4:	9b01      	ldr	r3, [sp, #4]
 8005fe6:	6163      	str	r3, [r4, #20]
 8005fe8:	3020      	adds	r0, #32
 8005fea:	2201      	movs	r2, #1
 8005fec:	e7e8      	b.n	8005fc0 <__d2b+0x64>
 8005fee:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005ff2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005ff6:	6038      	str	r0, [r7, #0]
 8005ff8:	6918      	ldr	r0, [r3, #16]
 8005ffa:	f7ff fd35 	bl	8005a68 <__hi0bits>
 8005ffe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006002:	e7e5      	b.n	8005fd0 <__d2b+0x74>
 8006004:	080068bc 	.word	0x080068bc
 8006008:	080068cd 	.word	0x080068cd

0800600c <__sfputc_r>:
 800600c:	6893      	ldr	r3, [r2, #8]
 800600e:	3b01      	subs	r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	b410      	push	{r4}
 8006014:	6093      	str	r3, [r2, #8]
 8006016:	da08      	bge.n	800602a <__sfputc_r+0x1e>
 8006018:	6994      	ldr	r4, [r2, #24]
 800601a:	42a3      	cmp	r3, r4
 800601c:	db01      	blt.n	8006022 <__sfputc_r+0x16>
 800601e:	290a      	cmp	r1, #10
 8006020:	d103      	bne.n	800602a <__sfputc_r+0x1e>
 8006022:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006026:	f000 b9df 	b.w	80063e8 <__swbuf_r>
 800602a:	6813      	ldr	r3, [r2, #0]
 800602c:	1c58      	adds	r0, r3, #1
 800602e:	6010      	str	r0, [r2, #0]
 8006030:	7019      	strb	r1, [r3, #0]
 8006032:	4608      	mov	r0, r1
 8006034:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006038:	4770      	bx	lr

0800603a <__sfputs_r>:
 800603a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603c:	4606      	mov	r6, r0
 800603e:	460f      	mov	r7, r1
 8006040:	4614      	mov	r4, r2
 8006042:	18d5      	adds	r5, r2, r3
 8006044:	42ac      	cmp	r4, r5
 8006046:	d101      	bne.n	800604c <__sfputs_r+0x12>
 8006048:	2000      	movs	r0, #0
 800604a:	e007      	b.n	800605c <__sfputs_r+0x22>
 800604c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006050:	463a      	mov	r2, r7
 8006052:	4630      	mov	r0, r6
 8006054:	f7ff ffda 	bl	800600c <__sfputc_r>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d1f3      	bne.n	8006044 <__sfputs_r+0xa>
 800605c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006060 <_vfiprintf_r>:
 8006060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006064:	460d      	mov	r5, r1
 8006066:	b09d      	sub	sp, #116	@ 0x74
 8006068:	4614      	mov	r4, r2
 800606a:	4698      	mov	r8, r3
 800606c:	4606      	mov	r6, r0
 800606e:	b118      	cbz	r0, 8006078 <_vfiprintf_r+0x18>
 8006070:	6a03      	ldr	r3, [r0, #32]
 8006072:	b90b      	cbnz	r3, 8006078 <_vfiprintf_r+0x18>
 8006074:	f7fe fbec 	bl	8004850 <__sinit>
 8006078:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800607a:	07d9      	lsls	r1, r3, #31
 800607c:	d405      	bmi.n	800608a <_vfiprintf_r+0x2a>
 800607e:	89ab      	ldrh	r3, [r5, #12]
 8006080:	059a      	lsls	r2, r3, #22
 8006082:	d402      	bmi.n	800608a <_vfiprintf_r+0x2a>
 8006084:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006086:	f7fe fcec 	bl	8004a62 <__retarget_lock_acquire_recursive>
 800608a:	89ab      	ldrh	r3, [r5, #12]
 800608c:	071b      	lsls	r3, r3, #28
 800608e:	d501      	bpl.n	8006094 <_vfiprintf_r+0x34>
 8006090:	692b      	ldr	r3, [r5, #16]
 8006092:	b99b      	cbnz	r3, 80060bc <_vfiprintf_r+0x5c>
 8006094:	4629      	mov	r1, r5
 8006096:	4630      	mov	r0, r6
 8006098:	f000 f9e4 	bl	8006464 <__swsetup_r>
 800609c:	b170      	cbz	r0, 80060bc <_vfiprintf_r+0x5c>
 800609e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80060a0:	07dc      	lsls	r4, r3, #31
 80060a2:	d504      	bpl.n	80060ae <_vfiprintf_r+0x4e>
 80060a4:	f04f 30ff 	mov.w	r0, #4294967295
 80060a8:	b01d      	add	sp, #116	@ 0x74
 80060aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ae:	89ab      	ldrh	r3, [r5, #12]
 80060b0:	0598      	lsls	r0, r3, #22
 80060b2:	d4f7      	bmi.n	80060a4 <_vfiprintf_r+0x44>
 80060b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060b6:	f7fe fcd5 	bl	8004a64 <__retarget_lock_release_recursive>
 80060ba:	e7f3      	b.n	80060a4 <_vfiprintf_r+0x44>
 80060bc:	2300      	movs	r3, #0
 80060be:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c0:	2320      	movs	r3, #32
 80060c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80060c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80060ca:	2330      	movs	r3, #48	@ 0x30
 80060cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800627c <_vfiprintf_r+0x21c>
 80060d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80060d4:	f04f 0901 	mov.w	r9, #1
 80060d8:	4623      	mov	r3, r4
 80060da:	469a      	mov	sl, r3
 80060dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060e0:	b10a      	cbz	r2, 80060e6 <_vfiprintf_r+0x86>
 80060e2:	2a25      	cmp	r2, #37	@ 0x25
 80060e4:	d1f9      	bne.n	80060da <_vfiprintf_r+0x7a>
 80060e6:	ebba 0b04 	subs.w	fp, sl, r4
 80060ea:	d00b      	beq.n	8006104 <_vfiprintf_r+0xa4>
 80060ec:	465b      	mov	r3, fp
 80060ee:	4622      	mov	r2, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	4630      	mov	r0, r6
 80060f4:	f7ff ffa1 	bl	800603a <__sfputs_r>
 80060f8:	3001      	adds	r0, #1
 80060fa:	f000 80a7 	beq.w	800624c <_vfiprintf_r+0x1ec>
 80060fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006100:	445a      	add	r2, fp
 8006102:	9209      	str	r2, [sp, #36]	@ 0x24
 8006104:	f89a 3000 	ldrb.w	r3, [sl]
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 809f 	beq.w	800624c <_vfiprintf_r+0x1ec>
 800610e:	2300      	movs	r3, #0
 8006110:	f04f 32ff 	mov.w	r2, #4294967295
 8006114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006118:	f10a 0a01 	add.w	sl, sl, #1
 800611c:	9304      	str	r3, [sp, #16]
 800611e:	9307      	str	r3, [sp, #28]
 8006120:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006124:	931a      	str	r3, [sp, #104]	@ 0x68
 8006126:	4654      	mov	r4, sl
 8006128:	2205      	movs	r2, #5
 800612a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800612e:	4853      	ldr	r0, [pc, #332]	@ (800627c <_vfiprintf_r+0x21c>)
 8006130:	f7fa f856 	bl	80001e0 <memchr>
 8006134:	9a04      	ldr	r2, [sp, #16]
 8006136:	b9d8      	cbnz	r0, 8006170 <_vfiprintf_r+0x110>
 8006138:	06d1      	lsls	r1, r2, #27
 800613a:	bf44      	itt	mi
 800613c:	2320      	movmi	r3, #32
 800613e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006142:	0713      	lsls	r3, r2, #28
 8006144:	bf44      	itt	mi
 8006146:	232b      	movmi	r3, #43	@ 0x2b
 8006148:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800614c:	f89a 3000 	ldrb.w	r3, [sl]
 8006150:	2b2a      	cmp	r3, #42	@ 0x2a
 8006152:	d015      	beq.n	8006180 <_vfiprintf_r+0x120>
 8006154:	9a07      	ldr	r2, [sp, #28]
 8006156:	4654      	mov	r4, sl
 8006158:	2000      	movs	r0, #0
 800615a:	f04f 0c0a 	mov.w	ip, #10
 800615e:	4621      	mov	r1, r4
 8006160:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006164:	3b30      	subs	r3, #48	@ 0x30
 8006166:	2b09      	cmp	r3, #9
 8006168:	d94b      	bls.n	8006202 <_vfiprintf_r+0x1a2>
 800616a:	b1b0      	cbz	r0, 800619a <_vfiprintf_r+0x13a>
 800616c:	9207      	str	r2, [sp, #28]
 800616e:	e014      	b.n	800619a <_vfiprintf_r+0x13a>
 8006170:	eba0 0308 	sub.w	r3, r0, r8
 8006174:	fa09 f303 	lsl.w	r3, r9, r3
 8006178:	4313      	orrs	r3, r2
 800617a:	9304      	str	r3, [sp, #16]
 800617c:	46a2      	mov	sl, r4
 800617e:	e7d2      	b.n	8006126 <_vfiprintf_r+0xc6>
 8006180:	9b03      	ldr	r3, [sp, #12]
 8006182:	1d19      	adds	r1, r3, #4
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	9103      	str	r1, [sp, #12]
 8006188:	2b00      	cmp	r3, #0
 800618a:	bfbb      	ittet	lt
 800618c:	425b      	neglt	r3, r3
 800618e:	f042 0202 	orrlt.w	r2, r2, #2
 8006192:	9307      	strge	r3, [sp, #28]
 8006194:	9307      	strlt	r3, [sp, #28]
 8006196:	bfb8      	it	lt
 8006198:	9204      	strlt	r2, [sp, #16]
 800619a:	7823      	ldrb	r3, [r4, #0]
 800619c:	2b2e      	cmp	r3, #46	@ 0x2e
 800619e:	d10a      	bne.n	80061b6 <_vfiprintf_r+0x156>
 80061a0:	7863      	ldrb	r3, [r4, #1]
 80061a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80061a4:	d132      	bne.n	800620c <_vfiprintf_r+0x1ac>
 80061a6:	9b03      	ldr	r3, [sp, #12]
 80061a8:	1d1a      	adds	r2, r3, #4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	9203      	str	r2, [sp, #12]
 80061ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80061b2:	3402      	adds	r4, #2
 80061b4:	9305      	str	r3, [sp, #20]
 80061b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800628c <_vfiprintf_r+0x22c>
 80061ba:	7821      	ldrb	r1, [r4, #0]
 80061bc:	2203      	movs	r2, #3
 80061be:	4650      	mov	r0, sl
 80061c0:	f7fa f80e 	bl	80001e0 <memchr>
 80061c4:	b138      	cbz	r0, 80061d6 <_vfiprintf_r+0x176>
 80061c6:	9b04      	ldr	r3, [sp, #16]
 80061c8:	eba0 000a 	sub.w	r0, r0, sl
 80061cc:	2240      	movs	r2, #64	@ 0x40
 80061ce:	4082      	lsls	r2, r0
 80061d0:	4313      	orrs	r3, r2
 80061d2:	3401      	adds	r4, #1
 80061d4:	9304      	str	r3, [sp, #16]
 80061d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061da:	4829      	ldr	r0, [pc, #164]	@ (8006280 <_vfiprintf_r+0x220>)
 80061dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80061e0:	2206      	movs	r2, #6
 80061e2:	f7f9 fffd 	bl	80001e0 <memchr>
 80061e6:	2800      	cmp	r0, #0
 80061e8:	d03f      	beq.n	800626a <_vfiprintf_r+0x20a>
 80061ea:	4b26      	ldr	r3, [pc, #152]	@ (8006284 <_vfiprintf_r+0x224>)
 80061ec:	bb1b      	cbnz	r3, 8006236 <_vfiprintf_r+0x1d6>
 80061ee:	9b03      	ldr	r3, [sp, #12]
 80061f0:	3307      	adds	r3, #7
 80061f2:	f023 0307 	bic.w	r3, r3, #7
 80061f6:	3308      	adds	r3, #8
 80061f8:	9303      	str	r3, [sp, #12]
 80061fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fc:	443b      	add	r3, r7
 80061fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006200:	e76a      	b.n	80060d8 <_vfiprintf_r+0x78>
 8006202:	fb0c 3202 	mla	r2, ip, r2, r3
 8006206:	460c      	mov	r4, r1
 8006208:	2001      	movs	r0, #1
 800620a:	e7a8      	b.n	800615e <_vfiprintf_r+0xfe>
 800620c:	2300      	movs	r3, #0
 800620e:	3401      	adds	r4, #1
 8006210:	9305      	str	r3, [sp, #20]
 8006212:	4619      	mov	r1, r3
 8006214:	f04f 0c0a 	mov.w	ip, #10
 8006218:	4620      	mov	r0, r4
 800621a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800621e:	3a30      	subs	r2, #48	@ 0x30
 8006220:	2a09      	cmp	r2, #9
 8006222:	d903      	bls.n	800622c <_vfiprintf_r+0x1cc>
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0c6      	beq.n	80061b6 <_vfiprintf_r+0x156>
 8006228:	9105      	str	r1, [sp, #20]
 800622a:	e7c4      	b.n	80061b6 <_vfiprintf_r+0x156>
 800622c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006230:	4604      	mov	r4, r0
 8006232:	2301      	movs	r3, #1
 8006234:	e7f0      	b.n	8006218 <_vfiprintf_r+0x1b8>
 8006236:	ab03      	add	r3, sp, #12
 8006238:	9300      	str	r3, [sp, #0]
 800623a:	462a      	mov	r2, r5
 800623c:	4b12      	ldr	r3, [pc, #72]	@ (8006288 <_vfiprintf_r+0x228>)
 800623e:	a904      	add	r1, sp, #16
 8006240:	4630      	mov	r0, r6
 8006242:	f7fd fec3 	bl	8003fcc <_printf_float>
 8006246:	4607      	mov	r7, r0
 8006248:	1c78      	adds	r0, r7, #1
 800624a:	d1d6      	bne.n	80061fa <_vfiprintf_r+0x19a>
 800624c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800624e:	07d9      	lsls	r1, r3, #31
 8006250:	d405      	bmi.n	800625e <_vfiprintf_r+0x1fe>
 8006252:	89ab      	ldrh	r3, [r5, #12]
 8006254:	059a      	lsls	r2, r3, #22
 8006256:	d402      	bmi.n	800625e <_vfiprintf_r+0x1fe>
 8006258:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800625a:	f7fe fc03 	bl	8004a64 <__retarget_lock_release_recursive>
 800625e:	89ab      	ldrh	r3, [r5, #12]
 8006260:	065b      	lsls	r3, r3, #25
 8006262:	f53f af1f 	bmi.w	80060a4 <_vfiprintf_r+0x44>
 8006266:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006268:	e71e      	b.n	80060a8 <_vfiprintf_r+0x48>
 800626a:	ab03      	add	r3, sp, #12
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	462a      	mov	r2, r5
 8006270:	4b05      	ldr	r3, [pc, #20]	@ (8006288 <_vfiprintf_r+0x228>)
 8006272:	a904      	add	r1, sp, #16
 8006274:	4630      	mov	r0, r6
 8006276:	f7fe f941 	bl	80044fc <_printf_i>
 800627a:	e7e4      	b.n	8006246 <_vfiprintf_r+0x1e6>
 800627c:	08006926 	.word	0x08006926
 8006280:	08006930 	.word	0x08006930
 8006284:	08003fcd 	.word	0x08003fcd
 8006288:	0800603b 	.word	0x0800603b
 800628c:	0800692c 	.word	0x0800692c

08006290 <__sflush_r>:
 8006290:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	0716      	lsls	r6, r2, #28
 800629a:	4605      	mov	r5, r0
 800629c:	460c      	mov	r4, r1
 800629e:	d454      	bmi.n	800634a <__sflush_r+0xba>
 80062a0:	684b      	ldr	r3, [r1, #4]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	dc02      	bgt.n	80062ac <__sflush_r+0x1c>
 80062a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	dd48      	ble.n	800633e <__sflush_r+0xae>
 80062ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062ae:	2e00      	cmp	r6, #0
 80062b0:	d045      	beq.n	800633e <__sflush_r+0xae>
 80062b2:	2300      	movs	r3, #0
 80062b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80062b8:	682f      	ldr	r7, [r5, #0]
 80062ba:	6a21      	ldr	r1, [r4, #32]
 80062bc:	602b      	str	r3, [r5, #0]
 80062be:	d030      	beq.n	8006322 <__sflush_r+0x92>
 80062c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80062c2:	89a3      	ldrh	r3, [r4, #12]
 80062c4:	0759      	lsls	r1, r3, #29
 80062c6:	d505      	bpl.n	80062d4 <__sflush_r+0x44>
 80062c8:	6863      	ldr	r3, [r4, #4]
 80062ca:	1ad2      	subs	r2, r2, r3
 80062cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80062ce:	b10b      	cbz	r3, 80062d4 <__sflush_r+0x44>
 80062d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	2300      	movs	r3, #0
 80062d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80062d8:	6a21      	ldr	r1, [r4, #32]
 80062da:	4628      	mov	r0, r5
 80062dc:	47b0      	blx	r6
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	89a3      	ldrh	r3, [r4, #12]
 80062e2:	d106      	bne.n	80062f2 <__sflush_r+0x62>
 80062e4:	6829      	ldr	r1, [r5, #0]
 80062e6:	291d      	cmp	r1, #29
 80062e8:	d82b      	bhi.n	8006342 <__sflush_r+0xb2>
 80062ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006394 <__sflush_r+0x104>)
 80062ec:	40ca      	lsrs	r2, r1
 80062ee:	07d6      	lsls	r6, r2, #31
 80062f0:	d527      	bpl.n	8006342 <__sflush_r+0xb2>
 80062f2:	2200      	movs	r2, #0
 80062f4:	6062      	str	r2, [r4, #4]
 80062f6:	04d9      	lsls	r1, r3, #19
 80062f8:	6922      	ldr	r2, [r4, #16]
 80062fa:	6022      	str	r2, [r4, #0]
 80062fc:	d504      	bpl.n	8006308 <__sflush_r+0x78>
 80062fe:	1c42      	adds	r2, r0, #1
 8006300:	d101      	bne.n	8006306 <__sflush_r+0x76>
 8006302:	682b      	ldr	r3, [r5, #0]
 8006304:	b903      	cbnz	r3, 8006308 <__sflush_r+0x78>
 8006306:	6560      	str	r0, [r4, #84]	@ 0x54
 8006308:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800630a:	602f      	str	r7, [r5, #0]
 800630c:	b1b9      	cbz	r1, 800633e <__sflush_r+0xae>
 800630e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006312:	4299      	cmp	r1, r3
 8006314:	d002      	beq.n	800631c <__sflush_r+0x8c>
 8006316:	4628      	mov	r0, r5
 8006318:	f7ff f9fe 	bl	8005718 <_free_r>
 800631c:	2300      	movs	r3, #0
 800631e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006320:	e00d      	b.n	800633e <__sflush_r+0xae>
 8006322:	2301      	movs	r3, #1
 8006324:	4628      	mov	r0, r5
 8006326:	47b0      	blx	r6
 8006328:	4602      	mov	r2, r0
 800632a:	1c50      	adds	r0, r2, #1
 800632c:	d1c9      	bne.n	80062c2 <__sflush_r+0x32>
 800632e:	682b      	ldr	r3, [r5, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d0c6      	beq.n	80062c2 <__sflush_r+0x32>
 8006334:	2b1d      	cmp	r3, #29
 8006336:	d001      	beq.n	800633c <__sflush_r+0xac>
 8006338:	2b16      	cmp	r3, #22
 800633a:	d11e      	bne.n	800637a <__sflush_r+0xea>
 800633c:	602f      	str	r7, [r5, #0]
 800633e:	2000      	movs	r0, #0
 8006340:	e022      	b.n	8006388 <__sflush_r+0xf8>
 8006342:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006346:	b21b      	sxth	r3, r3
 8006348:	e01b      	b.n	8006382 <__sflush_r+0xf2>
 800634a:	690f      	ldr	r7, [r1, #16]
 800634c:	2f00      	cmp	r7, #0
 800634e:	d0f6      	beq.n	800633e <__sflush_r+0xae>
 8006350:	0793      	lsls	r3, r2, #30
 8006352:	680e      	ldr	r6, [r1, #0]
 8006354:	bf08      	it	eq
 8006356:	694b      	ldreq	r3, [r1, #20]
 8006358:	600f      	str	r7, [r1, #0]
 800635a:	bf18      	it	ne
 800635c:	2300      	movne	r3, #0
 800635e:	eba6 0807 	sub.w	r8, r6, r7
 8006362:	608b      	str	r3, [r1, #8]
 8006364:	f1b8 0f00 	cmp.w	r8, #0
 8006368:	dde9      	ble.n	800633e <__sflush_r+0xae>
 800636a:	6a21      	ldr	r1, [r4, #32]
 800636c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800636e:	4643      	mov	r3, r8
 8006370:	463a      	mov	r2, r7
 8006372:	4628      	mov	r0, r5
 8006374:	47b0      	blx	r6
 8006376:	2800      	cmp	r0, #0
 8006378:	dc08      	bgt.n	800638c <__sflush_r+0xfc>
 800637a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800637e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	f04f 30ff 	mov.w	r0, #4294967295
 8006388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800638c:	4407      	add	r7, r0
 800638e:	eba8 0800 	sub.w	r8, r8, r0
 8006392:	e7e7      	b.n	8006364 <__sflush_r+0xd4>
 8006394:	20400001 	.word	0x20400001

08006398 <_fflush_r>:
 8006398:	b538      	push	{r3, r4, r5, lr}
 800639a:	690b      	ldr	r3, [r1, #16]
 800639c:	4605      	mov	r5, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	b913      	cbnz	r3, 80063a8 <_fflush_r+0x10>
 80063a2:	2500      	movs	r5, #0
 80063a4:	4628      	mov	r0, r5
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	b118      	cbz	r0, 80063b2 <_fflush_r+0x1a>
 80063aa:	6a03      	ldr	r3, [r0, #32]
 80063ac:	b90b      	cbnz	r3, 80063b2 <_fflush_r+0x1a>
 80063ae:	f7fe fa4f 	bl	8004850 <__sinit>
 80063b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d0f3      	beq.n	80063a2 <_fflush_r+0xa>
 80063ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80063bc:	07d0      	lsls	r0, r2, #31
 80063be:	d404      	bmi.n	80063ca <_fflush_r+0x32>
 80063c0:	0599      	lsls	r1, r3, #22
 80063c2:	d402      	bmi.n	80063ca <_fflush_r+0x32>
 80063c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c6:	f7fe fb4c 	bl	8004a62 <__retarget_lock_acquire_recursive>
 80063ca:	4628      	mov	r0, r5
 80063cc:	4621      	mov	r1, r4
 80063ce:	f7ff ff5f 	bl	8006290 <__sflush_r>
 80063d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80063d4:	07da      	lsls	r2, r3, #31
 80063d6:	4605      	mov	r5, r0
 80063d8:	d4e4      	bmi.n	80063a4 <_fflush_r+0xc>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	059b      	lsls	r3, r3, #22
 80063de:	d4e1      	bmi.n	80063a4 <_fflush_r+0xc>
 80063e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063e2:	f7fe fb3f 	bl	8004a64 <__retarget_lock_release_recursive>
 80063e6:	e7dd      	b.n	80063a4 <_fflush_r+0xc>

080063e8 <__swbuf_r>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	460e      	mov	r6, r1
 80063ec:	4614      	mov	r4, r2
 80063ee:	4605      	mov	r5, r0
 80063f0:	b118      	cbz	r0, 80063fa <__swbuf_r+0x12>
 80063f2:	6a03      	ldr	r3, [r0, #32]
 80063f4:	b90b      	cbnz	r3, 80063fa <__swbuf_r+0x12>
 80063f6:	f7fe fa2b 	bl	8004850 <__sinit>
 80063fa:	69a3      	ldr	r3, [r4, #24]
 80063fc:	60a3      	str	r3, [r4, #8]
 80063fe:	89a3      	ldrh	r3, [r4, #12]
 8006400:	071a      	lsls	r2, r3, #28
 8006402:	d501      	bpl.n	8006408 <__swbuf_r+0x20>
 8006404:	6923      	ldr	r3, [r4, #16]
 8006406:	b943      	cbnz	r3, 800641a <__swbuf_r+0x32>
 8006408:	4621      	mov	r1, r4
 800640a:	4628      	mov	r0, r5
 800640c:	f000 f82a 	bl	8006464 <__swsetup_r>
 8006410:	b118      	cbz	r0, 800641a <__swbuf_r+0x32>
 8006412:	f04f 37ff 	mov.w	r7, #4294967295
 8006416:	4638      	mov	r0, r7
 8006418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	6922      	ldr	r2, [r4, #16]
 800641e:	1a98      	subs	r0, r3, r2
 8006420:	6963      	ldr	r3, [r4, #20]
 8006422:	b2f6      	uxtb	r6, r6
 8006424:	4283      	cmp	r3, r0
 8006426:	4637      	mov	r7, r6
 8006428:	dc05      	bgt.n	8006436 <__swbuf_r+0x4e>
 800642a:	4621      	mov	r1, r4
 800642c:	4628      	mov	r0, r5
 800642e:	f7ff ffb3 	bl	8006398 <_fflush_r>
 8006432:	2800      	cmp	r0, #0
 8006434:	d1ed      	bne.n	8006412 <__swbuf_r+0x2a>
 8006436:	68a3      	ldr	r3, [r4, #8]
 8006438:	3b01      	subs	r3, #1
 800643a:	60a3      	str	r3, [r4, #8]
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	1c5a      	adds	r2, r3, #1
 8006440:	6022      	str	r2, [r4, #0]
 8006442:	701e      	strb	r6, [r3, #0]
 8006444:	6962      	ldr	r2, [r4, #20]
 8006446:	1c43      	adds	r3, r0, #1
 8006448:	429a      	cmp	r2, r3
 800644a:	d004      	beq.n	8006456 <__swbuf_r+0x6e>
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	07db      	lsls	r3, r3, #31
 8006450:	d5e1      	bpl.n	8006416 <__swbuf_r+0x2e>
 8006452:	2e0a      	cmp	r6, #10
 8006454:	d1df      	bne.n	8006416 <__swbuf_r+0x2e>
 8006456:	4621      	mov	r1, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f7ff ff9d 	bl	8006398 <_fflush_r>
 800645e:	2800      	cmp	r0, #0
 8006460:	d0d9      	beq.n	8006416 <__swbuf_r+0x2e>
 8006462:	e7d6      	b.n	8006412 <__swbuf_r+0x2a>

08006464 <__swsetup_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4b29      	ldr	r3, [pc, #164]	@ (800650c <__swsetup_r+0xa8>)
 8006468:	4605      	mov	r5, r0
 800646a:	6818      	ldr	r0, [r3, #0]
 800646c:	460c      	mov	r4, r1
 800646e:	b118      	cbz	r0, 8006478 <__swsetup_r+0x14>
 8006470:	6a03      	ldr	r3, [r0, #32]
 8006472:	b90b      	cbnz	r3, 8006478 <__swsetup_r+0x14>
 8006474:	f7fe f9ec 	bl	8004850 <__sinit>
 8006478:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800647c:	0719      	lsls	r1, r3, #28
 800647e:	d422      	bmi.n	80064c6 <__swsetup_r+0x62>
 8006480:	06da      	lsls	r2, r3, #27
 8006482:	d407      	bmi.n	8006494 <__swsetup_r+0x30>
 8006484:	2209      	movs	r2, #9
 8006486:	602a      	str	r2, [r5, #0]
 8006488:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800648c:	81a3      	strh	r3, [r4, #12]
 800648e:	f04f 30ff 	mov.w	r0, #4294967295
 8006492:	e033      	b.n	80064fc <__swsetup_r+0x98>
 8006494:	0758      	lsls	r0, r3, #29
 8006496:	d512      	bpl.n	80064be <__swsetup_r+0x5a>
 8006498:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800649a:	b141      	cbz	r1, 80064ae <__swsetup_r+0x4a>
 800649c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064a0:	4299      	cmp	r1, r3
 80064a2:	d002      	beq.n	80064aa <__swsetup_r+0x46>
 80064a4:	4628      	mov	r0, r5
 80064a6:	f7ff f937 	bl	8005718 <_free_r>
 80064aa:	2300      	movs	r3, #0
 80064ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	2300      	movs	r3, #0
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	6023      	str	r3, [r4, #0]
 80064be:	89a3      	ldrh	r3, [r4, #12]
 80064c0:	f043 0308 	orr.w	r3, r3, #8
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	6923      	ldr	r3, [r4, #16]
 80064c8:	b94b      	cbnz	r3, 80064de <__swsetup_r+0x7a>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d4:	d003      	beq.n	80064de <__swsetup_r+0x7a>
 80064d6:	4621      	mov	r1, r4
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 f8c1 	bl	8006660 <__smakebuf_r>
 80064de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064e2:	f013 0201 	ands.w	r2, r3, #1
 80064e6:	d00a      	beq.n	80064fe <__swsetup_r+0x9a>
 80064e8:	2200      	movs	r2, #0
 80064ea:	60a2      	str	r2, [r4, #8]
 80064ec:	6962      	ldr	r2, [r4, #20]
 80064ee:	4252      	negs	r2, r2
 80064f0:	61a2      	str	r2, [r4, #24]
 80064f2:	6922      	ldr	r2, [r4, #16]
 80064f4:	b942      	cbnz	r2, 8006508 <__swsetup_r+0xa4>
 80064f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80064fa:	d1c5      	bne.n	8006488 <__swsetup_r+0x24>
 80064fc:	bd38      	pop	{r3, r4, r5, pc}
 80064fe:	0799      	lsls	r1, r3, #30
 8006500:	bf58      	it	pl
 8006502:	6962      	ldrpl	r2, [r4, #20]
 8006504:	60a2      	str	r2, [r4, #8]
 8006506:	e7f4      	b.n	80064f2 <__swsetup_r+0x8e>
 8006508:	2000      	movs	r0, #0
 800650a:	e7f7      	b.n	80064fc <__swsetup_r+0x98>
 800650c:	20000018 	.word	0x20000018

08006510 <_sbrk_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4d06      	ldr	r5, [pc, #24]	@ (800652c <_sbrk_r+0x1c>)
 8006514:	2300      	movs	r3, #0
 8006516:	4604      	mov	r4, r0
 8006518:	4608      	mov	r0, r1
 800651a:	602b      	str	r3, [r5, #0]
 800651c:	f7fb f9aa 	bl	8001874 <_sbrk>
 8006520:	1c43      	adds	r3, r0, #1
 8006522:	d102      	bne.n	800652a <_sbrk_r+0x1a>
 8006524:	682b      	ldr	r3, [r5, #0]
 8006526:	b103      	cbz	r3, 800652a <_sbrk_r+0x1a>
 8006528:	6023      	str	r3, [r4, #0]
 800652a:	bd38      	pop	{r3, r4, r5, pc}
 800652c:	200003f8 	.word	0x200003f8

08006530 <memcpy>:
 8006530:	440a      	add	r2, r1
 8006532:	4291      	cmp	r1, r2
 8006534:	f100 33ff 	add.w	r3, r0, #4294967295
 8006538:	d100      	bne.n	800653c <memcpy+0xc>
 800653a:	4770      	bx	lr
 800653c:	b510      	push	{r4, lr}
 800653e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006542:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006546:	4291      	cmp	r1, r2
 8006548:	d1f9      	bne.n	800653e <memcpy+0xe>
 800654a:	bd10      	pop	{r4, pc}

0800654c <__assert_func>:
 800654c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800654e:	4614      	mov	r4, r2
 8006550:	461a      	mov	r2, r3
 8006552:	4b09      	ldr	r3, [pc, #36]	@ (8006578 <__assert_func+0x2c>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4605      	mov	r5, r0
 8006558:	68d8      	ldr	r0, [r3, #12]
 800655a:	b14c      	cbz	r4, 8006570 <__assert_func+0x24>
 800655c:	4b07      	ldr	r3, [pc, #28]	@ (800657c <__assert_func+0x30>)
 800655e:	9100      	str	r1, [sp, #0]
 8006560:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006564:	4906      	ldr	r1, [pc, #24]	@ (8006580 <__assert_func+0x34>)
 8006566:	462b      	mov	r3, r5
 8006568:	f000 f842 	bl	80065f0 <fiprintf>
 800656c:	f000 f8d6 	bl	800671c <abort>
 8006570:	4b04      	ldr	r3, [pc, #16]	@ (8006584 <__assert_func+0x38>)
 8006572:	461c      	mov	r4, r3
 8006574:	e7f3      	b.n	800655e <__assert_func+0x12>
 8006576:	bf00      	nop
 8006578:	20000018 	.word	0x20000018
 800657c:	08006941 	.word	0x08006941
 8006580:	0800694e 	.word	0x0800694e
 8006584:	0800697c 	.word	0x0800697c

08006588 <_calloc_r>:
 8006588:	b570      	push	{r4, r5, r6, lr}
 800658a:	fba1 5402 	umull	r5, r4, r1, r2
 800658e:	b934      	cbnz	r4, 800659e <_calloc_r+0x16>
 8006590:	4629      	mov	r1, r5
 8006592:	f7ff f935 	bl	8005800 <_malloc_r>
 8006596:	4606      	mov	r6, r0
 8006598:	b928      	cbnz	r0, 80065a6 <_calloc_r+0x1e>
 800659a:	4630      	mov	r0, r6
 800659c:	bd70      	pop	{r4, r5, r6, pc}
 800659e:	220c      	movs	r2, #12
 80065a0:	6002      	str	r2, [r0, #0]
 80065a2:	2600      	movs	r6, #0
 80065a4:	e7f9      	b.n	800659a <_calloc_r+0x12>
 80065a6:	462a      	mov	r2, r5
 80065a8:	4621      	mov	r1, r4
 80065aa:	f7fe f9dc 	bl	8004966 <memset>
 80065ae:	e7f4      	b.n	800659a <_calloc_r+0x12>

080065b0 <__ascii_mbtowc>:
 80065b0:	b082      	sub	sp, #8
 80065b2:	b901      	cbnz	r1, 80065b6 <__ascii_mbtowc+0x6>
 80065b4:	a901      	add	r1, sp, #4
 80065b6:	b142      	cbz	r2, 80065ca <__ascii_mbtowc+0x1a>
 80065b8:	b14b      	cbz	r3, 80065ce <__ascii_mbtowc+0x1e>
 80065ba:	7813      	ldrb	r3, [r2, #0]
 80065bc:	600b      	str	r3, [r1, #0]
 80065be:	7812      	ldrb	r2, [r2, #0]
 80065c0:	1e10      	subs	r0, r2, #0
 80065c2:	bf18      	it	ne
 80065c4:	2001      	movne	r0, #1
 80065c6:	b002      	add	sp, #8
 80065c8:	4770      	bx	lr
 80065ca:	4610      	mov	r0, r2
 80065cc:	e7fb      	b.n	80065c6 <__ascii_mbtowc+0x16>
 80065ce:	f06f 0001 	mvn.w	r0, #1
 80065d2:	e7f8      	b.n	80065c6 <__ascii_mbtowc+0x16>

080065d4 <__ascii_wctomb>:
 80065d4:	4603      	mov	r3, r0
 80065d6:	4608      	mov	r0, r1
 80065d8:	b141      	cbz	r1, 80065ec <__ascii_wctomb+0x18>
 80065da:	2aff      	cmp	r2, #255	@ 0xff
 80065dc:	d904      	bls.n	80065e8 <__ascii_wctomb+0x14>
 80065de:	228a      	movs	r2, #138	@ 0x8a
 80065e0:	601a      	str	r2, [r3, #0]
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	4770      	bx	lr
 80065e8:	700a      	strb	r2, [r1, #0]
 80065ea:	2001      	movs	r0, #1
 80065ec:	4770      	bx	lr
	...

080065f0 <fiprintf>:
 80065f0:	b40e      	push	{r1, r2, r3}
 80065f2:	b503      	push	{r0, r1, lr}
 80065f4:	4601      	mov	r1, r0
 80065f6:	ab03      	add	r3, sp, #12
 80065f8:	4805      	ldr	r0, [pc, #20]	@ (8006610 <fiprintf+0x20>)
 80065fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80065fe:	6800      	ldr	r0, [r0, #0]
 8006600:	9301      	str	r3, [sp, #4]
 8006602:	f7ff fd2d 	bl	8006060 <_vfiprintf_r>
 8006606:	b002      	add	sp, #8
 8006608:	f85d eb04 	ldr.w	lr, [sp], #4
 800660c:	b003      	add	sp, #12
 800660e:	4770      	bx	lr
 8006610:	20000018 	.word	0x20000018

08006614 <__swhatbuf_r>:
 8006614:	b570      	push	{r4, r5, r6, lr}
 8006616:	460c      	mov	r4, r1
 8006618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800661c:	2900      	cmp	r1, #0
 800661e:	b096      	sub	sp, #88	@ 0x58
 8006620:	4615      	mov	r5, r2
 8006622:	461e      	mov	r6, r3
 8006624:	da0d      	bge.n	8006642 <__swhatbuf_r+0x2e>
 8006626:	89a3      	ldrh	r3, [r4, #12]
 8006628:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800662c:	f04f 0100 	mov.w	r1, #0
 8006630:	bf14      	ite	ne
 8006632:	2340      	movne	r3, #64	@ 0x40
 8006634:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006638:	2000      	movs	r0, #0
 800663a:	6031      	str	r1, [r6, #0]
 800663c:	602b      	str	r3, [r5, #0]
 800663e:	b016      	add	sp, #88	@ 0x58
 8006640:	bd70      	pop	{r4, r5, r6, pc}
 8006642:	466a      	mov	r2, sp
 8006644:	f000 f848 	bl	80066d8 <_fstat_r>
 8006648:	2800      	cmp	r0, #0
 800664a:	dbec      	blt.n	8006626 <__swhatbuf_r+0x12>
 800664c:	9901      	ldr	r1, [sp, #4]
 800664e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006652:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006656:	4259      	negs	r1, r3
 8006658:	4159      	adcs	r1, r3
 800665a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800665e:	e7eb      	b.n	8006638 <__swhatbuf_r+0x24>

08006660 <__smakebuf_r>:
 8006660:	898b      	ldrh	r3, [r1, #12]
 8006662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006664:	079d      	lsls	r5, r3, #30
 8006666:	4606      	mov	r6, r0
 8006668:	460c      	mov	r4, r1
 800666a:	d507      	bpl.n	800667c <__smakebuf_r+0x1c>
 800666c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	6123      	str	r3, [r4, #16]
 8006674:	2301      	movs	r3, #1
 8006676:	6163      	str	r3, [r4, #20]
 8006678:	b003      	add	sp, #12
 800667a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800667c:	ab01      	add	r3, sp, #4
 800667e:	466a      	mov	r2, sp
 8006680:	f7ff ffc8 	bl	8006614 <__swhatbuf_r>
 8006684:	9f00      	ldr	r7, [sp, #0]
 8006686:	4605      	mov	r5, r0
 8006688:	4639      	mov	r1, r7
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff f8b8 	bl	8005800 <_malloc_r>
 8006690:	b948      	cbnz	r0, 80066a6 <__smakebuf_r+0x46>
 8006692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006696:	059a      	lsls	r2, r3, #22
 8006698:	d4ee      	bmi.n	8006678 <__smakebuf_r+0x18>
 800669a:	f023 0303 	bic.w	r3, r3, #3
 800669e:	f043 0302 	orr.w	r3, r3, #2
 80066a2:	81a3      	strh	r3, [r4, #12]
 80066a4:	e7e2      	b.n	800666c <__smakebuf_r+0xc>
 80066a6:	89a3      	ldrh	r3, [r4, #12]
 80066a8:	6020      	str	r0, [r4, #0]
 80066aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066ae:	81a3      	strh	r3, [r4, #12]
 80066b0:	9b01      	ldr	r3, [sp, #4]
 80066b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066b6:	b15b      	cbz	r3, 80066d0 <__smakebuf_r+0x70>
 80066b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066bc:	4630      	mov	r0, r6
 80066be:	f000 f81d 	bl	80066fc <_isatty_r>
 80066c2:	b128      	cbz	r0, 80066d0 <__smakebuf_r+0x70>
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	f043 0301 	orr.w	r3, r3, #1
 80066ce:	81a3      	strh	r3, [r4, #12]
 80066d0:	89a3      	ldrh	r3, [r4, #12]
 80066d2:	431d      	orrs	r5, r3
 80066d4:	81a5      	strh	r5, [r4, #12]
 80066d6:	e7cf      	b.n	8006678 <__smakebuf_r+0x18>

080066d8 <_fstat_r>:
 80066d8:	b538      	push	{r3, r4, r5, lr}
 80066da:	4d07      	ldr	r5, [pc, #28]	@ (80066f8 <_fstat_r+0x20>)
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	4608      	mov	r0, r1
 80066e2:	4611      	mov	r1, r2
 80066e4:	602b      	str	r3, [r5, #0]
 80066e6:	f7fb f89c 	bl	8001822 <_fstat>
 80066ea:	1c43      	adds	r3, r0, #1
 80066ec:	d102      	bne.n	80066f4 <_fstat_r+0x1c>
 80066ee:	682b      	ldr	r3, [r5, #0]
 80066f0:	b103      	cbz	r3, 80066f4 <_fstat_r+0x1c>
 80066f2:	6023      	str	r3, [r4, #0]
 80066f4:	bd38      	pop	{r3, r4, r5, pc}
 80066f6:	bf00      	nop
 80066f8:	200003f8 	.word	0x200003f8

080066fc <_isatty_r>:
 80066fc:	b538      	push	{r3, r4, r5, lr}
 80066fe:	4d06      	ldr	r5, [pc, #24]	@ (8006718 <_isatty_r+0x1c>)
 8006700:	2300      	movs	r3, #0
 8006702:	4604      	mov	r4, r0
 8006704:	4608      	mov	r0, r1
 8006706:	602b      	str	r3, [r5, #0]
 8006708:	f7fb f89b 	bl	8001842 <_isatty>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_isatty_r+0x1a>
 8006710:	682b      	ldr	r3, [r5, #0]
 8006712:	b103      	cbz	r3, 8006716 <_isatty_r+0x1a>
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	200003f8 	.word	0x200003f8

0800671c <abort>:
 800671c:	b508      	push	{r3, lr}
 800671e:	2006      	movs	r0, #6
 8006720:	f000 f82c 	bl	800677c <raise>
 8006724:	2001      	movs	r0, #1
 8006726:	f7fb f848 	bl	80017ba <_exit>

0800672a <_raise_r>:
 800672a:	291f      	cmp	r1, #31
 800672c:	b538      	push	{r3, r4, r5, lr}
 800672e:	4605      	mov	r5, r0
 8006730:	460c      	mov	r4, r1
 8006732:	d904      	bls.n	800673e <_raise_r+0x14>
 8006734:	2316      	movs	r3, #22
 8006736:	6003      	str	r3, [r0, #0]
 8006738:	f04f 30ff 	mov.w	r0, #4294967295
 800673c:	bd38      	pop	{r3, r4, r5, pc}
 800673e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006740:	b112      	cbz	r2, 8006748 <_raise_r+0x1e>
 8006742:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006746:	b94b      	cbnz	r3, 800675c <_raise_r+0x32>
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f831 	bl	80067b0 <_getpid_r>
 800674e:	4622      	mov	r2, r4
 8006750:	4601      	mov	r1, r0
 8006752:	4628      	mov	r0, r5
 8006754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006758:	f000 b818 	b.w	800678c <_kill_r>
 800675c:	2b01      	cmp	r3, #1
 800675e:	d00a      	beq.n	8006776 <_raise_r+0x4c>
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	d103      	bne.n	800676c <_raise_r+0x42>
 8006764:	2316      	movs	r3, #22
 8006766:	6003      	str	r3, [r0, #0]
 8006768:	2001      	movs	r0, #1
 800676a:	e7e7      	b.n	800673c <_raise_r+0x12>
 800676c:	2100      	movs	r1, #0
 800676e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006772:	4620      	mov	r0, r4
 8006774:	4798      	blx	r3
 8006776:	2000      	movs	r0, #0
 8006778:	e7e0      	b.n	800673c <_raise_r+0x12>
	...

0800677c <raise>:
 800677c:	4b02      	ldr	r3, [pc, #8]	@ (8006788 <raise+0xc>)
 800677e:	4601      	mov	r1, r0
 8006780:	6818      	ldr	r0, [r3, #0]
 8006782:	f7ff bfd2 	b.w	800672a <_raise_r>
 8006786:	bf00      	nop
 8006788:	20000018 	.word	0x20000018

0800678c <_kill_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4d07      	ldr	r5, [pc, #28]	@ (80067ac <_kill_r+0x20>)
 8006790:	2300      	movs	r3, #0
 8006792:	4604      	mov	r4, r0
 8006794:	4608      	mov	r0, r1
 8006796:	4611      	mov	r1, r2
 8006798:	602b      	str	r3, [r5, #0]
 800679a:	f7fa fffe 	bl	800179a <_kill>
 800679e:	1c43      	adds	r3, r0, #1
 80067a0:	d102      	bne.n	80067a8 <_kill_r+0x1c>
 80067a2:	682b      	ldr	r3, [r5, #0]
 80067a4:	b103      	cbz	r3, 80067a8 <_kill_r+0x1c>
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	200003f8 	.word	0x200003f8

080067b0 <_getpid_r>:
 80067b0:	f7fa bfeb 	b.w	800178a <_getpid>

080067b4 <_init>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	bf00      	nop
 80067b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ba:	bc08      	pop	{r3}
 80067bc:	469e      	mov	lr, r3
 80067be:	4770      	bx	lr

080067c0 <_fini>:
 80067c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c2:	bf00      	nop
 80067c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067c6:	bc08      	pop	{r3}
 80067c8:	469e      	mov	lr, r3
 80067ca:	4770      	bx	lr
