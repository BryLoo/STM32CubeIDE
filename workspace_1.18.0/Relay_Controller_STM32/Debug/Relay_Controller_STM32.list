
Relay_Controller_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d94  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002e4c  08002e4c  00003e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e8c  08002e8c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e8c  08002e8c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e8c  08002e8c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e8c  08002e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e90  08002e90  00003e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e94  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  08002ea0  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  08002ea0  00004138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ca2  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c49  00000000  00000000  0000ccd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  0000e920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006bb  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000158a7  00000000  00000000  0000f8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b7eb  00000000  00000000  0002515a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088229  00000000  00000000  00030945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8b6e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e5c  00000000  00000000  000b8bb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  000baa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08002e34 	.word	0x08002e34

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08002e34 	.word	0x08002e34

08000100 <__udivsi3>:
 8000100:	2200      	movs	r2, #0
 8000102:	0843      	lsrs	r3, r0, #1
 8000104:	428b      	cmp	r3, r1
 8000106:	d374      	bcc.n	80001f2 <__udivsi3+0xf2>
 8000108:	0903      	lsrs	r3, r0, #4
 800010a:	428b      	cmp	r3, r1
 800010c:	d35f      	bcc.n	80001ce <__udivsi3+0xce>
 800010e:	0a03      	lsrs	r3, r0, #8
 8000110:	428b      	cmp	r3, r1
 8000112:	d344      	bcc.n	800019e <__udivsi3+0x9e>
 8000114:	0b03      	lsrs	r3, r0, #12
 8000116:	428b      	cmp	r3, r1
 8000118:	d328      	bcc.n	800016c <__udivsi3+0x6c>
 800011a:	0c03      	lsrs	r3, r0, #16
 800011c:	428b      	cmp	r3, r1
 800011e:	d30d      	bcc.n	800013c <__udivsi3+0x3c>
 8000120:	22ff      	movs	r2, #255	@ 0xff
 8000122:	0209      	lsls	r1, r1, #8
 8000124:	ba12      	rev	r2, r2
 8000126:	0c03      	lsrs	r3, r0, #16
 8000128:	428b      	cmp	r3, r1
 800012a:	d302      	bcc.n	8000132 <__udivsi3+0x32>
 800012c:	1212      	asrs	r2, r2, #8
 800012e:	0209      	lsls	r1, r1, #8
 8000130:	d065      	beq.n	80001fe <__udivsi3+0xfe>
 8000132:	0b03      	lsrs	r3, r0, #12
 8000134:	428b      	cmp	r3, r1
 8000136:	d319      	bcc.n	800016c <__udivsi3+0x6c>
 8000138:	e000      	b.n	800013c <__udivsi3+0x3c>
 800013a:	0a09      	lsrs	r1, r1, #8
 800013c:	0bc3      	lsrs	r3, r0, #15
 800013e:	428b      	cmp	r3, r1
 8000140:	d301      	bcc.n	8000146 <__udivsi3+0x46>
 8000142:	03cb      	lsls	r3, r1, #15
 8000144:	1ac0      	subs	r0, r0, r3
 8000146:	4152      	adcs	r2, r2
 8000148:	0b83      	lsrs	r3, r0, #14
 800014a:	428b      	cmp	r3, r1
 800014c:	d301      	bcc.n	8000152 <__udivsi3+0x52>
 800014e:	038b      	lsls	r3, r1, #14
 8000150:	1ac0      	subs	r0, r0, r3
 8000152:	4152      	adcs	r2, r2
 8000154:	0b43      	lsrs	r3, r0, #13
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x5e>
 800015a:	034b      	lsls	r3, r1, #13
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b03      	lsrs	r3, r0, #12
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x6a>
 8000166:	030b      	lsls	r3, r1, #12
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0ac3      	lsrs	r3, r0, #11
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x76>
 8000172:	02cb      	lsls	r3, r1, #11
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0a83      	lsrs	r3, r0, #10
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x82>
 800017e:	028b      	lsls	r3, r1, #10
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0a43      	lsrs	r3, r0, #9
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x8e>
 800018a:	024b      	lsls	r3, r1, #9
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a03      	lsrs	r3, r0, #8
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x9a>
 8000196:	020b      	lsls	r3, r1, #8
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	d2cd      	bcs.n	800013a <__udivsi3+0x3a>
 800019e:	09c3      	lsrs	r3, r0, #7
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d301      	bcc.n	80001a8 <__udivsi3+0xa8>
 80001a4:	01cb      	lsls	r3, r1, #7
 80001a6:	1ac0      	subs	r0, r0, r3
 80001a8:	4152      	adcs	r2, r2
 80001aa:	0983      	lsrs	r3, r0, #6
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d301      	bcc.n	80001b4 <__udivsi3+0xb4>
 80001b0:	018b      	lsls	r3, r1, #6
 80001b2:	1ac0      	subs	r0, r0, r3
 80001b4:	4152      	adcs	r2, r2
 80001b6:	0943      	lsrs	r3, r0, #5
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xc0>
 80001bc:	014b      	lsls	r3, r1, #5
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0903      	lsrs	r3, r0, #4
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xcc>
 80001c8:	010b      	lsls	r3, r1, #4
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	08c3      	lsrs	r3, r0, #3
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xd8>
 80001d4:	00cb      	lsls	r3, r1, #3
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0883      	lsrs	r3, r0, #2
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xe4>
 80001e0:	008b      	lsls	r3, r1, #2
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0843      	lsrs	r3, r0, #1
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xf0>
 80001ec:	004b      	lsls	r3, r1, #1
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	1a41      	subs	r1, r0, r1
 80001f4:	d200      	bcs.n	80001f8 <__udivsi3+0xf8>
 80001f6:	4601      	mov	r1, r0
 80001f8:	4152      	adcs	r2, r2
 80001fa:	4610      	mov	r0, r2
 80001fc:	4770      	bx	lr
 80001fe:	e7ff      	b.n	8000200 <__udivsi3+0x100>
 8000200:	b501      	push	{r0, lr}
 8000202:	2000      	movs	r0, #0
 8000204:	f000 f806 	bl	8000214 <__aeabi_idiv0>
 8000208:	bd02      	pop	{r1, pc}
 800020a:	46c0      	nop			@ (mov r8, r8)

0800020c <__aeabi_uidivmod>:
 800020c:	2900      	cmp	r1, #0
 800020e:	d0f7      	beq.n	8000200 <__udivsi3+0x100>
 8000210:	e776      	b.n	8000100 <__udivsi3>
 8000212:	4770      	bx	lr

08000214 <__aeabi_idiv0>:
 8000214:	4770      	bx	lr
 8000216:	46c0      	nop			@ (mov r8, r8)

08000218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800021c:	f000 fa72 	bl	8000704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000220:	f000 f813 	bl	800024a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000224:	f000 f8c0 	bl	80003a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000228:	f000 f898 	bl	800035c <MX_DMA_Init>
  MX_I2C1_Init();
 800022c:	f000 f856 	bl	80002dc <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000230:	23a0      	movs	r3, #160	@ 0xa0
 8000232:	05db      	lsls	r3, r3, #23
 8000234:	2120      	movs	r1, #32
 8000236:	0018      	movs	r0, r3
 8000238:	f000 ff6f 	bl	800111a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800023c:	23fa      	movs	r3, #250	@ 0xfa
 800023e:	009b      	lsls	r3, r3, #2
 8000240:	0018      	movs	r0, r3
 8000242:	f000 fae5 	bl	8000810 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOA, GPIO_PIN_5);
 8000246:	46c0      	nop			@ (mov r8, r8)
 8000248:	e7f2      	b.n	8000230 <main+0x18>

0800024a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024a:	b590      	push	{r4, r7, lr}
 800024c:	b093      	sub	sp, #76	@ 0x4c
 800024e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000250:	2410      	movs	r4, #16
 8000252:	193b      	adds	r3, r7, r4
 8000254:	0018      	movs	r0, r3
 8000256:	2338      	movs	r3, #56	@ 0x38
 8000258:	001a      	movs	r2, r3
 800025a:	2100      	movs	r1, #0
 800025c:	f002 fdbe 	bl	8002ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	003b      	movs	r3, r7
 8000262:	0018      	movs	r0, r3
 8000264:	2310      	movs	r3, #16
 8000266:	001a      	movs	r2, r3
 8000268:	2100      	movs	r1, #0
 800026a:	f002 fdb7 	bl	8002ddc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800026e:	2380      	movs	r3, #128	@ 0x80
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	0018      	movs	r0, r3
 8000274:	f001 ff36 	bl	80020e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000278:	193b      	adds	r3, r7, r4
 800027a:	2202      	movs	r2, #2
 800027c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027e:	193b      	adds	r3, r7, r4
 8000280:	2280      	movs	r2, #128	@ 0x80
 8000282:	0052      	lsls	r2, r2, #1
 8000284:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	2200      	movs	r2, #0
 800028a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2240      	movs	r2, #64	@ 0x40
 8000290:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000292:	193b      	adds	r3, r7, r4
 8000294:	2200      	movs	r2, #0
 8000296:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000298:	193b      	adds	r3, r7, r4
 800029a:	0018      	movs	r0, r3
 800029c:	f001 ff62 	bl	8002164 <HAL_RCC_OscConfig>
 80002a0:	1e03      	subs	r3, r0, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80002a4:	f000 f8c4 	bl	8000430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	003b      	movs	r3, r7
 80002aa:	2207      	movs	r2, #7
 80002ac:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ae:	003b      	movs	r3, r7
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b4:	003b      	movs	r3, r7
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ba:	003b      	movs	r3, r7
 80002bc:	2200      	movs	r2, #0
 80002be:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002c0:	003b      	movs	r3, r7
 80002c2:	2100      	movs	r1, #0
 80002c4:	0018      	movs	r0, r3
 80002c6:	f002 fa67 	bl	8002798 <HAL_RCC_ClockConfig>
 80002ca:	1e03      	subs	r3, r0, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80002ce:	f000 f8af 	bl	8000430 <Error_Handler>
  }
}
 80002d2:	46c0      	nop			@ (mov r8, r8)
 80002d4:	46bd      	mov	sp, r7
 80002d6:	b013      	add	sp, #76	@ 0x4c
 80002d8:	bd90      	pop	{r4, r7, pc}
	...

080002dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80002e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e2:	4a1c      	ldr	r2, [pc, #112]	@ (8000354 <MX_I2C1_Init+0x78>)
 80002e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 80002e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000358 <MX_I2C1_Init+0x7c>)
 80002ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80002ec:	4b18      	ldr	r3, [pc, #96]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002ee:	2200      	movs	r2, #0
 80002f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002f2:	4b17      	ldr	r3, [pc, #92]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002f4:	2201      	movs	r2, #1
 80002f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002f8:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <MX_I2C1_Init+0x74>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80002fe:	4b14      	ldr	r3, [pc, #80]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000300:	2200      	movs	r2, #0
 8000302:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000304:	4b12      	ldr	r3, [pc, #72]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000306:	2200      	movs	r2, #0
 8000308:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <MX_I2C1_Init+0x74>)
 800030c:	2200      	movs	r2, #0
 800030e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000310:	4b0f      	ldr	r3, [pc, #60]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000312:	2200      	movs	r2, #0
 8000314:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000316:	4b0e      	ldr	r3, [pc, #56]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000318:	0018      	movs	r0, r3
 800031a:	f000 ff19 	bl	8001150 <HAL_I2C_Init>
 800031e:	1e03      	subs	r3, r0, #0
 8000320:	d001      	beq.n	8000326 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000322:	f000 f885 	bl	8000430 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000326:	4b0a      	ldr	r3, [pc, #40]	@ (8000350 <MX_I2C1_Init+0x74>)
 8000328:	2100      	movs	r1, #0
 800032a:	0018      	movs	r0, r3
 800032c:	f001 fe42 	bl	8001fb4 <HAL_I2CEx_ConfigAnalogFilter>
 8000330:	1e03      	subs	r3, r0, #0
 8000332:	d001      	beq.n	8000338 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000334:	f000 f87c 	bl	8000430 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000338:	4b05      	ldr	r3, [pc, #20]	@ (8000350 <MX_I2C1_Init+0x74>)
 800033a:	2100      	movs	r1, #0
 800033c:	0018      	movs	r0, r3
 800033e:	f001 fe85 	bl	800204c <HAL_I2CEx_ConfigDigitalFilter>
 8000342:	1e03      	subs	r3, r0, #0
 8000344:	d001      	beq.n	800034a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000346:	f000 f873 	bl	8000430 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800034a:	46c0      	nop			@ (mov r8, r8)
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	20000028 	.word	0x20000028
 8000354:	40005400 	.word	0x40005400
 8000358:	00503d58 	.word	0x00503d58

0800035c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000362:	4b10      	ldr	r3, [pc, #64]	@ (80003a4 <MX_DMA_Init+0x48>)
 8000364:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000366:	4b0f      	ldr	r3, [pc, #60]	@ (80003a4 <MX_DMA_Init+0x48>)
 8000368:	2101      	movs	r1, #1
 800036a:	430a      	orrs	r2, r1
 800036c:	639a      	str	r2, [r3, #56]	@ 0x38
 800036e:	4b0d      	ldr	r3, [pc, #52]	@ (80003a4 <MX_DMA_Init+0x48>)
 8000370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000372:	2201      	movs	r2, #1
 8000374:	4013      	ands	r3, r2
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800037a:	2200      	movs	r2, #0
 800037c:	2100      	movs	r1, #0
 800037e:	2009      	movs	r0, #9
 8000380:	f000 fb16 	bl	80009b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000384:	2009      	movs	r0, #9
 8000386:	f000 fb28 	bl	80009da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800038a:	2200      	movs	r2, #0
 800038c:	2100      	movs	r1, #0
 800038e:	200a      	movs	r0, #10
 8000390:	f000 fb0e 	bl	80009b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000394:	200a      	movs	r0, #10
 8000396:	f000 fb20 	bl	80009da <HAL_NVIC_EnableIRQ>

}
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b590      	push	{r4, r7, lr}
 80003aa:	b089      	sub	sp, #36	@ 0x24
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	240c      	movs	r4, #12
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	0018      	movs	r0, r3
 80003b4:	2314      	movs	r3, #20
 80003b6:	001a      	movs	r2, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	f002 fd0f 	bl	8002ddc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003be:	4b1b      	ldr	r3, [pc, #108]	@ (800042c <MX_GPIO_Init+0x84>)
 80003c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003c2:	4b1a      	ldr	r3, [pc, #104]	@ (800042c <MX_GPIO_Init+0x84>)
 80003c4:	2102      	movs	r1, #2
 80003c6:	430a      	orrs	r2, r1
 80003c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ca:	4b18      	ldr	r3, [pc, #96]	@ (800042c <MX_GPIO_Init+0x84>)
 80003cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003ce:	2202      	movs	r2, #2
 80003d0:	4013      	ands	r3, r2
 80003d2:	60bb      	str	r3, [r7, #8]
 80003d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d6:	4b15      	ldr	r3, [pc, #84]	@ (800042c <MX_GPIO_Init+0x84>)
 80003d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003da:	4b14      	ldr	r3, [pc, #80]	@ (800042c <MX_GPIO_Init+0x84>)
 80003dc:	2101      	movs	r1, #1
 80003de:	430a      	orrs	r2, r1
 80003e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003e2:	4b12      	ldr	r3, [pc, #72]	@ (800042c <MX_GPIO_Init+0x84>)
 80003e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003e6:	2201      	movs	r2, #1
 80003e8:	4013      	ands	r3, r2
 80003ea:	607b      	str	r3, [r7, #4]
 80003ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 80003ee:	23a0      	movs	r3, #160	@ 0xa0
 80003f0:	05db      	lsls	r3, r3, #23
 80003f2:	2200      	movs	r2, #0
 80003f4:	2170      	movs	r1, #112	@ 0x70
 80003f6:	0018      	movs	r0, r3
 80003f8:	f000 fe72 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80003fc:	0021      	movs	r1, r4
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2270      	movs	r2, #112	@ 0x70
 8000402:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	187a      	adds	r2, r7, r1
 8000418:	23a0      	movs	r3, #160	@ 0xa0
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	0011      	movs	r1, r2
 800041e:	0018      	movs	r0, r3
 8000420:	f000 fcfa 	bl	8000e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000424:	46c0      	nop			@ (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	b009      	add	sp, #36	@ 0x24
 800042a:	bd90      	pop	{r4, r7, pc}
 800042c:	40021000 	.word	0x40021000

08000430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000434:	b672      	cpsid	i
}
 8000436:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000438:	46c0      	nop			@ (mov r8, r8)
 800043a:	e7fd      	b.n	8000438 <Error_Handler+0x8>

0800043c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000442:	4b0f      	ldr	r3, [pc, #60]	@ (8000480 <HAL_MspInit+0x44>)
 8000444:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000446:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <HAL_MspInit+0x44>)
 8000448:	2101      	movs	r1, #1
 800044a:	430a      	orrs	r2, r1
 800044c:	641a      	str	r2, [r3, #64]	@ 0x40
 800044e:	4b0c      	ldr	r3, [pc, #48]	@ (8000480 <HAL_MspInit+0x44>)
 8000450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000452:	2201      	movs	r2, #1
 8000454:	4013      	ands	r3, r2
 8000456:	607b      	str	r3, [r7, #4]
 8000458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800045a:	4b09      	ldr	r3, [pc, #36]	@ (8000480 <HAL_MspInit+0x44>)
 800045c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800045e:	4b08      	ldr	r3, [pc, #32]	@ (8000480 <HAL_MspInit+0x44>)
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	0549      	lsls	r1, r1, #21
 8000464:	430a      	orrs	r2, r1
 8000466:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000468:	4b05      	ldr	r3, [pc, #20]	@ (8000480 <HAL_MspInit+0x44>)
 800046a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	055b      	lsls	r3, r3, #21
 8000470:	4013      	ands	r3, r2
 8000472:	603b      	str	r3, [r7, #0]
 8000474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000476:	46c0      	nop			@ (mov r8, r8)
 8000478:	46bd      	mov	sp, r7
 800047a:	b002      	add	sp, #8
 800047c:	bd80      	pop	{r7, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	40021000 	.word	0x40021000

08000484 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000484:	b590      	push	{r4, r7, lr}
 8000486:	b095      	sub	sp, #84	@ 0x54
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800048c:	233c      	movs	r3, #60	@ 0x3c
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	0018      	movs	r0, r3
 8000492:	2314      	movs	r3, #20
 8000494:	001a      	movs	r2, r3
 8000496:	2100      	movs	r1, #0
 8000498:	f002 fca0 	bl	8002ddc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	2410      	movs	r4, #16
 800049e:	193b      	adds	r3, r7, r4
 80004a0:	0018      	movs	r0, r3
 80004a2:	232c      	movs	r3, #44	@ 0x2c
 80004a4:	001a      	movs	r2, r3
 80004a6:	2100      	movs	r1, #0
 80004a8:	f002 fc98 	bl	8002ddc <memset>
  if(hi2c->Instance==I2C1)
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4a50      	ldr	r2, [pc, #320]	@ (80005f4 <HAL_I2C_MspInit+0x170>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d000      	beq.n	80004b8 <HAL_I2C_MspInit+0x34>
 80004b6:	e098      	b.n	80005ea <HAL_I2C_MspInit+0x166>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004b8:	193b      	adds	r3, r7, r4
 80004ba:	2220      	movs	r2, #32
 80004bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80004be:	193b      	adds	r3, r7, r4
 80004c0:	2200      	movs	r2, #0
 80004c2:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004c4:	193b      	adds	r3, r7, r4
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 faf0 	bl	8002aac <HAL_RCCEx_PeriphCLKConfig>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80004d0:	f7ff ffae 	bl	8000430 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d4:	4b48      	ldr	r3, [pc, #288]	@ (80005f8 <HAL_I2C_MspInit+0x174>)
 80004d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004d8:	4b47      	ldr	r3, [pc, #284]	@ (80005f8 <HAL_I2C_MspInit+0x174>)
 80004da:	2102      	movs	r1, #2
 80004dc:	430a      	orrs	r2, r1
 80004de:	635a      	str	r2, [r3, #52]	@ 0x34
 80004e0:	4b45      	ldr	r3, [pc, #276]	@ (80005f8 <HAL_I2C_MspInit+0x174>)
 80004e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004e4:	2202      	movs	r2, #2
 80004e6:	4013      	ands	r3, r2
 80004e8:	60fb      	str	r3, [r7, #12]
 80004ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80004ec:	213c      	movs	r1, #60	@ 0x3c
 80004ee:	187b      	adds	r3, r7, r1
 80004f0:	22c0      	movs	r2, #192	@ 0xc0
 80004f2:	0092      	lsls	r2, r2, #2
 80004f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f6:	187b      	adds	r3, r7, r1
 80004f8:	2212      	movs	r2, #18
 80004fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80004fc:	187b      	adds	r3, r7, r1
 80004fe:	2201      	movs	r2, #1
 8000500:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000502:	187b      	adds	r3, r7, r1
 8000504:	2203      	movs	r2, #3
 8000506:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000508:	187b      	adds	r3, r7, r1
 800050a:	2206      	movs	r2, #6
 800050c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050e:	187b      	adds	r3, r7, r1
 8000510:	4a3a      	ldr	r2, [pc, #232]	@ (80005fc <HAL_I2C_MspInit+0x178>)
 8000512:	0019      	movs	r1, r3
 8000514:	0010      	movs	r0, r2
 8000516:	f000 fc7f 	bl	8000e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800051a:	4b37      	ldr	r3, [pc, #220]	@ (80005f8 <HAL_I2C_MspInit+0x174>)
 800051c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800051e:	4b36      	ldr	r3, [pc, #216]	@ (80005f8 <HAL_I2C_MspInit+0x174>)
 8000520:	2180      	movs	r1, #128	@ 0x80
 8000522:	0389      	lsls	r1, r1, #14
 8000524:	430a      	orrs	r2, r1
 8000526:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000528:	4b33      	ldr	r3, [pc, #204]	@ (80005f8 <HAL_I2C_MspInit+0x174>)
 800052a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800052c:	2380      	movs	r3, #128	@ 0x80
 800052e:	039b      	lsls	r3, r3, #14
 8000530:	4013      	ands	r3, r2
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel1;
 8000536:	4b32      	ldr	r3, [pc, #200]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000538:	4a32      	ldr	r2, [pc, #200]	@ (8000604 <HAL_I2C_MspInit+0x180>)
 800053a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 800053c:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 800053e:	220b      	movs	r2, #11
 8000540:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000542:	4b2f      	ldr	r3, [pc, #188]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000544:	2210      	movs	r2, #16
 8000546:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000548:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800054e:	4b2c      	ldr	r3, [pc, #176]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000550:	2280      	movs	r2, #128	@ 0x80
 8000552:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000554:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000556:	2200      	movs	r2, #0
 8000558:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800055a:	4b29      	ldr	r3, [pc, #164]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000560:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000566:	4b26      	ldr	r3, [pc, #152]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800056c:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 800056e:	0018      	movs	r0, r3
 8000570:	f000 fa50 	bl	8000a14 <HAL_DMA_Init>
 8000574:	1e03      	subs	r3, r0, #0
 8000576:	d001      	beq.n	800057c <HAL_I2C_MspInit+0xf8>
    {
      Error_Handler();
 8000578:	f7ff ff5a 	bl	8000430 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a20      	ldr	r2, [pc, #128]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000580:	639a      	str	r2, [r3, #56]	@ 0x38
 8000582:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <HAL_I2C_MspInit+0x17c>)
 8000584:	687a      	ldr	r2, [r7, #4]
 8000586:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel2;
 8000588:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 800058a:	4a20      	ldr	r2, [pc, #128]	@ (800060c <HAL_I2C_MspInit+0x188>)
 800058c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 800058e:	4b1e      	ldr	r3, [pc, #120]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 8000590:	220a      	movs	r2, #10
 8000592:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000594:	4b1c      	ldr	r3, [pc, #112]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b1b      	ldr	r3, [pc, #108]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 800059c:	2200      	movs	r2, #0
 800059e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005a0:	4b19      	ldr	r3, [pc, #100]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005a2:	2280      	movs	r2, #128	@ 0x80
 80005a4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005a6:	4b18      	ldr	r3, [pc, #96]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005ac:	4b16      	ldr	r3, [pc, #88]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80005b2:	4b15      	ldr	r3, [pc, #84]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005b8:	4b13      	ldr	r3, [pc, #76]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005c0:	0018      	movs	r0, r3
 80005c2:	f000 fa27 	bl	8000a14 <HAL_DMA_Init>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <HAL_I2C_MspInit+0x14a>
    {
      Error_Handler();
 80005ca:	f7ff ff31 	bl	8000430 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_I2C_MspInit+0x184>)
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2017      	movs	r0, #23
 80005e0:	f000 f9e6 	bl	80009b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80005e4:	2017      	movs	r0, #23
 80005e6:	f000 f9f8 	bl	80009da <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	46bd      	mov	sp, r7
 80005ee:	b015      	add	sp, #84	@ 0x54
 80005f0:	bd90      	pop	{r4, r7, pc}
 80005f2:	46c0      	nop			@ (mov r8, r8)
 80005f4:	40005400 	.word	0x40005400
 80005f8:	40021000 	.word	0x40021000
 80005fc:	50000400 	.word	0x50000400
 8000600:	2000007c 	.word	0x2000007c
 8000604:	40020008 	.word	0x40020008
 8000608:	200000d8 	.word	0x200000d8
 800060c:	4002001c 	.word	0x4002001c

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	46c0      	nop			@ (mov r8, r8)
 8000616:	e7fd      	b.n	8000614 <NMI_Handler+0x4>

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	46c0      	nop			@ (mov r8, r8)
 800061e:	e7fd      	b.n	800061c <HardFault_Handler+0x4>

08000620 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000624:	46c0      	nop			@ (mov r8, r8)
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800062e:	46c0      	nop			@ (mov r8, r8)
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000638:	f000 f8ce 	bl	80007d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800063c:	46c0      	nop			@ (mov r8, r8)
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
	...

08000644 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000648:	4b03      	ldr	r3, [pc, #12]	@ (8000658 <DMA1_Channel1_IRQHandler+0x14>)
 800064a:	0018      	movs	r0, r3
 800064c:	f000 fad6 	bl	8000bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000650:	46c0      	nop			@ (mov r8, r8)
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			@ (mov r8, r8)
 8000658:	2000007c 	.word	0x2000007c

0800065c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000660:	4b03      	ldr	r3, [pc, #12]	@ (8000670 <DMA1_Channel2_3_IRQHandler+0x14>)
 8000662:	0018      	movs	r0, r3
 8000664:	f000 faca 	bl	8000bfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	200000d8 	.word	0x200000d8

08000674 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 Interrupt (combined with EXTI 23).
  */
void I2C1_IRQHandler(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8000678:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <I2C1_IRQHandler+0x2c>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	699a      	ldr	r2, [r3, #24]
 800067e:	23e0      	movs	r3, #224	@ 0xe0
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	4013      	ands	r3, r2
 8000684:	d004      	beq.n	8000690 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <I2C1_IRQHandler+0x2c>)
 8000688:	0018      	movs	r0, r3
 800068a:	f000 fe21 	bl	80012d0 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800068e:	e003      	b.n	8000698 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8000690:	4b03      	ldr	r3, [pc, #12]	@ (80006a0 <I2C1_IRQHandler+0x2c>)
 8000692:	0018      	movs	r0, r3
 8000694:	f000 fe02 	bl	800129c <HAL_I2C_EV_IRQHandler>
}
 8000698:	46c0      	nop			@ (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	20000028 	.word	0x20000028

080006a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
	...

080006b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006b0:	480d      	ldr	r0, [pc, #52]	@ (80006e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006b2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b4:	f7ff fff6 	bl	80006a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	@ (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	@ (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	@ (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	@ (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	@ (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006de:	f002 fb85 	bl	8002dec <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80006e2:	f7ff fd99 	bl	8000218 <main>

080006e6 <LoopForever>:

LoopForever:
  b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   r0, =_estack
 80006e8:	20004800 	.word	0x20004800
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	08002e94 	.word	0x08002e94
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	20000138 	.word	0x20000138

08000700 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_COMP_IRQHandler>
	...

08000704 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800070a:	1dfb      	adds	r3, r7, #7
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000710:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <HAL_Init+0x3c>)
 8000712:	681a      	ldr	r2, [r3, #0]
 8000714:	4b0a      	ldr	r3, [pc, #40]	@ (8000740 <HAL_Init+0x3c>)
 8000716:	2180      	movs	r1, #128	@ 0x80
 8000718:	0049      	lsls	r1, r1, #1
 800071a:	430a      	orrs	r2, r1
 800071c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800071e:	2003      	movs	r0, #3
 8000720:	f000 f810 	bl	8000744 <HAL_InitTick>
 8000724:	1e03      	subs	r3, r0, #0
 8000726:	d003      	beq.n	8000730 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000728:	1dfb      	adds	r3, r7, #7
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e001      	b.n	8000734 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000730:	f7ff fe84 	bl	800043c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000734:	1dfb      	adds	r3, r7, #7
 8000736:	781b      	ldrb	r3, [r3, #0]
}
 8000738:	0018      	movs	r0, r3
 800073a:	46bd      	mov	sp, r7
 800073c:	b002      	add	sp, #8
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40022000 	.word	0x40022000

08000744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000744:	b590      	push	{r4, r7, lr}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800074c:	230f      	movs	r3, #15
 800074e:	18fb      	adds	r3, r7, r3
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000754:	4b1d      	ldr	r3, [pc, #116]	@ (80007cc <HAL_InitTick+0x88>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d02b      	beq.n	80007b4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800075c:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <HAL_InitTick+0x8c>)
 800075e:	681c      	ldr	r4, [r3, #0]
 8000760:	4b1a      	ldr	r3, [pc, #104]	@ (80007cc <HAL_InitTick+0x88>)
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	0019      	movs	r1, r3
 8000766:	23fa      	movs	r3, #250	@ 0xfa
 8000768:	0098      	lsls	r0, r3, #2
 800076a:	f7ff fcc9 	bl	8000100 <__udivsi3>
 800076e:	0003      	movs	r3, r0
 8000770:	0019      	movs	r1, r3
 8000772:	0020      	movs	r0, r4
 8000774:	f7ff fcc4 	bl	8000100 <__udivsi3>
 8000778:	0003      	movs	r3, r0
 800077a:	0018      	movs	r0, r3
 800077c:	f000 f93d 	bl	80009fa <HAL_SYSTICK_Config>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d112      	bne.n	80007aa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b03      	cmp	r3, #3
 8000788:	d80a      	bhi.n	80007a0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	2301      	movs	r3, #1
 800078e:	425b      	negs	r3, r3
 8000790:	2200      	movs	r2, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f000 f90c 	bl	80009b0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000798:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <HAL_InitTick+0x90>)
 800079a:	687a      	ldr	r2, [r7, #4]
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	e00d      	b.n	80007bc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007a0:	230f      	movs	r3, #15
 80007a2:	18fb      	adds	r3, r7, r3
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	e008      	b.n	80007bc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007aa:	230f      	movs	r3, #15
 80007ac:	18fb      	adds	r3, r7, r3
 80007ae:	2201      	movs	r2, #1
 80007b0:	701a      	strb	r2, [r3, #0]
 80007b2:	e003      	b.n	80007bc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007b4:	230f      	movs	r3, #15
 80007b6:	18fb      	adds	r3, r7, r3
 80007b8:	2201      	movs	r2, #1
 80007ba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80007bc:	230f      	movs	r3, #15
 80007be:	18fb      	adds	r3, r7, r3
 80007c0:	781b      	ldrb	r3, [r3, #0]
}
 80007c2:	0018      	movs	r0, r3
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b005      	add	sp, #20
 80007c8:	bd90      	pop	{r4, r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000000 	.word	0x20000000
 80007d4:	20000004 	.word	0x20000004

080007d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <HAL_IncTick+0x1c>)
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	001a      	movs	r2, r3
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <HAL_IncTick+0x20>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	18d2      	adds	r2, r2, r3
 80007e8:	4b03      	ldr	r3, [pc, #12]	@ (80007f8 <HAL_IncTick+0x20>)
 80007ea:	601a      	str	r2, [r3, #0]
}
 80007ec:	46c0      	nop			@ (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			@ (mov r8, r8)
 80007f4:	20000008 	.word	0x20000008
 80007f8:	20000134 	.word	0x20000134

080007fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000800:	4b02      	ldr	r3, [pc, #8]	@ (800080c <HAL_GetTick+0x10>)
 8000802:	681b      	ldr	r3, [r3, #0]
}
 8000804:	0018      	movs	r0, r3
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	46c0      	nop			@ (mov r8, r8)
 800080c:	20000134 	.word	0x20000134

08000810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000818:	f7ff fff0 	bl	80007fc <HAL_GetTick>
 800081c:	0003      	movs	r3, r0
 800081e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	3301      	adds	r3, #1
 8000828:	d005      	beq.n	8000836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <HAL_Delay+0x44>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	001a      	movs	r2, r3
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	189b      	adds	r3, r3, r2
 8000834:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	f7ff ffe0 	bl	80007fc <HAL_GetTick>
 800083c:	0002      	movs	r2, r0
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	429a      	cmp	r2, r3
 8000846:	d8f7      	bhi.n	8000838 <HAL_Delay+0x28>
  {
  }
}
 8000848:	46c0      	nop			@ (mov r8, r8)
 800084a:	46c0      	nop			@ (mov r8, r8)
 800084c:	46bd      	mov	sp, r7
 800084e:	b004      	add	sp, #16
 8000850:	bd80      	pop	{r7, pc}
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	20000008 	.word	0x20000008

08000858 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	0002      	movs	r2, r0
 8000860:	1dfb      	adds	r3, r7, #7
 8000862:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b7f      	cmp	r3, #127	@ 0x7f
 800086a:	d809      	bhi.n	8000880 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800086c:	1dfb      	adds	r3, r7, #7
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	001a      	movs	r2, r3
 8000872:	231f      	movs	r3, #31
 8000874:	401a      	ands	r2, r3
 8000876:	4b04      	ldr	r3, [pc, #16]	@ (8000888 <__NVIC_EnableIRQ+0x30>)
 8000878:	2101      	movs	r1, #1
 800087a:	4091      	lsls	r1, r2
 800087c:	000a      	movs	r2, r1
 800087e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000880:	46c0      	nop			@ (mov r8, r8)
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}
 8000888:	e000e100 	.word	0xe000e100

0800088c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	6039      	str	r1, [r7, #0]
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800089a:	1dfb      	adds	r3, r7, #7
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a0:	d828      	bhi.n	80008f4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000960 <__NVIC_SetPriority+0xd4>)
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	089b      	lsrs	r3, r3, #2
 80008ac:	33c0      	adds	r3, #192	@ 0xc0
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	589b      	ldr	r3, [r3, r2]
 80008b2:	1dfa      	adds	r2, r7, #7
 80008b4:	7812      	ldrb	r2, [r2, #0]
 80008b6:	0011      	movs	r1, r2
 80008b8:	2203      	movs	r2, #3
 80008ba:	400a      	ands	r2, r1
 80008bc:	00d2      	lsls	r2, r2, #3
 80008be:	21ff      	movs	r1, #255	@ 0xff
 80008c0:	4091      	lsls	r1, r2
 80008c2:	000a      	movs	r2, r1
 80008c4:	43d2      	mvns	r2, r2
 80008c6:	401a      	ands	r2, r3
 80008c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	019b      	lsls	r3, r3, #6
 80008ce:	22ff      	movs	r2, #255	@ 0xff
 80008d0:	401a      	ands	r2, r3
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	0018      	movs	r0, r3
 80008d8:	2303      	movs	r3, #3
 80008da:	4003      	ands	r3, r0
 80008dc:	00db      	lsls	r3, r3, #3
 80008de:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008e0:	481f      	ldr	r0, [pc, #124]	@ (8000960 <__NVIC_SetPriority+0xd4>)
 80008e2:	1dfb      	adds	r3, r7, #7
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	b25b      	sxtb	r3, r3
 80008e8:	089b      	lsrs	r3, r3, #2
 80008ea:	430a      	orrs	r2, r1
 80008ec:	33c0      	adds	r3, #192	@ 0xc0
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80008f2:	e031      	b.n	8000958 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000964 <__NVIC_SetPriority+0xd8>)
 80008f6:	1dfb      	adds	r3, r7, #7
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	0019      	movs	r1, r3
 80008fc:	230f      	movs	r3, #15
 80008fe:	400b      	ands	r3, r1
 8000900:	3b08      	subs	r3, #8
 8000902:	089b      	lsrs	r3, r3, #2
 8000904:	3306      	adds	r3, #6
 8000906:	009b      	lsls	r3, r3, #2
 8000908:	18d3      	adds	r3, r2, r3
 800090a:	3304      	adds	r3, #4
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	1dfa      	adds	r2, r7, #7
 8000910:	7812      	ldrb	r2, [r2, #0]
 8000912:	0011      	movs	r1, r2
 8000914:	2203      	movs	r2, #3
 8000916:	400a      	ands	r2, r1
 8000918:	00d2      	lsls	r2, r2, #3
 800091a:	21ff      	movs	r1, #255	@ 0xff
 800091c:	4091      	lsls	r1, r2
 800091e:	000a      	movs	r2, r1
 8000920:	43d2      	mvns	r2, r2
 8000922:	401a      	ands	r2, r3
 8000924:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	019b      	lsls	r3, r3, #6
 800092a:	22ff      	movs	r2, #255	@ 0xff
 800092c:	401a      	ands	r2, r3
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	0018      	movs	r0, r3
 8000934:	2303      	movs	r3, #3
 8000936:	4003      	ands	r3, r0
 8000938:	00db      	lsls	r3, r3, #3
 800093a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <__NVIC_SetPriority+0xd8>)
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	001c      	movs	r4, r3
 8000944:	230f      	movs	r3, #15
 8000946:	4023      	ands	r3, r4
 8000948:	3b08      	subs	r3, #8
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	430a      	orrs	r2, r1
 800094e:	3306      	adds	r3, #6
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	18c3      	adds	r3, r0, r3
 8000954:	3304      	adds	r3, #4
 8000956:	601a      	str	r2, [r3, #0]
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	b003      	add	sp, #12
 800095e:	bd90      	pop	{r4, r7, pc}
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	1e5a      	subs	r2, r3, #1
 8000974:	2380      	movs	r3, #128	@ 0x80
 8000976:	045b      	lsls	r3, r3, #17
 8000978:	429a      	cmp	r2, r3
 800097a:	d301      	bcc.n	8000980 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800097c:	2301      	movs	r3, #1
 800097e:	e010      	b.n	80009a2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000980:	4b0a      	ldr	r3, [pc, #40]	@ (80009ac <SysTick_Config+0x44>)
 8000982:	687a      	ldr	r2, [r7, #4]
 8000984:	3a01      	subs	r2, #1
 8000986:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000988:	2301      	movs	r3, #1
 800098a:	425b      	negs	r3, r3
 800098c:	2103      	movs	r1, #3
 800098e:	0018      	movs	r0, r3
 8000990:	f7ff ff7c 	bl	800088c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000994:	4b05      	ldr	r3, [pc, #20]	@ (80009ac <SysTick_Config+0x44>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800099a:	4b04      	ldr	r3, [pc, #16]	@ (80009ac <SysTick_Config+0x44>)
 800099c:	2207      	movs	r2, #7
 800099e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	0018      	movs	r0, r3
 80009a4:	46bd      	mov	sp, r7
 80009a6:	b002      	add	sp, #8
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	e000e010 	.word	0xe000e010

080009b0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b084      	sub	sp, #16
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	210f      	movs	r1, #15
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	1c02      	adds	r2, r0, #0
 80009c0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	b25b      	sxtb	r3, r3
 80009ca:	0011      	movs	r1, r2
 80009cc:	0018      	movs	r0, r3
 80009ce:	f7ff ff5d 	bl	800088c <__NVIC_SetPriority>
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b004      	add	sp, #16
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	0002      	movs	r2, r0
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80009e6:	1dfb      	adds	r3, r7, #7
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b25b      	sxtb	r3, r3
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff ff33 	bl	8000858 <__NVIC_EnableIRQ>
}
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b002      	add	sp, #8
 80009f8:	bd80      	pop	{r7, pc}

080009fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009fa:	b580      	push	{r7, lr}
 80009fc:	b082      	sub	sp, #8
 80009fe:	af00      	add	r7, sp, #0
 8000a00:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff ffaf 	bl	8000968 <SysTick_Config>
 8000a0a:	0003      	movs	r3, r0
}
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	b002      	add	sp, #8
 8000a12:	bd80      	pop	{r7, pc}

08000a14 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d101      	bne.n	8000a26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e077      	b.n	8000b16 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a3d      	ldr	r2, [pc, #244]	@ (8000b20 <HAL_DMA_Init+0x10c>)
 8000a2c:	4694      	mov	ip, r2
 8000a2e:	4463      	add	r3, ip
 8000a30:	2114      	movs	r1, #20
 8000a32:	0018      	movs	r0, r3
 8000a34:	f7ff fb64 	bl	8000100 <__udivsi3>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	009a      	lsls	r2, r3, #2
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2225      	movs	r2, #37	@ 0x25
 8000a44:	2102      	movs	r1, #2
 8000a46:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4934      	ldr	r1, [pc, #208]	@ (8000b24 <HAL_DMA_Init+0x110>)
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	689a      	ldr	r2, [r3, #8]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	68db      	ldr	r3, [r3, #12]
 8000a66:	431a      	orrs	r2, r3
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	431a      	orrs	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	695b      	ldr	r3, [r3, #20]
 8000a72:	431a      	orrs	r2, r3
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	431a      	orrs	r2, r3
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	69db      	ldr	r3, [r3, #28]
 8000a7e:	431a      	orrs	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6a1b      	ldr	r3, [r3, #32]
 8000a84:	431a      	orrs	r2, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 f971 	bl	8000d78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	2380      	movs	r3, #128	@ 0x80
 8000a9c:	01db      	lsls	r3, r3, #7
 8000a9e:	429a      	cmp	r2, r3
 8000aa0:	d102      	bne.n	8000aa8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ab0:	213f      	movs	r1, #63	@ 0x3f
 8000ab2:	400a      	ands	r2, r1
 8000ab4:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aba:	687a      	ldr	r2, [r7, #4]
 8000abc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000abe:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685b      	ldr	r3, [r3, #4]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d011      	beq.n	8000aec <HAL_DMA_Init+0xd8>
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	2b04      	cmp	r3, #4
 8000ace:	d80d      	bhi.n	8000aec <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 f97c 	bl	8000dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ae4:	687a      	ldr	r2, [r7, #4]
 8000ae6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	e008      	b.n	8000afe <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2200      	movs	r2, #0
 8000b02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2225      	movs	r2, #37	@ 0x25
 8000b08:	2101      	movs	r1, #1
 8000b0a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2224      	movs	r2, #36	@ 0x24
 8000b10:	2100      	movs	r1, #0
 8000b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	0018      	movs	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	b002      	add	sp, #8
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			@ (mov r8, r8)
 8000b20:	bffdfff8 	.word	0xbffdfff8
 8000b24:	ffff800f 	.word	0xffff800f

08000b28 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b30:	210f      	movs	r1, #15
 8000b32:	187b      	adds	r3, r7, r1
 8000b34:	2200      	movs	r2, #0
 8000b36:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	2225      	movs	r2, #37	@ 0x25
 8000b3c:	5c9b      	ldrb	r3, [r3, r2]
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	2b02      	cmp	r3, #2
 8000b42:	d006      	beq.n	8000b52 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	2204      	movs	r2, #4
 8000b48:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b4a:	187b      	adds	r3, r7, r1
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e049      	b.n	8000be6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	210e      	movs	r1, #14
 8000b5e:	438a      	bics	r2, r1
 8000b60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	681a      	ldr	r2, [r3, #0]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	438a      	bics	r2, r1
 8000b70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b76:	681a      	ldr	r2, [r3, #0]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7c:	491d      	ldr	r1, [pc, #116]	@ (8000bf4 <HAL_DMA_Abort_IT+0xcc>)
 8000b7e:	400a      	ands	r2, r1
 8000b80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000b82:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <HAL_DMA_Abort_IT+0xd0>)
 8000b84:	6859      	ldr	r1, [r3, #4]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8a:	221c      	movs	r2, #28
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	2201      	movs	r2, #1
 8000b90:	409a      	lsls	r2, r3
 8000b92:	4b19      	ldr	r3, [pc, #100]	@ (8000bf8 <HAL_DMA_Abort_IT+0xd0>)
 8000b94:	430a      	orrs	r2, r1
 8000b96:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b9c:	687a      	ldr	r2, [r7, #4]
 8000b9e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ba0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d00c      	beq.n	8000bc4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bb4:	490f      	ldr	r1, [pc, #60]	@ (8000bf4 <HAL_DMA_Abort_IT+0xcc>)
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000bc2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2225      	movs	r2, #37	@ 0x25
 8000bc8:	2101      	movs	r1, #1
 8000bca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2224      	movs	r2, #36	@ 0x24
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d004      	beq.n	8000be6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	0010      	movs	r0, r2
 8000be4:	4798      	blx	r3
    }
  }
  return status;
 8000be6:	230f      	movs	r3, #15
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	781b      	ldrb	r3, [r3, #0]
}
 8000bec:	0018      	movs	r0, r3
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	b004      	add	sp, #16
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	fffffeff 	.word	0xfffffeff
 8000bf8:	40020000 	.word	0x40020000

08000bfc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8000c04:	4b55      	ldr	r3, [pc, #340]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	221c      	movs	r2, #28
 8000c18:	4013      	ands	r3, r2
 8000c1a:	2204      	movs	r2, #4
 8000c1c:	409a      	lsls	r2, r3
 8000c1e:	0013      	movs	r3, r2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4013      	ands	r3, r2
 8000c24:	d027      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x7a>
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	2204      	movs	r2, #4
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	d023      	beq.n	8000c76 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2220      	movs	r2, #32
 8000c36:	4013      	ands	r3, r2
 8000c38:	d107      	bne.n	8000c4a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2104      	movs	r1, #4
 8000c46:	438a      	bics	r2, r1
 8000c48:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8000c4a:	4b44      	ldr	r3, [pc, #272]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000c4c:	6859      	ldr	r1, [r3, #4]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	221c      	movs	r2, #28
 8000c54:	4013      	ands	r3, r2
 8000c56:	2204      	movs	r2, #4
 8000c58:	409a      	lsls	r2, r3
 8000c5a:	4b40      	ldr	r3, [pc, #256]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d100      	bne.n	8000c6a <HAL_DMA_IRQHandler+0x6e>
 8000c68:	e073      	b.n	8000d52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	0010      	movs	r0, r2
 8000c72:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8000c74:	e06d      	b.n	8000d52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c7a:	221c      	movs	r2, #28
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	2202      	movs	r2, #2
 8000c80:	409a      	lsls	r2, r3
 8000c82:	0013      	movs	r3, r2
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4013      	ands	r3, r2
 8000c88:	d02e      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0xec>
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	2202      	movs	r2, #2
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d02a      	beq.n	8000ce8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2220      	movs	r2, #32
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	d10b      	bne.n	8000cb6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	210a      	movs	r1, #10
 8000caa:	438a      	bics	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2225      	movs	r2, #37	@ 0x25
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8000cb6:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000cb8:	6859      	ldr	r1, [r3, #4]
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cbe:	221c      	movs	r2, #28
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	2202      	movs	r2, #2
 8000cc4:	409a      	lsls	r2, r3
 8000cc6:	4b25      	ldr	r3, [pc, #148]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000cc8:	430a      	orrs	r2, r1
 8000cca:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2224      	movs	r2, #36	@ 0x24
 8000cd0:	2100      	movs	r1, #0
 8000cd2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d03a      	beq.n	8000d52 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce0:	687a      	ldr	r2, [r7, #4]
 8000ce2:	0010      	movs	r0, r2
 8000ce4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8000ce6:	e034      	b.n	8000d52 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cec:	221c      	movs	r2, #28
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2208      	movs	r2, #8
 8000cf2:	409a      	lsls	r2, r3
 8000cf4:	0013      	movs	r3, r2
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	d02b      	beq.n	8000d54 <HAL_DMA_IRQHandler+0x158>
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	2208      	movs	r2, #8
 8000d00:	4013      	ands	r3, r2
 8000d02:	d027      	beq.n	8000d54 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	210e      	movs	r1, #14
 8000d10:	438a      	bics	r2, r1
 8000d12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000d16:	6859      	ldr	r1, [r3, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1c:	221c      	movs	r2, #28
 8000d1e:	4013      	ands	r3, r2
 8000d20:	2201      	movs	r2, #1
 8000d22:	409a      	lsls	r2, r3
 8000d24:	4b0d      	ldr	r3, [pc, #52]	@ (8000d5c <HAL_DMA_IRQHandler+0x160>)
 8000d26:	430a      	orrs	r2, r1
 8000d28:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2225      	movs	r2, #37	@ 0x25
 8000d34:	2101      	movs	r1, #1
 8000d36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2224      	movs	r2, #36	@ 0x24
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d005      	beq.n	8000d54 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d4c:	687a      	ldr	r2, [r7, #4]
 8000d4e:	0010      	movs	r0, r2
 8000d50:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46c0      	nop			@ (mov r8, r8)
}
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b004      	add	sp, #16
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	40020000 	.word	0x40020000

08000d60 <HAL_DMA_GetState>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2225      	movs	r2, #37	@ 0x25
 8000d6c:	5c9b      	ldrb	r3, [r3, r2]
 8000d6e:	b2db      	uxtb	r3, r3
}
 8000d70:	0018      	movs	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	b002      	add	sp, #8
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	089b      	lsrs	r3, r3, #2
 8000d86:	4a10      	ldr	r2, [pc, #64]	@ (8000dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8000d88:	4694      	mov	ip, r2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	001a      	movs	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	001a      	movs	r2, r3
 8000d9a:	23ff      	movs	r3, #255	@ 0xff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	3b08      	subs	r3, #8
 8000da0:	2114      	movs	r1, #20
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff f9ac 	bl	8000100 <__udivsi3>
 8000da8:	0003      	movs	r3, r0
 8000daa:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a07      	ldr	r2, [pc, #28]	@ (8000dcc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8000db0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	221f      	movs	r2, #31
 8000db6:	4013      	ands	r3, r2
 8000db8:	2201      	movs	r2, #1
 8000dba:	409a      	lsls	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b004      	add	sp, #16
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	10008200 	.word	0x10008200
 8000dcc:	40020880 	.word	0x40020880

08000dd0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	223f      	movs	r2, #63	@ 0x3f
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	4a0a      	ldr	r2, [pc, #40]	@ (8000e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000de6:	4694      	mov	ip, r2
 8000de8:	4463      	add	r3, ip
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	001a      	movs	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a07      	ldr	r2, [pc, #28]	@ (8000e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000df6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	3b01      	subs	r3, #1
 8000dfc:	2203      	movs	r2, #3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2201      	movs	r2, #1
 8000e02:	409a      	lsls	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	1000823f 	.word	0x1000823f
 8000e14:	40020940 	.word	0x40020940

08000e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b086      	sub	sp, #24
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e26:	e147      	b.n	80010b8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	697a      	ldr	r2, [r7, #20]
 8000e30:	4091      	lsls	r1, r2
 8000e32:	000a      	movs	r2, r1
 8000e34:	4013      	ands	r3, r2
 8000e36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <HAL_GPIO_Init+0x28>
 8000e3e:	e138      	b.n	80010b2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	2203      	movs	r2, #3
 8000e46:	4013      	ands	r3, r2
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d005      	beq.n	8000e58 <HAL_GPIO_Init+0x40>
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2203      	movs	r2, #3
 8000e52:	4013      	ands	r3, r2
 8000e54:	2b02      	cmp	r3, #2
 8000e56:	d130      	bne.n	8000eba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	689b      	ldr	r3, [r3, #8]
 8000e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	409a      	lsls	r2, r3
 8000e66:	0013      	movs	r3, r2
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68da      	ldr	r2, [r3, #12]
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	409a      	lsls	r2, r3
 8000e7a:	0013      	movs	r3, r2
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	693a      	ldr	r2, [r7, #16]
 8000e86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e8e:	2201      	movs	r2, #1
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	43da      	mvns	r2, r3
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	091b      	lsrs	r3, r3, #4
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	401a      	ands	r2, r3
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	409a      	lsls	r2, r3
 8000eac:	0013      	movs	r3, r2
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d017      	beq.n	8000ef6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	68db      	ldr	r3, [r3, #12]
 8000eca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	409a      	lsls	r2, r3
 8000ed4:	0013      	movs	r3, r2
 8000ed6:	43da      	mvns	r2, r3
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4013      	ands	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	689a      	ldr	r2, [r3, #8]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	2203      	movs	r2, #3
 8000efc:	4013      	ands	r3, r2
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d123      	bne.n	8000f4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	08da      	lsrs	r2, r3, #3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3208      	adds	r2, #8
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	58d3      	ldr	r3, [r2, r3]
 8000f0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2207      	movs	r2, #7
 8000f14:	4013      	ands	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	409a      	lsls	r2, r3
 8000f1c:	0013      	movs	r3, r2
 8000f1e:	43da      	mvns	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	691a      	ldr	r2, [r3, #16]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	2107      	movs	r1, #7
 8000f2e:	400b      	ands	r3, r1
 8000f30:	009b      	lsls	r3, r3, #2
 8000f32:	409a      	lsls	r2, r3
 8000f34:	0013      	movs	r3, r2
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	08da      	lsrs	r2, r3, #3
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3208      	adds	r2, #8
 8000f44:	0092      	lsls	r2, r2, #2
 8000f46:	6939      	ldr	r1, [r7, #16]
 8000f48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	005b      	lsls	r3, r3, #1
 8000f54:	2203      	movs	r2, #3
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	2203      	movs	r2, #3
 8000f68:	401a      	ands	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	409a      	lsls	r2, r3
 8000f70:	0013      	movs	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685a      	ldr	r2, [r3, #4]
 8000f82:	23c0      	movs	r3, #192	@ 0xc0
 8000f84:	029b      	lsls	r3, r3, #10
 8000f86:	4013      	ands	r3, r2
 8000f88:	d100      	bne.n	8000f8c <HAL_GPIO_Init+0x174>
 8000f8a:	e092      	b.n	80010b2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f8c:	4a50      	ldr	r2, [pc, #320]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	089b      	lsrs	r3, r3, #2
 8000f92:	3318      	adds	r3, #24
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	589b      	ldr	r3, [r3, r2]
 8000f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	00db      	lsls	r3, r3, #3
 8000fa2:	220f      	movs	r2, #15
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	43da      	mvns	r2, r3
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	23a0      	movs	r3, #160	@ 0xa0
 8000fb4:	05db      	lsls	r3, r3, #23
 8000fb6:	429a      	cmp	r2, r3
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x1ca>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a45      	ldr	r2, [pc, #276]	@ (80010d4 <HAL_GPIO_Init+0x2bc>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x1c6>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a44      	ldr	r2, [pc, #272]	@ (80010d8 <HAL_GPIO_Init+0x2c0>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x1c2>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a43      	ldr	r2, [pc, #268]	@ (80010dc <HAL_GPIO_Init+0x2c4>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x1be>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e006      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	e004      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fda:	2302      	movs	r3, #2
 8000fdc:	e002      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e000      	b.n	8000fe4 <HAL_GPIO_Init+0x1cc>
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	697a      	ldr	r2, [r7, #20]
 8000fe6:	2103      	movs	r1, #3
 8000fe8:	400a      	ands	r2, r1
 8000fea:	00d2      	lsls	r2, r2, #3
 8000fec:	4093      	lsls	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000ff4:	4936      	ldr	r1, [pc, #216]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	089b      	lsrs	r3, r3, #2
 8000ffa:	3318      	adds	r3, #24
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001002:	4b33      	ldr	r3, [pc, #204]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	035b      	lsls	r3, r3, #13
 800101a:	4013      	ands	r3, r2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001026:	4b2a      	ldr	r3, [pc, #168]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800102c:	4b28      	ldr	r3, [pc, #160]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43da      	mvns	r2, r3
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	2380      	movs	r3, #128	@ 0x80
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	4013      	ands	r3, r2
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001050:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001058:	2384      	movs	r3, #132	@ 0x84
 800105a:	58d3      	ldr	r3, [r2, r3]
 800105c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	43da      	mvns	r2, r3
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	4013      	ands	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	2380      	movs	r3, #128	@ 0x80
 800106e:	029b      	lsls	r3, r3, #10
 8001070:	4013      	ands	r3, r2
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800107c:	4914      	ldr	r1, [pc, #80]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 800107e:	2284      	movs	r2, #132	@ 0x84
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001084:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 8001086:	2380      	movs	r3, #128	@ 0x80
 8001088:	58d3      	ldr	r3, [r2, r3]
 800108a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	2380      	movs	r3, #128	@ 0x80
 800109c:	025b      	lsls	r3, r3, #9
 800109e:	4013      	ands	r3, r2
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80010a2:	693a      	ldr	r2, [r7, #16]
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010aa:	4909      	ldr	r1, [pc, #36]	@ (80010d0 <HAL_GPIO_Init+0x2b8>)
 80010ac:	2280      	movs	r2, #128	@ 0x80
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	3301      	adds	r3, #1
 80010b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	40da      	lsrs	r2, r3
 80010c0:	1e13      	subs	r3, r2, #0
 80010c2:	d000      	beq.n	80010c6 <HAL_GPIO_Init+0x2ae>
 80010c4:	e6b0      	b.n	8000e28 <HAL_GPIO_Init+0x10>
  }
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	46bd      	mov	sp, r7
 80010cc:	b006      	add	sp, #24
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40021800 	.word	0x40021800
 80010d4:	50000400 	.word	0x50000400
 80010d8:	50000800 	.word	0x50000800
 80010dc:	50000c00 	.word	0x50000c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	0008      	movs	r0, r1
 80010ea:	0011      	movs	r1, r2
 80010ec:	1cbb      	adds	r3, r7, #2
 80010ee:	1c02      	adds	r2, r0, #0
 80010f0:	801a      	strh	r2, [r3, #0]
 80010f2:	1c7b      	adds	r3, r7, #1
 80010f4:	1c0a      	adds	r2, r1, #0
 80010f6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f8:	1c7b      	adds	r3, r7, #1
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d004      	beq.n	800110a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001108:	e003      	b.n	8001112 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110a:	1cbb      	adds	r3, r7, #2
 800110c:	881a      	ldrh	r2, [r3, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b002      	add	sp, #8
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b084      	sub	sp, #16
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	000a      	movs	r2, r1
 8001124:	1cbb      	adds	r3, r7, #2
 8001126:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695b      	ldr	r3, [r3, #20]
 800112c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800112e:	1cbb      	adds	r3, r7, #2
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	4013      	ands	r3, r2
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	43db      	mvns	r3, r3
 800113c:	1cb9      	adds	r1, r7, #2
 800113e:	8809      	ldrh	r1, [r1, #0]
 8001140:	400b      	ands	r3, r1
 8001142:	431a      	orrs	r2, r3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b004      	add	sp, #16
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e08f      	b.n	8001282 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2241      	movs	r2, #65	@ 0x41
 8001166:	5c9b      	ldrb	r3, [r3, r2]
 8001168:	b2db      	uxtb	r3, r3
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2240      	movs	r2, #64	@ 0x40
 8001172:	2100      	movs	r1, #0
 8001174:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff f983 	bl	8000484 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2241      	movs	r2, #65	@ 0x41
 8001182:	2124      	movs	r1, #36	@ 0x24
 8001184:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	438a      	bics	r2, r1
 8001194:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	685a      	ldr	r2, [r3, #4]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	493b      	ldr	r1, [pc, #236]	@ (800128c <HAL_I2C_Init+0x13c>)
 80011a0:	400a      	ands	r2, r1
 80011a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4938      	ldr	r1, [pc, #224]	@ (8001290 <HAL_I2C_Init+0x140>)
 80011b0:	400a      	ands	r2, r1
 80011b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d108      	bne.n	80011ce <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689a      	ldr	r2, [r3, #8]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2180      	movs	r1, #128	@ 0x80
 80011c6:	0209      	lsls	r1, r1, #8
 80011c8:	430a      	orrs	r2, r1
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	e007      	b.n	80011de <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	2184      	movs	r1, #132	@ 0x84
 80011d8:	0209      	lsls	r1, r1, #8
 80011da:	430a      	orrs	r2, r1
 80011dc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d109      	bne.n	80011fa <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2180      	movs	r1, #128	@ 0x80
 80011f2:	0109      	lsls	r1, r1, #4
 80011f4:	430a      	orrs	r2, r1
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	e007      	b.n	800120a <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4923      	ldr	r1, [pc, #140]	@ (8001294 <HAL_I2C_Init+0x144>)
 8001206:	400a      	ands	r2, r1
 8001208:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4920      	ldr	r1, [pc, #128]	@ (8001298 <HAL_I2C_Init+0x148>)
 8001216:	430a      	orrs	r2, r1
 8001218:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68da      	ldr	r2, [r3, #12]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	491a      	ldr	r1, [pc, #104]	@ (8001290 <HAL_I2C_Init+0x140>)
 8001226:	400a      	ands	r2, r1
 8001228:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	695b      	ldr	r3, [r3, #20]
 8001232:	431a      	orrs	r2, r3
 8001234:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	430a      	orrs	r2, r1
 8001242:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	69d9      	ldr	r1, [r3, #28]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a1a      	ldr	r2, [r3, #32]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2101      	movs	r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2241      	movs	r2, #65	@ 0x41
 800126e:	2120      	movs	r1, #32
 8001270:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2242      	movs	r2, #66	@ 0x42
 800127c:	2100      	movs	r1, #0
 800127e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b002      	add	sp, #8
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			@ (mov r8, r8)
 800128c:	f0ffffff 	.word	0xf0ffffff
 8001290:	ffff7fff 	.word	0xffff7fff
 8001294:	fffff7ff 	.word	0xfffff7ff
 8001298:	02008000 	.word	0x02008000

0800129c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699b      	ldr	r3, [r3, #24]
 80012aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	68f9      	ldr	r1, [r7, #12]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	4798      	blx	r3
  }
}
 80012c8:	46c0      	nop			@ (mov r8, r8)
 80012ca:	46bd      	mov	sp, r7
 80012cc:	b004      	add	sp, #16
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b086      	sub	sp, #24
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	0a1b      	lsrs	r3, r3, #8
 80012ec:	001a      	movs	r2, r3
 80012ee:	2301      	movs	r3, #1
 80012f0:	4013      	ands	r3, r2
 80012f2:	d010      	beq.n	8001316 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	09db      	lsrs	r3, r3, #7
 80012f8:	001a      	movs	r2, r3
 80012fa:	2301      	movs	r3, #1
 80012fc:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80012fe:	d00a      	beq.n	8001316 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001304:	2201      	movs	r2, #1
 8001306:	431a      	orrs	r2, r3
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2280      	movs	r2, #128	@ 0x80
 8001312:	0052      	lsls	r2, r2, #1
 8001314:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	0a9b      	lsrs	r3, r3, #10
 800131a:	001a      	movs	r2, r3
 800131c:	2301      	movs	r3, #1
 800131e:	4013      	ands	r3, r2
 8001320:	d010      	beq.n	8001344 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	09db      	lsrs	r3, r3, #7
 8001326:	001a      	movs	r2, r3
 8001328:	2301      	movs	r3, #1
 800132a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800132c:	d00a      	beq.n	8001344 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	2208      	movs	r2, #8
 8001334:	431a      	orrs	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	2280      	movs	r2, #128	@ 0x80
 8001340:	00d2      	lsls	r2, r2, #3
 8001342:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	0a5b      	lsrs	r3, r3, #9
 8001348:	001a      	movs	r2, r3
 800134a:	2301      	movs	r3, #1
 800134c:	4013      	ands	r3, r2
 800134e:	d010      	beq.n	8001372 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	09db      	lsrs	r3, r3, #7
 8001354:	001a      	movs	r2, r3
 8001356:	2301      	movs	r3, #1
 8001358:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800135a:	d00a      	beq.n	8001372 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001360:	2202      	movs	r2, #2
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2280      	movs	r2, #128	@ 0x80
 800136e:	0092      	lsls	r2, r2, #2
 8001370:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	220b      	movs	r2, #11
 800137c:	4013      	ands	r3, r2
 800137e:	d005      	beq.n	800138c <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001380:	68fa      	ldr	r2, [r7, #12]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	0011      	movs	r1, r2
 8001386:	0018      	movs	r0, r3
 8001388:	f000 fc44 	bl	8001c14 <I2C_ITError>
  }
}
 800138c:	46c0      	nop			@ (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b006      	add	sp, #24
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800139c:	46c0      	nop			@ (mov r8, r8)
 800139e:	46bd      	mov	sp, r7
 80013a0:	b002      	add	sp, #8
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b002      	add	sp, #8
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	0008      	movs	r0, r1
 80013be:	0011      	movs	r1, r2
 80013c0:	1cfb      	adds	r3, r7, #3
 80013c2:	1c02      	adds	r2, r0, #0
 80013c4:	701a      	strb	r2, [r3, #0]
 80013c6:	003b      	movs	r3, r7
 80013c8:	1c0a      	adds	r2, r1, #0
 80013ca:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80013dc:	46c0      	nop			@ (mov r8, r8)
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80013ec:	46c0      	nop			@ (mov r8, r8)
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}

080013f4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80013fc:	46c0      	nop			@ (mov r8, r8)
 80013fe:	46bd      	mov	sp, r7
 8001400:	b002      	add	sp, #8
 8001402:	bd80      	pop	{r7, pc}

08001404 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001414:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2240      	movs	r2, #64	@ 0x40
 800141e:	5c9b      	ldrb	r3, [r3, r2]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <I2C_Slave_ISR_IT+0x24>
 8001424:	2302      	movs	r3, #2
 8001426:	e0fb      	b.n	8001620 <I2C_Slave_ISR_IT+0x21c>
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2240      	movs	r2, #64	@ 0x40
 800142c:	2101      	movs	r1, #1
 800142e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	095b      	lsrs	r3, r3, #5
 8001434:	001a      	movs	r2, r3
 8001436:	2301      	movs	r3, #1
 8001438:	4013      	ands	r3, r2
 800143a:	d00c      	beq.n	8001456 <I2C_Slave_ISR_IT+0x52>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	095b      	lsrs	r3, r3, #5
 8001440:	001a      	movs	r2, r3
 8001442:	2301      	movs	r3, #1
 8001444:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001446:	d006      	beq.n	8001456 <I2C_Slave_ISR_IT+0x52>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	0011      	movs	r1, r2
 800144e:	0018      	movs	r0, r3
 8001450:	f000 f9f6 	bl	8001840 <I2C_ITSlaveCplt>
 8001454:	e0df      	b.n	8001616 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	091b      	lsrs	r3, r3, #4
 800145a:	001a      	movs	r2, r3
 800145c:	2301      	movs	r3, #1
 800145e:	4013      	ands	r3, r2
 8001460:	d054      	beq.n	800150c <I2C_Slave_ISR_IT+0x108>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	091b      	lsrs	r3, r3, #4
 8001466:	001a      	movs	r2, r3
 8001468:	2301      	movs	r3, #1
 800146a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800146c:	d04e      	beq.n	800150c <I2C_Slave_ISR_IT+0x108>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001472:	b29b      	uxth	r3, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	d12d      	bne.n	80014d4 <I2C_Slave_ISR_IT+0xd0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2241      	movs	r2, #65	@ 0x41
 800147c:	5c9b      	ldrb	r3, [r3, r2]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	2b28      	cmp	r3, #40	@ 0x28
 8001482:	d10b      	bne.n	800149c <I2C_Slave_ISR_IT+0x98>
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	2380      	movs	r3, #128	@ 0x80
 8001488:	049b      	lsls	r3, r3, #18
 800148a:	429a      	cmp	r2, r3
 800148c:	d106      	bne.n	800149c <I2C_Slave_ISR_IT+0x98>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	0011      	movs	r1, r2
 8001494:	0018      	movs	r0, r3
 8001496:	f000 fb63 	bl	8001b60 <I2C_ITListenCplt>
 800149a:	e036      	b.n	800150a <I2C_Slave_ISR_IT+0x106>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	2241      	movs	r2, #65	@ 0x41
 80014a0:	5c9b      	ldrb	r3, [r3, r2]
 80014a2:	b2db      	uxtb	r3, r3
 80014a4:	2b29      	cmp	r3, #41	@ 0x29
 80014a6:	d110      	bne.n	80014ca <I2C_Slave_ISR_IT+0xc6>
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	4a5f      	ldr	r2, [pc, #380]	@ (8001628 <I2C_Slave_ISR_IT+0x224>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d00c      	beq.n	80014ca <I2C_Slave_ISR_IT+0xc6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2210      	movs	r2, #16
 80014b6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	0018      	movs	r0, r3
 80014bc:	f000 fcd5 	bl	8001e6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	0018      	movs	r0, r3
 80014c4:	f000 f956 	bl	8001774 <I2C_ITSlaveSeqCplt>
 80014c8:	e01f      	b.n	800150a <I2C_Slave_ISR_IT+0x106>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	2210      	movs	r2, #16
 80014d0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80014d2:	e09d      	b.n	8001610 <I2C_Slave_ISR_IT+0x20c>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2210      	movs	r2, #16
 80014da:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e0:	2204      	movs	r2, #4
 80014e2:	431a      	orrs	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d005      	beq.n	80014fa <I2C_Slave_ISR_IT+0xf6>
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	2380      	movs	r3, #128	@ 0x80
 80014f2:	045b      	lsls	r3, r3, #17
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d000      	beq.n	80014fa <I2C_Slave_ISR_IT+0xf6>
 80014f8:	e08a      	b.n	8001610 <I2C_Slave_ISR_IT+0x20c>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	0011      	movs	r1, r2
 8001502:	0018      	movs	r0, r3
 8001504:	f000 fb86 	bl	8001c14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001508:	e082      	b.n	8001610 <I2C_Slave_ISR_IT+0x20c>
 800150a:	e081      	b.n	8001610 <I2C_Slave_ISR_IT+0x20c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	089b      	lsrs	r3, r3, #2
 8001510:	001a      	movs	r2, r3
 8001512:	2301      	movs	r3, #1
 8001514:	4013      	ands	r3, r2
 8001516:	d031      	beq.n	800157c <I2C_Slave_ISR_IT+0x178>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	089b      	lsrs	r3, r3, #2
 800151c:	001a      	movs	r2, r3
 800151e:	2301      	movs	r3, #1
 8001520:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001522:	d02b      	beq.n	800157c <I2C_Slave_ISR_IT+0x178>
  {
    if (hi2c->XferCount > 0U)
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001528:	b29b      	uxth	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d018      	beq.n	8001560 <I2C_Slave_ISR_IT+0x15c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800154a:	3b01      	subs	r3, #1
 800154c:	b29a      	uxth	r2, r3
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001556:	b29b      	uxth	r3, r3
 8001558:	3b01      	subs	r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001564:	b29b      	uxth	r3, r3
 8001566:	2b00      	cmp	r3, #0
 8001568:	d154      	bne.n	8001614 <I2C_Slave_ISR_IT+0x210>
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	4a2e      	ldr	r2, [pc, #184]	@ (8001628 <I2C_Slave_ISR_IT+0x224>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d050      	beq.n	8001614 <I2C_Slave_ISR_IT+0x210>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	0018      	movs	r0, r3
 8001576:	f000 f8fd 	bl	8001774 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800157a:	e04b      	b.n	8001614 <I2C_Slave_ISR_IT+0x210>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	001a      	movs	r2, r3
 8001582:	2301      	movs	r3, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d00c      	beq.n	80015a2 <I2C_Slave_ISR_IT+0x19e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	08db      	lsrs	r3, r3, #3
 800158c:	001a      	movs	r2, r3
 800158e:	2301      	movs	r3, #1
 8001590:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001592:	d006      	beq.n	80015a2 <I2C_Slave_ISR_IT+0x19e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	0011      	movs	r1, r2
 800159a:	0018      	movs	r0, r3
 800159c:	f000 f846 	bl	800162c <I2C_ITAddrCplt>
 80015a0:	e039      	b.n	8001616 <I2C_Slave_ISR_IT+0x212>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	085b      	lsrs	r3, r3, #1
 80015a6:	001a      	movs	r2, r3
 80015a8:	2301      	movs	r3, #1
 80015aa:	4013      	ands	r3, r2
 80015ac:	d033      	beq.n	8001616 <I2C_Slave_ISR_IT+0x212>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	001a      	movs	r2, r3
 80015b4:	2301      	movs	r3, #1
 80015b6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80015b8:	d02d      	beq.n	8001616 <I2C_Slave_ISR_IT+0x212>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d018      	beq.n	80015f6 <I2C_Slave_ISR_IT+0x1f2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c8:	781a      	ldrb	r2, [r3, #0]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80015de:	b29b      	uxth	r3, r3
 80015e0:	3b01      	subs	r3, #1
 80015e2:	b29a      	uxth	r2, r3
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80015ec:	3b01      	subs	r3, #1
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80015f4:	e00f      	b.n	8001616 <I2C_Slave_ISR_IT+0x212>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	045b      	lsls	r3, r3, #17
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d002      	beq.n	8001606 <I2C_Slave_ISR_IT+0x202>
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d107      	bne.n	8001616 <I2C_Slave_ISR_IT+0x212>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	0018      	movs	r0, r3
 800160a:	f000 f8b3 	bl	8001774 <I2C_ITSlaveSeqCplt>
 800160e:	e002      	b.n	8001616 <I2C_Slave_ISR_IT+0x212>
    if (hi2c->XferCount == 0U)
 8001610:	46c0      	nop			@ (mov r8, r8)
 8001612:	e000      	b.n	8001616 <I2C_Slave_ISR_IT+0x212>
    if ((hi2c->XferCount == 0U) && \
 8001614:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2240      	movs	r2, #64	@ 0x40
 800161a:	2100      	movs	r1, #0
 800161c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	0018      	movs	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	b006      	add	sp, #24
 8001626:	bd80      	pop	{r7, pc}
 8001628:	ffff0000 	.word	0xffff0000

0800162c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800162c:	b5b0      	push	{r4, r5, r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2241      	movs	r2, #65	@ 0x41
 800163a:	5c9b      	ldrb	r3, [r3, r2]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	001a      	movs	r2, r3
 8001640:	2328      	movs	r3, #40	@ 0x28
 8001642:	4013      	ands	r3, r2
 8001644:	2b28      	cmp	r3, #40	@ 0x28
 8001646:	d000      	beq.n	800164a <I2C_ITAddrCplt+0x1e>
 8001648:	e088      	b.n	800175c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	699b      	ldr	r3, [r3, #24]
 8001650:	0c1b      	lsrs	r3, r3, #16
 8001652:	b2da      	uxtb	r2, r3
 8001654:	250f      	movs	r5, #15
 8001656:	197b      	adds	r3, r7, r5
 8001658:	2101      	movs	r1, #1
 800165a:	400a      	ands	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	0c1b      	lsrs	r3, r3, #16
 8001666:	b29a      	uxth	r2, r3
 8001668:	200c      	movs	r0, #12
 800166a:	183b      	adds	r3, r7, r0
 800166c:	21fe      	movs	r1, #254	@ 0xfe
 800166e:	400a      	ands	r2, r1
 8001670:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	b29a      	uxth	r2, r3
 800167a:	240a      	movs	r4, #10
 800167c:	193b      	adds	r3, r7, r4
 800167e:	0592      	lsls	r2, r2, #22
 8001680:	0d92      	lsrs	r2, r2, #22
 8001682:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	b29a      	uxth	r2, r3
 800168c:	2308      	movs	r3, #8
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	21fe      	movs	r1, #254	@ 0xfe
 8001692:	400a      	ands	r2, r1
 8001694:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b02      	cmp	r3, #2
 800169c:	d148      	bne.n	8001730 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800169e:	0021      	movs	r1, r4
 80016a0:	187b      	adds	r3, r7, r1
 80016a2:	881b      	ldrh	r3, [r3, #0]
 80016a4:	09db      	lsrs	r3, r3, #7
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	183b      	adds	r3, r7, r0
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	4053      	eors	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	001a      	movs	r2, r3
 80016b2:	2306      	movs	r3, #6
 80016b4:	4013      	ands	r3, r2
 80016b6:	d120      	bne.n	80016fa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80016b8:	183b      	adds	r3, r7, r0
 80016ba:	187a      	adds	r2, r7, r1
 80016bc:	8812      	ldrh	r2, [r2, #0]
 80016be:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c4:	1c5a      	adds	r2, r3, #1
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d14c      	bne.n	800176c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2208      	movs	r2, #8
 80016de:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2240      	movs	r2, #64	@ 0x40
 80016e4:	2100      	movs	r1, #0
 80016e6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80016e8:	183b      	adds	r3, r7, r0
 80016ea:	881a      	ldrh	r2, [r3, #0]
 80016ec:	197b      	adds	r3, r7, r5
 80016ee:	7819      	ldrb	r1, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	0018      	movs	r0, r3
 80016f4:	f7ff fe5e 	bl	80013b4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80016f8:	e038      	b.n	800176c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80016fa:	240c      	movs	r4, #12
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2208      	movs	r2, #8
 8001700:	18ba      	adds	r2, r7, r2
 8001702:	8812      	ldrh	r2, [r2, #0]
 8001704:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001706:	2380      	movs	r3, #128	@ 0x80
 8001708:	021a      	lsls	r2, r3, #8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	0011      	movs	r1, r2
 800170e:	0018      	movs	r0, r3
 8001710:	f000 fbec 	bl	8001eec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2240      	movs	r2, #64	@ 0x40
 8001718:	2100      	movs	r1, #0
 800171a:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800171c:	193b      	adds	r3, r7, r4
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	230f      	movs	r3, #15
 8001722:	18fb      	adds	r3, r7, r3
 8001724:	7819      	ldrb	r1, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	0018      	movs	r0, r3
 800172a:	f7ff fe43 	bl	80013b4 <HAL_I2C_AddrCallback>
}
 800172e:	e01d      	b.n	800176c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8001730:	2380      	movs	r3, #128	@ 0x80
 8001732:	021a      	lsls	r2, r3, #8
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f000 fbd7 	bl	8001eec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2240      	movs	r2, #64	@ 0x40
 8001742:	2100      	movs	r1, #0
 8001744:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001746:	230c      	movs	r3, #12
 8001748:	18fb      	adds	r3, r7, r3
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	230f      	movs	r3, #15
 800174e:	18fb      	adds	r3, r7, r3
 8001750:	7819      	ldrb	r1, [r3, #0]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	0018      	movs	r0, r3
 8001756:	f7ff fe2d 	bl	80013b4 <HAL_I2C_AddrCallback>
}
 800175a:	e007      	b.n	800176c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2208      	movs	r2, #8
 8001762:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2240      	movs	r2, #64	@ 0x40
 8001768:	2100      	movs	r1, #0
 800176a:	5499      	strb	r1, [r3, r2]
}
 800176c:	46c0      	nop			@ (mov r8, r8)
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bdb0      	pop	{r4, r5, r7, pc}

08001774 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2242      	movs	r2, #66	@ 0x42
 8001788:	2100      	movs	r1, #0
 800178a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	0b9b      	lsrs	r3, r3, #14
 8001790:	001a      	movs	r2, r3
 8001792:	2301      	movs	r3, #1
 8001794:	4013      	ands	r3, r2
 8001796:	d008      	beq.n	80017aa <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4925      	ldr	r1, [pc, #148]	@ (8001838 <I2C_ITSlaveSeqCplt+0xc4>)
 80017a4:	400a      	ands	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	e00d      	b.n	80017c6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	0bdb      	lsrs	r3, r3, #15
 80017ae:	001a      	movs	r2, r3
 80017b0:	2301      	movs	r3, #1
 80017b2:	4013      	ands	r3, r2
 80017b4:	d007      	beq.n	80017c6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	491e      	ldr	r1, [pc, #120]	@ (800183c <I2C_ITSlaveSeqCplt+0xc8>)
 80017c2:	400a      	ands	r2, r1
 80017c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2241      	movs	r2, #65	@ 0x41
 80017ca:	5c9b      	ldrb	r3, [r3, r2]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	2b29      	cmp	r3, #41	@ 0x29
 80017d0:	d114      	bne.n	80017fc <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2241      	movs	r2, #65	@ 0x41
 80017d6:	2128      	movs	r1, #40	@ 0x28
 80017d8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2221      	movs	r2, #33	@ 0x21
 80017de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2101      	movs	r1, #1
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 fb81 	bl	8001eec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2240      	movs	r2, #64	@ 0x40
 80017ee:	2100      	movs	r1, #0
 80017f0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fdcd 	bl	8001394 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80017fa:	e019      	b.n	8001830 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2241      	movs	r2, #65	@ 0x41
 8001800:	5c9b      	ldrb	r3, [r3, r2]
 8001802:	b2db      	uxtb	r3, r3
 8001804:	2b2a      	cmp	r3, #42	@ 0x2a
 8001806:	d113      	bne.n	8001830 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2241      	movs	r2, #65	@ 0x41
 800180c:	2128      	movs	r1, #40	@ 0x28
 800180e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2222      	movs	r2, #34	@ 0x22
 8001814:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2102      	movs	r1, #2
 800181a:	0018      	movs	r0, r3
 800181c:	f000 fb66 	bl	8001eec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2240      	movs	r2, #64	@ 0x40
 8001824:	2100      	movs	r1, #0
 8001826:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff fdba 	bl	80013a4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001830:	46c0      	nop			@ (mov r8, r8)
 8001832:	46bd      	mov	sp, r7
 8001834:	b004      	add	sp, #16
 8001836:	bd80      	pop	{r7, pc}
 8001838:	ffffbfff 	.word	0xffffbfff
 800183c:	ffff7fff 	.word	0xffff7fff

08001840 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800185c:	200b      	movs	r0, #11
 800185e:	183b      	adds	r3, r7, r0
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	2141      	movs	r1, #65	@ 0x41
 8001864:	5c52      	ldrb	r2, [r2, r1]
 8001866:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001870:	183b      	adds	r3, r7, r0
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	2b21      	cmp	r3, #33	@ 0x21
 8001876:	d003      	beq.n	8001880 <I2C_ITSlaveCplt+0x40>
 8001878:	183b      	adds	r3, r7, r0
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b29      	cmp	r3, #41	@ 0x29
 800187e:	d109      	bne.n	8001894 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8001880:	4ab0      	ldr	r2, [pc, #704]	@ (8001b44 <I2C_ITSlaveCplt+0x304>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	0011      	movs	r1, r2
 8001886:	0018      	movs	r0, r3
 8001888:	f000 fb30 	bl	8001eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2221      	movs	r2, #33	@ 0x21
 8001890:	631a      	str	r2, [r3, #48]	@ 0x30
 8001892:	e020      	b.n	80018d6 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001894:	220b      	movs	r2, #11
 8001896:	18bb      	adds	r3, r7, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b22      	cmp	r3, #34	@ 0x22
 800189c:	d003      	beq.n	80018a6 <I2C_ITSlaveCplt+0x66>
 800189e:	18bb      	adds	r3, r7, r2
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80018a4:	d109      	bne.n	80018ba <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80018a6:	4aa8      	ldr	r2, [pc, #672]	@ (8001b48 <I2C_ITSlaveCplt+0x308>)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	0011      	movs	r1, r2
 80018ac:	0018      	movs	r0, r3
 80018ae:	f000 fb1d 	bl	8001eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2222      	movs	r2, #34	@ 0x22
 80018b6:	631a      	str	r2, [r3, #48]	@ 0x30
 80018b8:	e00d      	b.n	80018d6 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80018ba:	230b      	movs	r3, #11
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b28      	cmp	r3, #40	@ 0x28
 80018c2:	d108      	bne.n	80018d6 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80018c4:	4aa1      	ldr	r2, [pc, #644]	@ (8001b4c <I2C_ITSlaveCplt+0x30c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	0011      	movs	r1, r2
 80018ca:	0018      	movs	r0, r3
 80018cc:	f000 fb0e 	bl	8001eec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2200      	movs	r2, #0
 80018d4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2180      	movs	r1, #128	@ 0x80
 80018e2:	0209      	lsls	r1, r1, #8
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4997      	ldr	r1, [pc, #604]	@ (8001b50 <I2C_ITSlaveCplt+0x310>)
 80018f4:	400a      	ands	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 fab5 	bl	8001e6a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	0b9b      	lsrs	r3, r3, #14
 8001904:	001a      	movs	r2, r3
 8001906:	2301      	movs	r3, #1
 8001908:	4013      	ands	r3, r2
 800190a:	d013      	beq.n	8001934 <I2C_ITSlaveCplt+0xf4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	498f      	ldr	r1, [pc, #572]	@ (8001b54 <I2C_ITSlaveCplt+0x314>)
 8001918:	400a      	ands	r2, r1
 800191a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001920:	2b00      	cmp	r3, #0
 8001922:	d020      	beq.n	8001966 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	b29a      	uxth	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001932:	e018      	b.n	8001966 <I2C_ITSlaveCplt+0x126>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	0bdb      	lsrs	r3, r3, #15
 8001938:	001a      	movs	r2, r3
 800193a:	2301      	movs	r3, #1
 800193c:	4013      	ands	r3, r2
 800193e:	d012      	beq.n	8001966 <I2C_ITSlaveCplt+0x126>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4983      	ldr	r1, [pc, #524]	@ (8001b58 <I2C_ITSlaveCplt+0x318>)
 800194c:	400a      	ands	r2, r1
 800194e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <I2C_ITSlaveCplt+0x126>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	b29a      	uxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	089b      	lsrs	r3, r3, #2
 800196a:	001a      	movs	r2, r3
 800196c:	2301      	movs	r3, #1
 800196e:	4013      	ands	r3, r2
 8001970:	d020      	beq.n	80019b4 <I2C_ITSlaveCplt+0x174>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	2204      	movs	r2, #4
 8001976:	4393      	bics	r3, r2
 8001978:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00c      	beq.n	80019b4 <I2C_ITSlaveCplt+0x174>
    {
      hi2c->XferSize--;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800199e:	3b01      	subs	r3, #1
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	3b01      	subs	r3, #1
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <I2C_ITSlaveCplt+0x18a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c2:	2204      	movs	r2, #4
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	091b      	lsrs	r3, r3, #4
 80019ce:	001a      	movs	r2, r3
 80019d0:	2301      	movs	r3, #1
 80019d2:	4013      	ands	r3, r2
 80019d4:	d051      	beq.n	8001a7a <I2C_ITSlaveCplt+0x23a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	001a      	movs	r2, r3
 80019dc:	2301      	movs	r3, #1
 80019de:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80019e0:	d04b      	beq.n	8001a7a <I2C_ITSlaveCplt+0x23a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d12d      	bne.n	8001a48 <I2C_ITSlaveCplt+0x208>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2241      	movs	r2, #65	@ 0x41
 80019f0:	5c9b      	ldrb	r3, [r3, r2]
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	2b28      	cmp	r3, #40	@ 0x28
 80019f6:	d10b      	bne.n	8001a10 <I2C_ITSlaveCplt+0x1d0>
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d106      	bne.n	8001a10 <I2C_ITSlaveCplt+0x1d0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	0011      	movs	r1, r2
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 f8a9 	bl	8001b60 <I2C_ITListenCplt>
 8001a0e:	e034      	b.n	8001a7a <I2C_ITSlaveCplt+0x23a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2241      	movs	r2, #65	@ 0x41
 8001a14:	5c9b      	ldrb	r3, [r3, r2]
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b29      	cmp	r3, #41	@ 0x29
 8001a1a:	d110      	bne.n	8001a3e <I2C_ITSlaveCplt+0x1fe>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a4f      	ldr	r2, [pc, #316]	@ (8001b5c <I2C_ITSlaveCplt+0x31c>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d00c      	beq.n	8001a3e <I2C_ITSlaveCplt+0x1fe>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2210      	movs	r2, #16
 8001a2a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fa1b 	bl	8001e6a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	0018      	movs	r0, r3
 8001a38:	f7ff fe9c 	bl	8001774 <I2C_ITSlaveSeqCplt>
 8001a3c:	e01d      	b.n	8001a7a <I2C_ITSlaveCplt+0x23a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2210      	movs	r2, #16
 8001a44:	61da      	str	r2, [r3, #28]
 8001a46:	e018      	b.n	8001a7a <I2C_ITSlaveCplt+0x23a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a54:	2204      	movs	r2, #4
 8001a56:	431a      	orrs	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d004      	beq.n	8001a6c <I2C_ITSlaveCplt+0x22c>
 8001a62:	68fa      	ldr	r2, [r7, #12]
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	045b      	lsls	r3, r3, #17
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d106      	bne.n	8001a7a <I2C_ITSlaveCplt+0x23a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	0011      	movs	r1, r2
 8001a74:	0018      	movs	r0, r3
 8001a76:	f000 f8cd 	bl	8001c14 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2242      	movs	r2, #66	@ 0x42
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d013      	beq.n	8001ab8 <I2C_ITSlaveCplt+0x278>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	0011      	movs	r1, r2
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f000 f8bb 	bl	8001c14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2241      	movs	r2, #65	@ 0x41
 8001aa2:	5c9b      	ldrb	r3, [r3, r2]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b28      	cmp	r3, #40	@ 0x28
 8001aa8:	d147      	bne.n	8001b3a <I2C_ITSlaveCplt+0x2fa>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0011      	movs	r1, r2
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f000 f855 	bl	8001b60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001ab6:	e040      	b.n	8001b3a <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001abc:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <I2C_ITSlaveCplt+0x31c>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d016      	beq.n	8001af0 <I2C_ITSlaveCplt+0x2b0>
    I2C_ITSlaveSeqCplt(hi2c);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f7ff fe55 	bl	8001774 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a23      	ldr	r2, [pc, #140]	@ (8001b5c <I2C_ITSlaveCplt+0x31c>)
 8001ace:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2241      	movs	r2, #65	@ 0x41
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2240      	movs	r2, #64	@ 0x40
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fc73 	bl	80013d4 <HAL_I2C_ListenCpltCallback>
}
 8001aee:	e024      	b.n	8001b3a <I2C_ITSlaveCplt+0x2fa>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2241      	movs	r2, #65	@ 0x41
 8001af4:	5c9b      	ldrb	r3, [r3, r2]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b22      	cmp	r3, #34	@ 0x22
 8001afa:	d10f      	bne.n	8001b1c <I2C_ITSlaveCplt+0x2dc>
    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2241      	movs	r2, #65	@ 0x41
 8001b00:	2120      	movs	r1, #32
 8001b02:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2240      	movs	r2, #64	@ 0x40
 8001b0e:	2100      	movs	r1, #0
 8001b10:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7ff fc45 	bl	80013a4 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b1a:	e00e      	b.n	8001b3a <I2C_ITSlaveCplt+0x2fa>
    hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2241      	movs	r2, #65	@ 0x41
 8001b20:	2120      	movs	r1, #32
 8001b22:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2200      	movs	r2, #0
 8001b28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2240      	movs	r2, #64	@ 0x40
 8001b2e:	2100      	movs	r1, #0
 8001b30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	0018      	movs	r0, r3
 8001b36:	f7ff fc2d 	bl	8001394 <HAL_I2C_SlaveTxCpltCallback>
}
 8001b3a:	46c0      	nop			@ (mov r8, r8)
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	b006      	add	sp, #24
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	46c0      	nop			@ (mov r8, r8)
 8001b44:	00008001 	.word	0x00008001
 8001b48:	00008002 	.word	0x00008002
 8001b4c:	00008003 	.word	0x00008003
 8001b50:	fe00e800 	.word	0xfe00e800
 8001b54:	ffffbfff 	.word	0xffffbfff
 8001b58:	ffff7fff 	.word	0xffff7fff
 8001b5c:	ffff0000 	.word	0xffff0000

08001b60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	4a27      	ldr	r2, [pc, #156]	@ (8001c0c <I2C_ITListenCplt+0xac>)
 8001b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2241      	movs	r2, #65	@ 0x41
 8001b7a:	2120      	movs	r1, #32
 8001b7c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2242      	movs	r2, #66	@ 0x42
 8001b82:	2100      	movs	r1, #0
 8001b84:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	089b      	lsrs	r3, r3, #2
 8001b90:	001a      	movs	r2, r3
 8001b92:	2301      	movs	r3, #1
 8001b94:	4013      	ands	r3, r2
 8001b96:	d022      	beq.n	8001bde <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	1c5a      	adds	r2, r3, #1
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d012      	beq.n	8001bde <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc8:	b29b      	uxth	r3, r3
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	2204      	movs	r2, #4
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001bde:	4a0c      	ldr	r2, [pc, #48]	@ (8001c10 <I2C_ITListenCplt+0xb0>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	0011      	movs	r1, r2
 8001be4:	0018      	movs	r0, r3
 8001be6:	f000 f981 	bl	8001eec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2210      	movs	r2, #16
 8001bf0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2240      	movs	r2, #64	@ 0x40
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fbe9 	bl	80013d4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8001c02:	46c0      	nop			@ (mov r8, r8)
 8001c04:	46bd      	mov	sp, r7
 8001c06:	b002      	add	sp, #8
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	46c0      	nop			@ (mov r8, r8)
 8001c0c:	ffff0000 	.word	0xffff0000
 8001c10:	00008003 	.word	0x00008003

08001c14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001c1e:	200f      	movs	r0, #15
 8001c20:	183b      	adds	r3, r7, r0
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	2141      	movs	r1, #65	@ 0x41
 8001c26:	5c52      	ldrb	r2, [r2, r1]
 8001c28:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2242      	movs	r2, #66	@ 0x42
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a72      	ldr	r2, [pc, #456]	@ (8001e00 <I2C_ITError+0x1ec>)
 8001c36:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001c4a:	183b      	adds	r3, r7, r0
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	2b28      	cmp	r3, #40	@ 0x28
 8001c50:	d007      	beq.n	8001c62 <I2C_ITError+0x4e>
 8001c52:	183b      	adds	r3, r7, r0
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b29      	cmp	r3, #41	@ 0x29
 8001c58:	d003      	beq.n	8001c62 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8001c5a:	183b      	adds	r3, r7, r0
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001c60:	d10c      	bne.n	8001c7c <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2103      	movs	r1, #3
 8001c66:	0018      	movs	r0, r3
 8001c68:	f000 f940 	bl	8001eec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2241      	movs	r2, #65	@ 0x41
 8001c70:	2128      	movs	r1, #40	@ 0x28
 8001c72:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4a63      	ldr	r2, [pc, #396]	@ (8001e04 <I2C_ITError+0x1f0>)
 8001c78:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c7a:	e032      	b.n	8001ce2 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8001c7c:	4a62      	ldr	r2, [pc, #392]	@ (8001e08 <I2C_ITError+0x1f4>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0011      	movs	r1, r2
 8001c82:	0018      	movs	r0, r3
 8001c84:	f000 f932 	bl	8001eec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f000 f8ed 	bl	8001e6a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2241      	movs	r2, #65	@ 0x41
 8001c94:	5c9b      	ldrb	r3, [r3, r2]
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b60      	cmp	r3, #96	@ 0x60
 8001c9a:	d01f      	beq.n	8001cdc <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2241      	movs	r2, #65	@ 0x41
 8001ca0:	2120      	movs	r1, #32
 8001ca2:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4013      	ands	r3, r2
 8001cae:	2b20      	cmp	r3, #32
 8001cb0:	d114      	bne.n	8001cdc <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2210      	movs	r2, #16
 8001cba:	4013      	ands	r3, r2
 8001cbc:	2b10      	cmp	r3, #16
 8001cbe:	d109      	bne.n	8001cd4 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2210      	movs	r2, #16
 8001cc6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ccc:	2204      	movs	r2, #4
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d03b      	beq.n	8001d68 <I2C_ITError+0x154>
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b11      	cmp	r3, #17
 8001cf4:	d002      	beq.n	8001cfc <I2C_ITError+0xe8>
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b21      	cmp	r3, #33	@ 0x21
 8001cfa:	d135      	bne.n	8001d68 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	2380      	movs	r3, #128	@ 0x80
 8001d04:	01db      	lsls	r3, r3, #7
 8001d06:	401a      	ands	r2, r3
 8001d08:	2380      	movs	r3, #128	@ 0x80
 8001d0a:	01db      	lsls	r3, r3, #7
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d107      	bne.n	8001d20 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	493c      	ldr	r1, [pc, #240]	@ (8001e0c <I2C_ITError+0x1f8>)
 8001d1c:	400a      	ands	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d24:	0018      	movs	r0, r3
 8001d26:	f7ff f81b 	bl	8000d60 <HAL_DMA_GetState>
 8001d2a:	0003      	movs	r3, r0
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d016      	beq.n	8001d5e <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d34:	4a36      	ldr	r2, [pc, #216]	@ (8001e10 <I2C_ITError+0x1fc>)
 8001d36:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2240      	movs	r2, #64	@ 0x40
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d44:	0018      	movs	r0, r3
 8001d46:	f7fe feef 	bl	8000b28 <HAL_DMA_Abort_IT>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d051      	beq.n	8001df2 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d58:	0018      	movs	r0, r3
 8001d5a:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d5c:	e049      	b.n	8001df2 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	0018      	movs	r0, r3
 8001d62:	f000 f859 	bl	8001e18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001d66:	e044      	b.n	8001df2 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d03b      	beq.n	8001de8 <I2C_ITError+0x1d4>
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2b12      	cmp	r3, #18
 8001d74:	d002      	beq.n	8001d7c <I2C_ITError+0x168>
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	2b22      	cmp	r3, #34	@ 0x22
 8001d7a:	d135      	bne.n	8001de8 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	@ 0x80
 8001d84:	021b      	lsls	r3, r3, #8
 8001d86:	401a      	ands	r2, r3
 8001d88:	2380      	movs	r3, #128	@ 0x80
 8001d8a:	021b      	lsls	r3, r3, #8
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d107      	bne.n	8001da0 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	491e      	ldr	r1, [pc, #120]	@ (8001e14 <I2C_ITError+0x200>)
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7fe ffdb 	bl	8000d60 <HAL_DMA_GetState>
 8001daa:	0003      	movs	r3, r0
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d016      	beq.n	8001dde <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	4a16      	ldr	r2, [pc, #88]	@ (8001e10 <I2C_ITError+0x1fc>)
 8001db6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dc4:	0018      	movs	r0, r3
 8001dc6:	f7fe feaf 	bl	8000b28 <HAL_DMA_Abort_IT>
 8001dca:	1e03      	subs	r3, r0, #0
 8001dcc:	d013      	beq.n	8001df6 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd8:	0018      	movs	r0, r3
 8001dda:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001ddc:	e00b      	b.n	8001df6 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f000 f819 	bl	8001e18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001de6:	e006      	b.n	8001df6 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	0018      	movs	r0, r3
 8001dec:	f000 f814 	bl	8001e18 <I2C_TreatErrorCallback>
  }
}
 8001df0:	e002      	b.n	8001df8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001df2:	46c0      	nop			@ (mov r8, r8)
 8001df4:	e000      	b.n	8001df8 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001df6:	46c0      	nop			@ (mov r8, r8)
}
 8001df8:	46c0      	nop			@ (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b004      	add	sp, #16
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	ffff0000 	.word	0xffff0000
 8001e04:	08001405 	.word	0x08001405
 8001e08:	00008003 	.word	0x00008003
 8001e0c:	ffffbfff 	.word	0xffffbfff
 8001e10:	08001eaf 	.word	0x08001eaf
 8001e14:	ffff7fff 	.word	0xffff7fff

08001e18 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2241      	movs	r2, #65	@ 0x41
 8001e24:	5c9b      	ldrb	r3, [r3, r2]
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b60      	cmp	r3, #96	@ 0x60
 8001e2a:	d10f      	bne.n	8001e4c <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2241      	movs	r2, #65	@ 0x41
 8001e30:	2120      	movs	r1, #32
 8001e32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2200      	movs	r2, #0
 8001e38:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2240      	movs	r2, #64	@ 0x40
 8001e3e:	2100      	movs	r1, #0
 8001e40:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0018      	movs	r0, r3
 8001e46:	f7ff fad5 	bl	80013f4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8001e4a:	e00a      	b.n	8001e62 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2240      	movs	r2, #64	@ 0x40
 8001e56:	2100      	movs	r1, #0
 8001e58:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	0018      	movs	r0, r3
 8001e5e:	f7ff fac1 	bl	80013e4 <HAL_I2C_ErrorCallback>
}
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b002      	add	sp, #8
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	2202      	movs	r2, #2
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d103      	bne.n	8001e88 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2200      	movs	r2, #0
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d007      	beq.n	8001ea6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699a      	ldr	r2, [r3, #24]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	619a      	str	r2, [r3, #24]
  }
}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	b002      	add	sp, #8
 8001eac:	bd80      	pop	{r7, pc}

08001eae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ec8:	2200      	movs	r2, #0
 8001eca:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ed8:	2200      	movs	r2, #0
 8001eda:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	0018      	movs	r0, r3
 8001ee0:	f7ff ff9a 	bl	8001e18 <I2C_TreatErrorCallback>
}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}

08001eec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	000a      	movs	r2, r1
 8001ef6:	1cbb      	adds	r3, r7, #2
 8001ef8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8001efe:	1cbb      	adds	r3, r7, #2
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	4013      	ands	r3, r2
 8001f06:	d010      	beq.n	8001f2a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	2242      	movs	r2, #66	@ 0x42
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2241      	movs	r2, #65	@ 0x41
 8001f14:	5c9b      	ldrb	r3, [r3, r2]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	001a      	movs	r2, r3
 8001f1a:	2328      	movs	r3, #40	@ 0x28
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b28      	cmp	r3, #40	@ 0x28
 8001f20:	d003      	beq.n	8001f2a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	22b0      	movs	r2, #176	@ 0xb0
 8001f26:	4313      	orrs	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8001f2a:	1cbb      	adds	r3, r7, #2
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	4013      	ands	r3, r2
 8001f32:	d010      	beq.n	8001f56 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2244      	movs	r2, #68	@ 0x44
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2241      	movs	r2, #65	@ 0x41
 8001f40:	5c9b      	ldrb	r3, [r3, r2]
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	001a      	movs	r2, r3
 8001f46:	2328      	movs	r3, #40	@ 0x28
 8001f48:	4013      	ands	r3, r2
 8001f4a:	2b28      	cmp	r3, #40	@ 0x28
 8001f4c:	d003      	beq.n	8001f56 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	22b0      	movs	r2, #176	@ 0xb0
 8001f52:	4313      	orrs	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8001f56:	1cbb      	adds	r3, r7, #2
 8001f58:	2200      	movs	r2, #0
 8001f5a:	5e9b      	ldrsh	r3, [r3, r2]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	da03      	bge.n	8001f68 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	22b8      	movs	r2, #184	@ 0xb8
 8001f64:	4313      	orrs	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8001f68:	1cbb      	adds	r3, r7, #2
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d103      	bne.n	8001f78 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2290      	movs	r2, #144	@ 0x90
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8001f78:	1cbb      	adds	r3, r7, #2
 8001f7a:	881b      	ldrh	r3, [r3, #0]
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d103      	bne.n	8001f88 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2220      	movs	r2, #32
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8001f88:	1cbb      	adds	r3, r7, #2
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	2b40      	cmp	r3, #64	@ 0x40
 8001f8e:	d103      	bne.n	8001f98 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2240      	movs	r2, #64	@ 0x40
 8001f94:	4313      	orrs	r3, r2
 8001f96:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43d9      	mvns	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	601a      	str	r2, [r3, #0]
}
 8001faa:	46c0      	nop			@ (mov r8, r8)
 8001fac:	46bd      	mov	sp, r7
 8001fae:	b004      	add	sp, #16
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2241      	movs	r2, #65	@ 0x41
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b20      	cmp	r3, #32
 8001fc8:	d138      	bne.n	800203c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2240      	movs	r2, #64	@ 0x40
 8001fce:	5c9b      	ldrb	r3, [r3, r2]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d101      	bne.n	8001fd8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	e032      	b.n	800203e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2240      	movs	r2, #64	@ 0x40
 8001fdc:	2101      	movs	r1, #1
 8001fde:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2241      	movs	r2, #65	@ 0x41
 8001fe4:	2124      	movs	r1, #36	@ 0x24
 8001fe6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4911      	ldr	r1, [pc, #68]	@ (8002048 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002004:	400a      	ands	r2, r1
 8002006:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6819      	ldr	r1, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	430a      	orrs	r2, r1
 8002016:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2101      	movs	r1, #1
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2241      	movs	r2, #65	@ 0x41
 800202c:	2120      	movs	r1, #32
 800202e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2240      	movs	r2, #64	@ 0x40
 8002034:	2100      	movs	r1, #0
 8002036:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002038:	2300      	movs	r3, #0
 800203a:	e000      	b.n	800203e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800203c:	2302      	movs	r3, #2
  }
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			@ (mov r8, r8)
 8002048:	ffffefff 	.word	0xffffefff

0800204c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2241      	movs	r2, #65	@ 0x41
 800205a:	5c9b      	ldrb	r3, [r3, r2]
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b20      	cmp	r3, #32
 8002060:	d139      	bne.n	80020d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2240      	movs	r2, #64	@ 0x40
 8002066:	5c9b      	ldrb	r3, [r3, r2]
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800206c:	2302      	movs	r3, #2
 800206e:	e033      	b.n	80020d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2240      	movs	r2, #64	@ 0x40
 8002074:	2101      	movs	r1, #1
 8002076:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2241      	movs	r2, #65	@ 0x41
 800207c:	2124      	movs	r1, #36	@ 0x24
 800207e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2101      	movs	r1, #1
 800208c:	438a      	bics	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4a11      	ldr	r2, [pc, #68]	@ (80020e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2101      	movs	r1, #1
 80020be:	430a      	orrs	r2, r1
 80020c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2241      	movs	r2, #65	@ 0x41
 80020c6:	2120      	movs	r1, #32
 80020c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2240      	movs	r2, #64	@ 0x40
 80020ce:	2100      	movs	r1, #0
 80020d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	e000      	b.n	80020d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020d6:	2302      	movs	r3, #2
  }
}
 80020d8:	0018      	movs	r0, r3
 80020da:	46bd      	mov	sp, r7
 80020dc:	b004      	add	sp, #16
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	fffff0ff 	.word	0xfffff0ff

080020e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80020ec:	4b19      	ldr	r3, [pc, #100]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a19      	ldr	r2, [pc, #100]	@ (8002158 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80020f2:	4013      	ands	r3, r2
 80020f4:	0019      	movs	r1, r3
 80020f6:	4b17      	ldr	r3, [pc, #92]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	2380      	movs	r3, #128	@ 0x80
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	429a      	cmp	r2, r3
 8002106:	d11f      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002108:	4b14      	ldr	r3, [pc, #80]	@ (800215c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	0013      	movs	r3, r2
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	189b      	adds	r3, r3, r2
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4912      	ldr	r1, [pc, #72]	@ (8002160 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002116:	0018      	movs	r0, r3
 8002118:	f7fd fff2 	bl	8000100 <__udivsi3>
 800211c:	0003      	movs	r3, r0
 800211e:	3301      	adds	r3, #1
 8002120:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002122:	e008      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	3b01      	subs	r3, #1
 800212e:	60fb      	str	r3, [r7, #12]
 8002130:	e001      	b.n	8002136 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e009      	b.n	800214a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002136:	4b07      	ldr	r3, [pc, #28]	@ (8002154 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002138:	695a      	ldr	r2, [r3, #20]
 800213a:	2380      	movs	r3, #128	@ 0x80
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	401a      	ands	r2, r3
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	429a      	cmp	r2, r3
 8002146:	d0ed      	beq.n	8002124 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b004      	add	sp, #16
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			@ (mov r8, r8)
 8002154:	40007000 	.word	0x40007000
 8002158:	fffff9ff 	.word	0xfffff9ff
 800215c:	20000000 	.word	0x20000000
 8002160:	000f4240 	.word	0x000f4240

08002164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b088      	sub	sp, #32
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e2fe      	b.n	8002774 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	d100      	bne.n	8002182 <HAL_RCC_OscConfig+0x1e>
 8002180:	e07c      	b.n	800227c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002182:	4bc3      	ldr	r3, [pc, #780]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2238      	movs	r2, #56	@ 0x38
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800218c:	4bc0      	ldr	r3, [pc, #768]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2203      	movs	r2, #3
 8002192:	4013      	ands	r3, r2
 8002194:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	2b10      	cmp	r3, #16
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_OscConfig+0x3e>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d002      	beq.n	80021a8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b08      	cmp	r3, #8
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	4bb9      	ldr	r3, [pc, #740]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	029b      	lsls	r3, r3, #10
 80021b0:	4013      	ands	r3, r2
 80021b2:	d062      	beq.n	800227a <HAL_RCC_OscConfig+0x116>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d15e      	bne.n	800227a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e2d9      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	2380      	movs	r3, #128	@ 0x80
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d107      	bne.n	80021dc <HAL_RCC_OscConfig+0x78>
 80021cc:	4bb0      	ldr	r3, [pc, #704]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4baf      	ldr	r3, [pc, #700]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	2180      	movs	r1, #128	@ 0x80
 80021d4:	0249      	lsls	r1, r1, #9
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	e020      	b.n	800221e <HAL_RCC_OscConfig+0xba>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	23a0      	movs	r3, #160	@ 0xa0
 80021e2:	02db      	lsls	r3, r3, #11
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d10e      	bne.n	8002206 <HAL_RCC_OscConfig+0xa2>
 80021e8:	4ba9      	ldr	r3, [pc, #676]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4ba8      	ldr	r3, [pc, #672]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021ee:	2180      	movs	r1, #128	@ 0x80
 80021f0:	02c9      	lsls	r1, r1, #11
 80021f2:	430a      	orrs	r2, r1
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	4ba6      	ldr	r3, [pc, #664]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	4ba5      	ldr	r3, [pc, #660]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80021fc:	2180      	movs	r1, #128	@ 0x80
 80021fe:	0249      	lsls	r1, r1, #9
 8002200:	430a      	orrs	r2, r1
 8002202:	601a      	str	r2, [r3, #0]
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0xba>
 8002206:	4ba2      	ldr	r3, [pc, #648]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	4ba1      	ldr	r3, [pc, #644]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800220c:	49a1      	ldr	r1, [pc, #644]	@ (8002494 <HAL_RCC_OscConfig+0x330>)
 800220e:	400a      	ands	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	4b9f      	ldr	r3, [pc, #636]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	4b9e      	ldr	r3, [pc, #632]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002218:	499f      	ldr	r1, [pc, #636]	@ (8002498 <HAL_RCC_OscConfig+0x334>)
 800221a:	400a      	ands	r2, r1
 800221c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d014      	beq.n	8002250 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002226:	f7fe fae9 	bl	80007fc <HAL_GetTick>
 800222a:	0003      	movs	r3, r0
 800222c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800222e:	e008      	b.n	8002242 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002230:	f7fe fae4 	bl	80007fc <HAL_GetTick>
 8002234:	0002      	movs	r2, r0
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b64      	cmp	r3, #100	@ 0x64
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e298      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002242:	4b93      	ldr	r3, [pc, #588]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	2380      	movs	r3, #128	@ 0x80
 8002248:	029b      	lsls	r3, r3, #10
 800224a:	4013      	ands	r3, r2
 800224c:	d0f0      	beq.n	8002230 <HAL_RCC_OscConfig+0xcc>
 800224e:	e015      	b.n	800227c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fad4 	bl	80007fc <HAL_GetTick>
 8002254:	0003      	movs	r3, r0
 8002256:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800225a:	f7fe facf 	bl	80007fc <HAL_GetTick>
 800225e:	0002      	movs	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b64      	cmp	r3, #100	@ 0x64
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e283      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800226c:	4b88      	ldr	r3, [pc, #544]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	2380      	movs	r3, #128	@ 0x80
 8002272:	029b      	lsls	r3, r3, #10
 8002274:	4013      	ands	r3, r2
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0xf6>
 8002278:	e000      	b.n	800227c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800227a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2202      	movs	r2, #2
 8002282:	4013      	ands	r3, r2
 8002284:	d100      	bne.n	8002288 <HAL_RCC_OscConfig+0x124>
 8002286:	e099      	b.n	80023bc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002288:	4b81      	ldr	r3, [pc, #516]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2238      	movs	r2, #56	@ 0x38
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002292:	4b7f      	ldr	r3, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	2203      	movs	r2, #3
 8002298:	4013      	ands	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_OscConfig+0x144>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d002      	beq.n	80022ae <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d135      	bne.n	800231a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ae:	4b78      	ldr	r3, [pc, #480]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	2380      	movs	r3, #128	@ 0x80
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4013      	ands	r3, r2
 80022b8:	d005      	beq.n	80022c6 <HAL_RCC_OscConfig+0x162>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e256      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c6:	4b72      	ldr	r3, [pc, #456]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	4a74      	ldr	r2, [pc, #464]	@ (800249c <HAL_RCC_OscConfig+0x338>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	021a      	lsls	r2, r3, #8
 80022d6:	4b6e      	ldr	r3, [pc, #440]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	430a      	orrs	r2, r1
 80022da:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d112      	bne.n	8002308 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80022e2:	4b6b      	ldr	r3, [pc, #428]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6e      	ldr	r2, [pc, #440]	@ (80024a0 <HAL_RCC_OscConfig+0x33c>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	4b67      	ldr	r3, [pc, #412]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80022f6:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0adb      	lsrs	r3, r3, #11
 80022fc:	2207      	movs	r2, #7
 80022fe:	4013      	ands	r3, r2
 8002300:	4a68      	ldr	r2, [pc, #416]	@ (80024a4 <HAL_RCC_OscConfig+0x340>)
 8002302:	40da      	lsrs	r2, r3
 8002304:	4b68      	ldr	r3, [pc, #416]	@ (80024a8 <HAL_RCC_OscConfig+0x344>)
 8002306:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002308:	4b68      	ldr	r3, [pc, #416]	@ (80024ac <HAL_RCC_OscConfig+0x348>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	0018      	movs	r0, r3
 800230e:	f7fe fa19 	bl	8000744 <HAL_InitTick>
 8002312:	1e03      	subs	r3, r0, #0
 8002314:	d051      	beq.n	80023ba <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e22c      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d030      	beq.n	8002384 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002322:	4b5b      	ldr	r3, [pc, #364]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a5e      	ldr	r2, [pc, #376]	@ (80024a0 <HAL_RCC_OscConfig+0x33c>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691a      	ldr	r2, [r3, #16]
 8002330:	4b57      	ldr	r3, [pc, #348]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002332:	430a      	orrs	r2, r1
 8002334:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002336:	4b56      	ldr	r3, [pc, #344]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	4b55      	ldr	r3, [pc, #340]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800233c:	2180      	movs	r1, #128	@ 0x80
 800233e:	0049      	lsls	r1, r1, #1
 8002340:	430a      	orrs	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002344:	f7fe fa5a 	bl	80007fc <HAL_GetTick>
 8002348:	0003      	movs	r3, r0
 800234a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800234e:	f7fe fa55 	bl	80007fc <HAL_GetTick>
 8002352:	0002      	movs	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e209      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002360:	4b4b      	ldr	r3, [pc, #300]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	4013      	ands	r3, r2
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b48      	ldr	r3, [pc, #288]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a4a      	ldr	r2, [pc, #296]	@ (800249c <HAL_RCC_OscConfig+0x338>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	021a      	lsls	r2, r3, #8
 800237c:	4b44      	ldr	r3, [pc, #272]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
 8002382:	e01b      	b.n	80023bc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002384:	4b42      	ldr	r3, [pc, #264]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	4b41      	ldr	r3, [pc, #260]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800238a:	4949      	ldr	r1, [pc, #292]	@ (80024b0 <HAL_RCC_OscConfig+0x34c>)
 800238c:	400a      	ands	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7fe fa34 	bl	80007fc <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239a:	f7fe fa2f 	bl	80007fc <HAL_GetTick>
 800239e:	0002      	movs	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e1e3      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023ac:	4b38      	ldr	r3, [pc, #224]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	2380      	movs	r3, #128	@ 0x80
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	4013      	ands	r3, r2
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x236>
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ba:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2208      	movs	r2, #8
 80023c2:	4013      	ands	r3, r2
 80023c4:	d047      	beq.n	8002456 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80023c6:	4b32      	ldr	r3, [pc, #200]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2238      	movs	r2, #56	@ 0x38
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b18      	cmp	r3, #24
 80023d0:	d10a      	bne.n	80023e8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80023d2:	4b2f      	ldr	r3, [pc, #188]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023d6:	2202      	movs	r2, #2
 80023d8:	4013      	ands	r3, r2
 80023da:	d03c      	beq.n	8002456 <HAL_RCC_OscConfig+0x2f2>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d138      	bne.n	8002456 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e1c5      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	699b      	ldr	r3, [r3, #24]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d019      	beq.n	8002424 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023f2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023f4:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 80023f6:	2101      	movs	r1, #1
 80023f8:	430a      	orrs	r2, r1
 80023fa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fc:	f7fe f9fe 	bl	80007fc <HAL_GetTick>
 8002400:	0003      	movs	r3, r0
 8002402:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002406:	f7fe f9f9 	bl	80007fc <HAL_GetTick>
 800240a:	0002      	movs	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e1ad      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002418:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800241a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800241c:	2202      	movs	r2, #2
 800241e:	4013      	ands	r3, r2
 8002420:	d0f1      	beq.n	8002406 <HAL_RCC_OscConfig+0x2a2>
 8002422:	e018      	b.n	8002456 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002426:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002428:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800242a:	2101      	movs	r1, #1
 800242c:	438a      	bics	r2, r1
 800242e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe f9e4 	bl	80007fc <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800243a:	f7fe f9df 	bl	80007fc <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e193      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800244c:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800244e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d1f1      	bne.n	800243a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2204      	movs	r2, #4
 800245c:	4013      	ands	r3, r2
 800245e:	d100      	bne.n	8002462 <HAL_RCC_OscConfig+0x2fe>
 8002460:	e0c6      	b.n	80025f0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002462:	231f      	movs	r3, #31
 8002464:	18fb      	adds	r3, r7, r3
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800246a:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	2238      	movs	r2, #56	@ 0x38
 8002470:	4013      	ands	r3, r2
 8002472:	2b20      	cmp	r3, #32
 8002474:	d11e      	bne.n	80024b4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_OscConfig+0x32c>)
 8002478:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d100      	bne.n	8002482 <HAL_RCC_OscConfig+0x31e>
 8002480:	e0b6      	b.n	80025f0 <HAL_RCC_OscConfig+0x48c>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d000      	beq.n	800248c <HAL_RCC_OscConfig+0x328>
 800248a:	e0b1      	b.n	80025f0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e171      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
 8002490:	40021000 	.word	0x40021000
 8002494:	fffeffff 	.word	0xfffeffff
 8002498:	fffbffff 	.word	0xfffbffff
 800249c:	ffff80ff 	.word	0xffff80ff
 80024a0:	ffffc7ff 	.word	0xffffc7ff
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004
 80024b0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024b4:	4bb1      	ldr	r3, [pc, #708]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80024b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024b8:	2380      	movs	r3, #128	@ 0x80
 80024ba:	055b      	lsls	r3, r3, #21
 80024bc:	4013      	ands	r3, r2
 80024be:	d101      	bne.n	80024c4 <HAL_RCC_OscConfig+0x360>
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x362>
 80024c4:	2300      	movs	r3, #0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d011      	beq.n	80024ee <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80024ca:	4bac      	ldr	r3, [pc, #688]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80024cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024ce:	4bab      	ldr	r3, [pc, #684]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80024d0:	2180      	movs	r1, #128	@ 0x80
 80024d2:	0549      	lsls	r1, r1, #21
 80024d4:	430a      	orrs	r2, r1
 80024d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024d8:	4ba8      	ldr	r3, [pc, #672]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80024da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	055b      	lsls	r3, r3, #21
 80024e0:	4013      	ands	r3, r2
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80024e6:	231f      	movs	r3, #31
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	2201      	movs	r2, #1
 80024ec:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ee:	4ba4      	ldr	r3, [pc, #656]	@ (8002780 <HAL_RCC_OscConfig+0x61c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4013      	ands	r3, r2
 80024f8:	d11a      	bne.n	8002530 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fa:	4ba1      	ldr	r3, [pc, #644]	@ (8002780 <HAL_RCC_OscConfig+0x61c>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	4ba0      	ldr	r3, [pc, #640]	@ (8002780 <HAL_RCC_OscConfig+0x61c>)
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	0049      	lsls	r1, r1, #1
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002508:	f7fe f978 	bl	80007fc <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7fe f973 	bl	80007fc <HAL_GetTick>
 8002516:	0002      	movs	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e127      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4b96      	ldr	r3, [pc, #600]	@ (8002780 <HAL_RCC_OscConfig+0x61c>)
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	2380      	movs	r3, #128	@ 0x80
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	4013      	ands	r3, r2
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d106      	bne.n	8002546 <HAL_RCC_OscConfig+0x3e2>
 8002538:	4b90      	ldr	r3, [pc, #576]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800253a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800253c:	4b8f      	ldr	r3, [pc, #572]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800253e:	2101      	movs	r1, #1
 8002540:	430a      	orrs	r2, r1
 8002542:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002544:	e01c      	b.n	8002580 <HAL_RCC_OscConfig+0x41c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b05      	cmp	r3, #5
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0x404>
 800254e:	4b8b      	ldr	r3, [pc, #556]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002550:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002552:	4b8a      	ldr	r3, [pc, #552]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002554:	2104      	movs	r1, #4
 8002556:	430a      	orrs	r2, r1
 8002558:	65da      	str	r2, [r3, #92]	@ 0x5c
 800255a:	4b88      	ldr	r3, [pc, #544]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800255c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800255e:	4b87      	ldr	r3, [pc, #540]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0x41c>
 8002568:	4b84      	ldr	r3, [pc, #528]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800256a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800256c:	4b83      	ldr	r3, [pc, #524]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800256e:	2101      	movs	r1, #1
 8002570:	438a      	bics	r2, r1
 8002572:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002574:	4b81      	ldr	r3, [pc, #516]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002576:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002578:	4b80      	ldr	r3, [pc, #512]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800257a:	2104      	movs	r1, #4
 800257c:	438a      	bics	r2, r1
 800257e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d014      	beq.n	80025b2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe f938 	bl	80007fc <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002590:	e009      	b.n	80025a6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002592:	f7fe f933 	bl	80007fc <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	4a79      	ldr	r2, [pc, #484]	@ (8002784 <HAL_RCC_OscConfig+0x620>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e0e6      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	4b75      	ldr	r3, [pc, #468]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80025a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d0f0      	beq.n	8002592 <HAL_RCC_OscConfig+0x42e>
 80025b0:	e013      	b.n	80025da <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b2:	f7fe f923 	bl	80007fc <HAL_GetTick>
 80025b6:	0003      	movs	r3, r0
 80025b8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ba:	e009      	b.n	80025d0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025bc:	f7fe f91e 	bl	80007fc <HAL_GetTick>
 80025c0:	0002      	movs	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	4a6f      	ldr	r2, [pc, #444]	@ (8002784 <HAL_RCC_OscConfig+0x620>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e0d1      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d0:	4b6a      	ldr	r3, [pc, #424]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80025d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025d4:	2202      	movs	r2, #2
 80025d6:	4013      	ands	r3, r2
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80025da:	231f      	movs	r3, #31
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b01      	cmp	r3, #1
 80025e2:	d105      	bne.n	80025f0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80025e4:	4b65      	ldr	r3, [pc, #404]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80025e6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80025e8:	4b64      	ldr	r3, [pc, #400]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80025ea:	4967      	ldr	r1, [pc, #412]	@ (8002788 <HAL_RCC_OscConfig+0x624>)
 80025ec:	400a      	ands	r2, r1
 80025ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	69db      	ldr	r3, [r3, #28]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d100      	bne.n	80025fa <HAL_RCC_OscConfig+0x496>
 80025f8:	e0bb      	b.n	8002772 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025fa:	4b60      	ldr	r3, [pc, #384]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	2238      	movs	r2, #56	@ 0x38
 8002600:	4013      	ands	r3, r2
 8002602:	2b10      	cmp	r3, #16
 8002604:	d100      	bne.n	8002608 <HAL_RCC_OscConfig+0x4a4>
 8002606:	e07b      	b.n	8002700 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	2b02      	cmp	r3, #2
 800260e:	d156      	bne.n	80026be <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002610:	4b5a      	ldr	r3, [pc, #360]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4b59      	ldr	r3, [pc, #356]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002616:	495d      	ldr	r1, [pc, #372]	@ (800278c <HAL_RCC_OscConfig+0x628>)
 8002618:	400a      	ands	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe f8ee 	bl	80007fc <HAL_GetTick>
 8002620:	0003      	movs	r3, r0
 8002622:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002626:	f7fe f8e9 	bl	80007fc <HAL_GetTick>
 800262a:	0002      	movs	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e09d      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002638:	4b50      	ldr	r3, [pc, #320]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	2380      	movs	r3, #128	@ 0x80
 800263e:	049b      	lsls	r3, r3, #18
 8002640:	4013      	ands	r3, r2
 8002642:	d1f0      	bne.n	8002626 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002644:	4b4d      	ldr	r3, [pc, #308]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a51      	ldr	r2, [pc, #324]	@ (8002790 <HAL_RCC_OscConfig+0x62c>)
 800264a:	4013      	ands	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1a      	ldr	r2, [r3, #32]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002656:	431a      	orrs	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800265c:	021b      	lsls	r3, r3, #8
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002664:	431a      	orrs	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266a:	431a      	orrs	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002670:	431a      	orrs	r2, r3
 8002672:	4b42      	ldr	r3, [pc, #264]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002674:	430a      	orrs	r2, r1
 8002676:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002678:	4b40      	ldr	r3, [pc, #256]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	4b3f      	ldr	r3, [pc, #252]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800267e:	2180      	movs	r1, #128	@ 0x80
 8002680:	0449      	lsls	r1, r1, #17
 8002682:	430a      	orrs	r2, r1
 8002684:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002686:	4b3d      	ldr	r3, [pc, #244]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	4b3c      	ldr	r3, [pc, #240]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800268c:	2180      	movs	r1, #128	@ 0x80
 800268e:	0549      	lsls	r1, r1, #21
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe f8b2 	bl	80007fc <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe f8ad 	bl	80007fc <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e061      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b0:	4b32      	ldr	r3, [pc, #200]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	2380      	movs	r3, #128	@ 0x80
 80026b6:	049b      	lsls	r3, r3, #18
 80026b8:	4013      	ands	r3, r2
 80026ba:	d0f0      	beq.n	800269e <HAL_RCC_OscConfig+0x53a>
 80026bc:	e059      	b.n	8002772 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026be:	4b2f      	ldr	r3, [pc, #188]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	4b2e      	ldr	r3, [pc, #184]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80026c4:	4931      	ldr	r1, [pc, #196]	@ (800278c <HAL_RCC_OscConfig+0x628>)
 80026c6:	400a      	ands	r2, r1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe f897 	bl	80007fc <HAL_GetTick>
 80026ce:	0003      	movs	r3, r0
 80026d0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe f892 	bl	80007fc <HAL_GetTick>
 80026d8:	0002      	movs	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e046      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026e6:	4b25      	ldr	r3, [pc, #148]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	049b      	lsls	r3, r3, #18
 80026ee:	4013      	ands	r3, r2
 80026f0:	d1f0      	bne.n	80026d4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80026f2:	4b22      	ldr	r3, [pc, #136]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	4b21      	ldr	r3, [pc, #132]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 80026f8:	4926      	ldr	r1, [pc, #152]	@ (8002794 <HAL_RCC_OscConfig+0x630>)
 80026fa:	400a      	ands	r2, r1
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	e038      	b.n	8002772 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	69db      	ldr	r3, [r3, #28]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d101      	bne.n	800270c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e033      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800270c:	4b1b      	ldr	r3, [pc, #108]	@ (800277c <HAL_RCC_OscConfig+0x618>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	2203      	movs	r2, #3
 8002716:	401a      	ands	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a1b      	ldr	r3, [r3, #32]
 800271c:	429a      	cmp	r2, r3
 800271e:	d126      	bne.n	800276e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2270      	movs	r2, #112	@ 0x70
 8002724:	401a      	ands	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800272a:	429a      	cmp	r2, r3
 800272c:	d11f      	bne.n	800276e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	23fe      	movs	r3, #254	@ 0xfe
 8002732:	01db      	lsls	r3, r3, #7
 8002734:	401a      	ands	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800273a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d116      	bne.n	800276e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002740:	697a      	ldr	r2, [r7, #20]
 8002742:	23f8      	movs	r3, #248	@ 0xf8
 8002744:	039b      	lsls	r3, r3, #14
 8002746:	401a      	ands	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	429a      	cmp	r2, r3
 800274e:	d10e      	bne.n	800276e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	23e0      	movs	r3, #224	@ 0xe0
 8002754:	051b      	lsls	r3, r3, #20
 8002756:	401a      	ands	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d106      	bne.n	800276e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	0f5b      	lsrs	r3, r3, #29
 8002764:	075a      	lsls	r2, r3, #29
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800276a:	429a      	cmp	r2, r3
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002772:	2300      	movs	r3, #0
}
 8002774:	0018      	movs	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	b008      	add	sp, #32
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
 8002784:	00001388 	.word	0x00001388
 8002788:	efffffff 	.word	0xefffffff
 800278c:	feffffff 	.word	0xfeffffff
 8002790:	11c1808c 	.word	0x11c1808c
 8002794:	eefefffc 	.word	0xeefefffc

08002798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0e9      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027ac:	4b76      	ldr	r3, [pc, #472]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2207      	movs	r2, #7
 80027b2:	4013      	ands	r3, r2
 80027b4:	683a      	ldr	r2, [r7, #0]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d91e      	bls.n	80027f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ba:	4b73      	ldr	r3, [pc, #460]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2207      	movs	r2, #7
 80027c0:	4393      	bics	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	4b70      	ldr	r3, [pc, #448]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	430a      	orrs	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027cc:	f7fe f816 	bl	80007fc <HAL_GetTick>
 80027d0:	0003      	movs	r3, r0
 80027d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027d4:	e009      	b.n	80027ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d6:	f7fe f811 	bl	80007fc <HAL_GetTick>
 80027da:	0002      	movs	r2, r0
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	4a6a      	ldr	r2, [pc, #424]	@ (800298c <HAL_RCC_ClockConfig+0x1f4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0ca      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80027ea:	4b67      	ldr	r3, [pc, #412]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	2207      	movs	r2, #7
 80027f0:	4013      	ands	r3, r2
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1ee      	bne.n	80027d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	d015      	beq.n	800282e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2204      	movs	r2, #4
 8002808:	4013      	ands	r3, r2
 800280a:	d006      	beq.n	800281a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800280c:	4b60      	ldr	r3, [pc, #384]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	4b5f      	ldr	r3, [pc, #380]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 8002812:	21e0      	movs	r1, #224	@ 0xe0
 8002814:	01c9      	lsls	r1, r1, #7
 8002816:	430a      	orrs	r2, r1
 8002818:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281a:	4b5d      	ldr	r3, [pc, #372]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	4a5d      	ldr	r2, [pc, #372]	@ (8002994 <HAL_RCC_ClockConfig+0x1fc>)
 8002820:	4013      	ands	r3, r2
 8002822:	0019      	movs	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	4b59      	ldr	r3, [pc, #356]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800282a:	430a      	orrs	r2, r1
 800282c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2201      	movs	r2, #1
 8002834:	4013      	ands	r3, r2
 8002836:	d057      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002840:	4b53      	ldr	r3, [pc, #332]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	2380      	movs	r3, #128	@ 0x80
 8002846:	029b      	lsls	r3, r3, #10
 8002848:	4013      	ands	r3, r2
 800284a:	d12b      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e097      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b02      	cmp	r3, #2
 8002856:	d107      	bne.n	8002868 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002858:	4b4d      	ldr	r3, [pc, #308]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	049b      	lsls	r3, r3, #18
 8002860:	4013      	ands	r3, r2
 8002862:	d11f      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e08b      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002870:	4b47      	ldr	r3, [pc, #284]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	2380      	movs	r3, #128	@ 0x80
 8002876:	00db      	lsls	r3, r3, #3
 8002878:	4013      	ands	r3, r2
 800287a:	d113      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e07f      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b03      	cmp	r3, #3
 8002886:	d106      	bne.n	8002896 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002888:	4b41      	ldr	r3, [pc, #260]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800288a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800288c:	2202      	movs	r2, #2
 800288e:	4013      	ands	r3, r2
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e074      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002896:	4b3e      	ldr	r3, [pc, #248]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 8002898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800289a:	2202      	movs	r2, #2
 800289c:	4013      	ands	r3, r2
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e06d      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2207      	movs	r2, #7
 80028aa:	4393      	bics	r3, r2
 80028ac:	0019      	movs	r1, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	4b37      	ldr	r3, [pc, #220]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 80028b4:	430a      	orrs	r2, r1
 80028b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b8:	f7fd ffa0 	bl	80007fc <HAL_GetTick>
 80028bc:	0003      	movs	r3, r0
 80028be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028c0:	e009      	b.n	80028d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c2:	f7fd ff9b 	bl	80007fc <HAL_GetTick>
 80028c6:	0002      	movs	r2, r0
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	4a2f      	ldr	r2, [pc, #188]	@ (800298c <HAL_RCC_ClockConfig+0x1f4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e054      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2238      	movs	r2, #56	@ 0x38
 80028dc:	401a      	ands	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1ec      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2207      	movs	r2, #7
 80028ee:	4013      	ands	r3, r2
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d21e      	bcs.n	8002934 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2207      	movs	r2, #7
 80028fc:	4393      	bics	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	430a      	orrs	r2, r1
 8002906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002908:	f7fd ff78 	bl	80007fc <HAL_GetTick>
 800290c:	0003      	movs	r3, r0
 800290e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002910:	e009      	b.n	8002926 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002912:	f7fd ff73 	bl	80007fc <HAL_GetTick>
 8002916:	0002      	movs	r2, r0
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	4a1b      	ldr	r2, [pc, #108]	@ (800298c <HAL_RCC_ClockConfig+0x1f4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e02c      	b.n	8002980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002926:	4b18      	ldr	r3, [pc, #96]	@ (8002988 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2207      	movs	r2, #7
 800292c:	4013      	ands	r3, r2
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d1ee      	bne.n	8002912 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2204      	movs	r2, #4
 800293a:	4013      	ands	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800293e:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	4a15      	ldr	r2, [pc, #84]	@ (8002998 <HAL_RCC_ClockConfig+0x200>)
 8002944:	4013      	ands	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800294e:	430a      	orrs	r2, r1
 8002950:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002952:	f000 f829 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002956:	0001      	movs	r1, r0
 8002958:	4b0d      	ldr	r3, [pc, #52]	@ (8002990 <HAL_RCC_ClockConfig+0x1f8>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	0a1b      	lsrs	r3, r3, #8
 800295e:	220f      	movs	r2, #15
 8002960:	401a      	ands	r2, r3
 8002962:	4b0e      	ldr	r3, [pc, #56]	@ (800299c <HAL_RCC_ClockConfig+0x204>)
 8002964:	0092      	lsls	r2, r2, #2
 8002966:	58d3      	ldr	r3, [r2, r3]
 8002968:	221f      	movs	r2, #31
 800296a:	4013      	ands	r3, r2
 800296c:	000a      	movs	r2, r1
 800296e:	40da      	lsrs	r2, r3
 8002970:	4b0b      	ldr	r3, [pc, #44]	@ (80029a0 <HAL_RCC_ClockConfig+0x208>)
 8002972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002974:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_ClockConfig+0x20c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	0018      	movs	r0, r3
 800297a:	f7fd fee3 	bl	8000744 <HAL_InitTick>
 800297e:	0003      	movs	r3, r0
}
 8002980:	0018      	movs	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	b004      	add	sp, #16
 8002986:	bd80      	pop	{r7, pc}
 8002988:	40022000 	.word	0x40022000
 800298c:	00001388 	.word	0x00001388
 8002990:	40021000 	.word	0x40021000
 8002994:	fffff0ff 	.word	0xfffff0ff
 8002998:	ffff8fff 	.word	0xffff8fff
 800299c:	08002e4c 	.word	0x08002e4c
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ae:	4b3c      	ldr	r3, [pc, #240]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2238      	movs	r2, #56	@ 0x38
 80029b4:	4013      	ands	r3, r2
 80029b6:	d10f      	bne.n	80029d8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80029b8:	4b39      	ldr	r3, [pc, #228]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	0adb      	lsrs	r3, r3, #11
 80029be:	2207      	movs	r2, #7
 80029c0:	4013      	ands	r3, r2
 80029c2:	2201      	movs	r2, #1
 80029c4:	409a      	lsls	r2, r3
 80029c6:	0013      	movs	r3, r2
 80029c8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80029ca:	6839      	ldr	r1, [r7, #0]
 80029cc:	4835      	ldr	r0, [pc, #212]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80029ce:	f7fd fb97 	bl	8000100 <__udivsi3>
 80029d2:	0003      	movs	r3, r0
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	e05d      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029d8:	4b31      	ldr	r3, [pc, #196]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	2238      	movs	r2, #56	@ 0x38
 80029de:	4013      	ands	r3, r2
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d102      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029e4:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 80029e6:	613b      	str	r3, [r7, #16]
 80029e8:	e054      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ea:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2238      	movs	r2, #56	@ 0x38
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b10      	cmp	r3, #16
 80029f4:	d138      	bne.n	8002a68 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80029f6:	4b2a      	ldr	r3, [pc, #168]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2203      	movs	r2, #3
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a00:	4b27      	ldr	r3, [pc, #156]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	2207      	movs	r2, #7
 8002a08:	4013      	ands	r3, r2
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d10d      	bne.n	8002a30 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a14:	68b9      	ldr	r1, [r7, #8]
 8002a16:	4824      	ldr	r0, [pc, #144]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002a18:	f7fd fb72 	bl	8000100 <__udivsi3>
 8002a1c:	0003      	movs	r3, r0
 8002a1e:	0019      	movs	r1, r3
 8002a20:	4b1f      	ldr	r3, [pc, #124]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	227f      	movs	r2, #127	@ 0x7f
 8002a28:	4013      	ands	r3, r2
 8002a2a:	434b      	muls	r3, r1
 8002a2c:	617b      	str	r3, [r7, #20]
        break;
 8002a2e:	e00d      	b.n	8002a4c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002a30:	68b9      	ldr	r1, [r7, #8]
 8002a32:	481c      	ldr	r0, [pc, #112]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002a34:	f7fd fb64 	bl	8000100 <__udivsi3>
 8002a38:	0003      	movs	r3, r0
 8002a3a:	0019      	movs	r1, r3
 8002a3c:	4b18      	ldr	r3, [pc, #96]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	0a1b      	lsrs	r3, r3, #8
 8002a42:	227f      	movs	r2, #127	@ 0x7f
 8002a44:	4013      	ands	r3, r2
 8002a46:	434b      	muls	r3, r1
 8002a48:	617b      	str	r3, [r7, #20]
        break;
 8002a4a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002a4c:	4b14      	ldr	r3, [pc, #80]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0f5b      	lsrs	r3, r3, #29
 8002a52:	2207      	movs	r2, #7
 8002a54:	4013      	ands	r3, r2
 8002a56:	3301      	adds	r3, #1
 8002a58:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	6978      	ldr	r0, [r7, #20]
 8002a5e:	f7fd fb4f 	bl	8000100 <__udivsi3>
 8002a62:	0003      	movs	r3, r0
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	e015      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002a68:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2238      	movs	r2, #56	@ 0x38
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d103      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002a74:	2380      	movs	r3, #128	@ 0x80
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	613b      	str	r3, [r7, #16]
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002a7c:	4b08      	ldr	r3, [pc, #32]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2238      	movs	r2, #56	@ 0x38
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b18      	cmp	r3, #24
 8002a86:	d103      	bne.n	8002a90 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002a88:	23fa      	movs	r3, #250	@ 0xfa
 8002a8a:	01db      	lsls	r3, r3, #7
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	e001      	b.n	8002a94 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a94:	693b      	ldr	r3, [r7, #16]
}
 8002a96:	0018      	movs	r0, r3
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	b006      	add	sp, #24
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	46c0      	nop			@ (mov r8, r8)
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	00f42400 	.word	0x00f42400
 8002aa8:	007a1200 	.word	0x007a1200

08002aac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ab4:	2313      	movs	r3, #19
 8002ab6:	18fb      	adds	r3, r7, r3
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002abc:	2312      	movs	r3, #18
 8002abe:	18fb      	adds	r3, r7, r3
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	@ 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	d100      	bne.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002ad0:	e0a3      	b.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ad2:	2011      	movs	r0, #17
 8002ad4:	183b      	adds	r3, r7, r0
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ada:	4bb3      	ldr	r3, [pc, #716]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002adc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	055b      	lsls	r3, r3, #21
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d110      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4bb0      	ldr	r3, [pc, #704]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ae8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002aea:	4baf      	ldr	r3, [pc, #700]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002aec:	2180      	movs	r1, #128	@ 0x80
 8002aee:	0549      	lsls	r1, r1, #21
 8002af0:	430a      	orrs	r2, r1
 8002af2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002af4:	4bac      	ldr	r3, [pc, #688]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002af6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	055b      	lsls	r3, r3, #21
 8002afc:	4013      	ands	r3, r2
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	183b      	adds	r3, r7, r0
 8002b04:	2201      	movs	r2, #1
 8002b06:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b08:	4ba8      	ldr	r3, [pc, #672]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	4ba7      	ldr	r3, [pc, #668]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b0e:	2180      	movs	r1, #128	@ 0x80
 8002b10:	0049      	lsls	r1, r1, #1
 8002b12:	430a      	orrs	r2, r1
 8002b14:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b16:	f7fd fe71 	bl	80007fc <HAL_GetTick>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b20:	f7fd fe6c 	bl	80007fc <HAL_GetTick>
 8002b24:	0002      	movs	r2, r0
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d904      	bls.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002b2e:	2313      	movs	r3, #19
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2203      	movs	r2, #3
 8002b34:	701a      	strb	r2, [r3, #0]
        break;
 8002b36:	e005      	b.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b38:	4b9c      	ldr	r3, [pc, #624]	@ (8002dac <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	2380      	movs	r3, #128	@ 0x80
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4013      	ands	r3, r2
 8002b42:	d0ed      	beq.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002b44:	2313      	movs	r3, #19
 8002b46:	18fb      	adds	r3, r7, r3
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d154      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b4e:	4b96      	ldr	r3, [pc, #600]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b50:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b52:	23c0      	movs	r3, #192	@ 0xc0
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4013      	ands	r3, r2
 8002b58:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d019      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d014      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b6a:	4b8f      	ldr	r3, [pc, #572]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6e:	4a90      	ldr	r2, [pc, #576]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002b70:	4013      	ands	r3, r2
 8002b72:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b74:	4b8c      	ldr	r3, [pc, #560]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b78:	4b8b      	ldr	r3, [pc, #556]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b7a:	2180      	movs	r1, #128	@ 0x80
 8002b7c:	0249      	lsls	r1, r1, #9
 8002b7e:	430a      	orrs	r2, r1
 8002b80:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b82:	4b89      	ldr	r3, [pc, #548]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b84:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002b86:	4b88      	ldr	r3, [pc, #544]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b88:	498a      	ldr	r1, [pc, #552]	@ (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b8a:	400a      	ands	r2, r1
 8002b8c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b8e:	4b86      	ldr	r3, [pc, #536]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002b90:	697a      	ldr	r2, [r7, #20]
 8002b92:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2201      	movs	r2, #1
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d016      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7fd fe2e 	bl	80007fc <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba4:	e00c      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba6:	f7fd fe29 	bl	80007fc <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	4a81      	ldr	r2, [pc, #516]	@ (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x30c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d904      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002bb6:	2313      	movs	r3, #19
 8002bb8:	18fb      	adds	r3, r7, r3
 8002bba:	2203      	movs	r2, #3
 8002bbc:	701a      	strb	r2, [r3, #0]
            break;
 8002bbe:	e004      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc0:	4b79      	ldr	r3, [pc, #484]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc4:	2202      	movs	r2, #2
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	d0ed      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002bca:	2313      	movs	r3, #19
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd4:	4b74      	ldr	r3, [pc, #464]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	4a75      	ldr	r2, [pc, #468]	@ (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	0019      	movs	r1, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002be2:	4b71      	ldr	r3, [pc, #452]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002be4:	430a      	orrs	r2, r1
 8002be6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002be8:	e00c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bea:	2312      	movs	r3, #18
 8002bec:	18fb      	adds	r3, r7, r3
 8002bee:	2213      	movs	r2, #19
 8002bf0:	18ba      	adds	r2, r7, r2
 8002bf2:	7812      	ldrb	r2, [r2, #0]
 8002bf4:	701a      	strb	r2, [r3, #0]
 8002bf6:	e005      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	2312      	movs	r3, #18
 8002bfa:	18fb      	adds	r3, r7, r3
 8002bfc:	2213      	movs	r2, #19
 8002bfe:	18ba      	adds	r2, r7, r2
 8002c00:	7812      	ldrb	r2, [r2, #0]
 8002c02:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c04:	2311      	movs	r3, #17
 8002c06:	18fb      	adds	r3, r7, r3
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d105      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c0e:	4b66      	ldr	r3, [pc, #408]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c10:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002c12:	4b65      	ldr	r3, [pc, #404]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c14:	4969      	ldr	r1, [pc, #420]	@ (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002c16:	400a      	ands	r2, r1
 8002c18:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c24:	4b60      	ldr	r3, [pc, #384]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c28:	2203      	movs	r2, #3
 8002c2a:	4393      	bics	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	4b5d      	ldr	r3, [pc, #372]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d009      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c42:	4b59      	ldr	r3, [pc, #356]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c46:	4a5e      	ldr	r2, [pc, #376]	@ (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	0019      	movs	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	4b55      	ldr	r3, [pc, #340]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c52:	430a      	orrs	r2, r1
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	2380      	movs	r3, #128	@ 0x80
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c62:	4b51      	ldr	r3, [pc, #324]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c66:	4a57      	ldr	r2, [pc, #348]	@ (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	695a      	ldr	r2, [r3, #20]
 8002c70:	4b4d      	ldr	r3, [pc, #308]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	@ 0x80
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d009      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c82:	4b49      	ldr	r3, [pc, #292]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c86:	4a50      	ldr	r2, [pc, #320]	@ (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	0019      	movs	r1, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699a      	ldr	r2, [r3, #24]
 8002c90:	4b45      	ldr	r3, [pc, #276]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002c92:	430a      	orrs	r2, r1
 8002c94:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2220      	movs	r2, #32
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ca0:	4b41      	ldr	r3, [pc, #260]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca4:	4a49      	ldr	r2, [pc, #292]	@ (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	0019      	movs	r1, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	4b3e      	ldr	r3, [pc, #248]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	2380      	movs	r3, #128	@ 0x80
 8002cba:	01db      	lsls	r3, r3, #7
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d015      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cc0:	4b39      	ldr	r3, [pc, #228]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	0899      	lsrs	r1, r3, #2
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	69da      	ldr	r2, [r3, #28]
 8002ccc:	4b36      	ldr	r3, [pc, #216]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	69da      	ldr	r2, [r3, #28]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	05db      	lsls	r3, r3, #23
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d106      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002cde:	4b32      	ldr	r3, [pc, #200]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002ce4:	2180      	movs	r1, #128	@ 0x80
 8002ce6:	0249      	lsls	r1, r1, #9
 8002ce8:	430a      	orrs	r2, r1
 8002cea:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	2380      	movs	r3, #128	@ 0x80
 8002cf2:	039b      	lsls	r3, r3, #14
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d016      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002cfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cfc:	4a34      	ldr	r2, [pc, #208]	@ (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	0019      	movs	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a1a      	ldr	r2, [r3, #32]
 8002d06:	4b28      	ldr	r3, [pc, #160]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1a      	ldr	r2, [r3, #32]
 8002d10:	2380      	movs	r3, #128	@ 0x80
 8002d12:	03db      	lsls	r3, r3, #15
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d106      	bne.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d18:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d1a:	68da      	ldr	r2, [r3, #12]
 8002d1c:	4b22      	ldr	r3, [pc, #136]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d1e:	2180      	movs	r1, #128	@ 0x80
 8002d20:	0449      	lsls	r1, r1, #17
 8002d22:	430a      	orrs	r2, r1
 8002d24:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	03db      	lsls	r3, r3, #15
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d016      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d32:	4b1d      	ldr	r3, [pc, #116]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d36:	4a27      	ldr	r2, [pc, #156]	@ (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d40:	4b19      	ldr	r3, [pc, #100]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d4a:	2380      	movs	r3, #128	@ 0x80
 8002d4c:	045b      	lsls	r3, r3, #17
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d106      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d52:	4b15      	ldr	r3, [pc, #84]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d54:	68da      	ldr	r2, [r3, #12]
 8002d56:	4b14      	ldr	r3, [pc, #80]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d58:	2180      	movs	r1, #128	@ 0x80
 8002d5a:	0449      	lsls	r1, r1, #17
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	2380      	movs	r3, #128	@ 0x80
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d016      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d6c:	4b0e      	ldr	r3, [pc, #56]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d70:	4a19      	ldr	r2, [pc, #100]	@ (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	2380      	movs	r3, #128	@ 0x80
 8002d86:	01db      	lsls	r3, r3, #7
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d106      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d8c:	4b06      	ldr	r3, [pc, #24]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	4b05      	ldr	r3, [pc, #20]	@ (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8002d92:	2180      	movs	r1, #128	@ 0x80
 8002d94:	0249      	lsls	r1, r1, #9
 8002d96:	430a      	orrs	r2, r1
 8002d98:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d9a:	2312      	movs	r3, #18
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	781b      	ldrb	r3, [r3, #0]
}
 8002da0:	0018      	movs	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b006      	add	sp, #24
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40007000 	.word	0x40007000
 8002db0:	fffffcff 	.word	0xfffffcff
 8002db4:	fffeffff 	.word	0xfffeffff
 8002db8:	00001388 	.word	0x00001388
 8002dbc:	efffffff 	.word	0xefffffff
 8002dc0:	fffff3ff 	.word	0xfffff3ff
 8002dc4:	fff3ffff 	.word	0xfff3ffff
 8002dc8:	ffcfffff 	.word	0xffcfffff
 8002dcc:	ffffcfff 	.word	0xffffcfff
 8002dd0:	ffbfffff 	.word	0xffbfffff
 8002dd4:	feffffff 	.word	0xfeffffff
 8002dd8:	ffff3fff 	.word	0xffff3fff

08002ddc <memset>:
 8002ddc:	0003      	movs	r3, r0
 8002dde:	1882      	adds	r2, r0, r2
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d100      	bne.n	8002de6 <memset+0xa>
 8002de4:	4770      	bx	lr
 8002de6:	7019      	strb	r1, [r3, #0]
 8002de8:	3301      	adds	r3, #1
 8002dea:	e7f9      	b.n	8002de0 <memset+0x4>

08002dec <__libc_init_array>:
 8002dec:	b570      	push	{r4, r5, r6, lr}
 8002dee:	2600      	movs	r6, #0
 8002df0:	4c0c      	ldr	r4, [pc, #48]	@ (8002e24 <__libc_init_array+0x38>)
 8002df2:	4d0d      	ldr	r5, [pc, #52]	@ (8002e28 <__libc_init_array+0x3c>)
 8002df4:	1b64      	subs	r4, r4, r5
 8002df6:	10a4      	asrs	r4, r4, #2
 8002df8:	42a6      	cmp	r6, r4
 8002dfa:	d109      	bne.n	8002e10 <__libc_init_array+0x24>
 8002dfc:	2600      	movs	r6, #0
 8002dfe:	f000 f819 	bl	8002e34 <_init>
 8002e02:	4c0a      	ldr	r4, [pc, #40]	@ (8002e2c <__libc_init_array+0x40>)
 8002e04:	4d0a      	ldr	r5, [pc, #40]	@ (8002e30 <__libc_init_array+0x44>)
 8002e06:	1b64      	subs	r4, r4, r5
 8002e08:	10a4      	asrs	r4, r4, #2
 8002e0a:	42a6      	cmp	r6, r4
 8002e0c:	d105      	bne.n	8002e1a <__libc_init_array+0x2e>
 8002e0e:	bd70      	pop	{r4, r5, r6, pc}
 8002e10:	00b3      	lsls	r3, r6, #2
 8002e12:	58eb      	ldr	r3, [r5, r3]
 8002e14:	4798      	blx	r3
 8002e16:	3601      	adds	r6, #1
 8002e18:	e7ee      	b.n	8002df8 <__libc_init_array+0xc>
 8002e1a:	00b3      	lsls	r3, r6, #2
 8002e1c:	58eb      	ldr	r3, [r5, r3]
 8002e1e:	4798      	blx	r3
 8002e20:	3601      	adds	r6, #1
 8002e22:	e7f2      	b.n	8002e0a <__libc_init_array+0x1e>
 8002e24:	08002e8c 	.word	0x08002e8c
 8002e28:	08002e8c 	.word	0x08002e8c
 8002e2c:	08002e90 	.word	0x08002e90
 8002e30:	08002e8c 	.word	0x08002e8c

08002e34 <_init>:
 8002e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e36:	46c0      	nop			@ (mov r8, r8)
 8002e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3a:	bc08      	pop	{r3}
 8002e3c:	469e      	mov	lr, r3
 8002e3e:	4770      	bx	lr

08002e40 <_fini>:
 8002e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e42:	46c0      	nop			@ (mov r8, r8)
 8002e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e46:	bc08      	pop	{r3}
 8002e48:	469e      	mov	lr, r3
 8002e4a:	4770      	bx	lr
